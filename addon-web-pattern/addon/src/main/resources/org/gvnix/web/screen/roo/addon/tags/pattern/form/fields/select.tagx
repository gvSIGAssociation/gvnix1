<jsp:root xmlns:c="http://java.sun.com/jsp/jstl/core" xmlns:field="urn:jsptagdir:/WEB-INF/tags/form/fields" xmlns:fn="http://java.sun.com/jsp/jstl/functions" xmlns:spring="http://www.springframework.org/tags" xmlns:form="http://www.springframework.org/tags/form" xmlns:jsp="http://java.sun.com/JSP/Page" version="2.0">
  <jsp:output omit-xml-declaration="yes" />

  <jsp:directive.attribute name="id" type="java.lang.String" required="true" rtexprvalue="true" description="The identifier for this tag (do not change!)" />
  <jsp:directive.attribute name="field" type="java.lang.String" required="true" rtexprvalue="true" description="The field exposed from the form backing object" />
  <jsp:directive.attribute name="path" type="java.lang.String" required="true" rtexprvalue="true" description="The relative path to the referenced resource" />
  <jsp:directive.attribute name="items" type="java.util.Collection" required="true" rtexprvalue="true" description="The name of the collection displayed in the select box" />
  <jsp:directive.attribute name="label" type="java.lang.String" required="false" rtexprvalue="true" description="The label used for this field, will default to a message bundle if not supplied" />
  <jsp:directive.attribute name="itemLabel" type="java.lang.String" required="false" rtexprvalue="true" description="Name of the property mapped to the inner text of the 'option' tag (will override the configured converter)" />
  <jsp:directive.attribute name="itemValue" type="java.lang.String" required="false" rtexprvalue="true" description="The identifier used as value in the select box (defaults to 'id' for non enum types)" />
  <jsp:directive.attribute name="required" type="java.lang.Boolean" required="false" rtexprvalue="true" description="Indicates if this field is required (default false)" />
  <jsp:directive.attribute name="disabled" type="java.lang.Boolean" required="false" rtexprvalue="true" description="Specify if this field should be enabled" />
  <jsp:directive.attribute name="multiple" type="java.lang.Boolean" required="false" rtexprvalue="true" description="Specify if the select box should allow multiple selections" />
  <jsp:directive.attribute name="disableFormBinding" type="java.lang.Boolean" required="false" rtexprvalue="true" description="Set to true to disable Spring form binding" />
  <jsp:directive.attribute name="render" type="java.lang.Boolean" required="false" rtexprvalue="true" description="Indicate if the contents of this tag and all enclosed tags should be rendered (default 'true')" />
  <jsp:directive.attribute name="z" type="java.lang.String" required="false" description="Used for checking if element has been modified (to recalculate simply provide empty string value)" />

  <!-- gvNIX added attributes not included into Roo by default -->
  <jsp:directive.attribute name="showEmptyMessage" type="java.lang.Boolean" required="false" rtexprvalue="true" description="Enable (default) or disable the message to show when the item list is empty" />
  <jsp:directive.attribute name="disabledEdit" type="java.lang.Boolean" required="false" rtexprvalue="true" description="Specify if this field should be enabled when we are in edit mode" />
  <jsp:directive.attribute name="size" type="java.lang.String" required="false" rtexprvalue="true" description="Size of the item to display" />

  <c:if test="${empty render or render}">

    <c:if test="${empty disabled}">
      <c:set value="false" var="disabled" />
    </c:if>

    <c:if test="${empty disabledEdit}">
      <c:set value="false" var="disabledEdit" />
    </c:if>

    <c:if test="${empty label}">
      <spring:message code="label_${fn:toLowerCase(fn:substringAfter(id,'_'))}" var="label" htmlEscape="false" />
    </c:if>

    <c:if test="${empty required}">
      <c:set value="false" var="required" />
    </c:if>

    <c:if test="${empty multiple}">
      <c:set value="false" var="multiple" />
    </c:if>

    <c:if test="${empty showEmptyMessage}">
      <c:set value="true" var="showEmptyMessage" />
    </c:if>

	<!-- If there are not any items set the field as disabled, just in case showEmptyMessage is false -->
    <c:if test="${empty items}">
      <c:set value="true" var="disabled" />
    </c:if>

    <c:if test="${empty size}">
      <c:set value="15" var="size" />
    </c:if>

    <c:set var="sec_field">
      <spring:escapeBody javaScriptEscape="true" >${field}</spring:escapeBody>
    </c:set>

    <c:set var="select_data_id" value='${fn:replace(sec_field, ".", "_")}' scope="request" />

    <c:set var="sec_itemLabel">
      <spring:escapeBody htmlEscape="true" >${itemLabel}</spring:escapeBody>
    </c:set>

    <!-- Set var properties required for form elements -->
    <c:set var="secParentId">
      <spring:escapeBody htmlEscape="true" javaScriptEscape="true">${parentId}</spring:escapeBody>
    </c:set>
    <c:set var="fieldPos" value="${pos.count - 1}" scope="request" />
    <!-- Field name with create or update sufix to avoid duplicated -->
    <c:choose>
      <c:when test="${empty item}">
        <c:set var="createOrUpdate" value="create" scope="request" />
      </c:when>
      <c:otherwise>
        <c:set var="createOrUpdate" value="update" scope="request" />
      </c:otherwise>
    </c:choose>
    <c:set var="fieldHiddenId" value="${secParentId}[${fieldPos}]_${sec_field}_id_${createOrUpdate}" scope="request" />
    <c:set var="fieldId" value="_${fieldHiddenId}" scope="request" />
    <c:set var="fieldMethod" value='${secParentId}_${fieldPos}_${fn:replace(sec_field, ".", "_")}_${createOrUpdate}' scope="request" />
    <c:set var="fieldName" value="list[${fieldPos}].${sec_field}" scope="request" />
    <c:set var="fieldStyle" value="gvNixTableData ${secParentId}_col_${sec_field}" scope="request" />
    <c:set var="pkField" value="${compositePkField}.${referenceField}" scope="request" />

    <!-- TODO: Removed multiple support because Dojo issue: http://jira.springframework.org/browse/ROO-909 -->

    <c:choose>

      <!-- No item: Show a column header -->
      <c:when test="${item eq null and referenceName ne field and pkField ne field}">
        <!-- Create a header column -->
        <th class="${fieldStyle}">
          <c:out value="${label}" />
          <c:set var="colCounter" value="${colCounter + 1}" scope="request" />
        </th>
      </c:when>

      <!-- When field is a reference, include it as hidden (detail pattern field relation with master pattern) -->
      <c:when test="${referenceName eq field or pkField eq field}">
        <c:choose>
          <c:when test="${empty item}">
            <input type="hidden" id="${fieldId}" name="${fieldName}" value="${referenceValue}" />
          </c:when>
          <c:otherwise>
            <input type="hidden" id="${fieldId}" name="${fieldName}" value="${referenceValue}" disabled="disabled" />
          </c:otherwise>
        </c:choose>
      </c:when>

      <!-- Empty selection list, show information message -->
      <c:when test="${empty items and showEmptyMessage and empty item}">
        <td class="${fieldStyle}">
          <spring:message arguments="${label}" code="entity_not_found" />
          <c:if test="${required eq 'true'}">
            (<spring:message code="field_required" />)
          </c:if>
        </td>
      </c:when>

      <c:otherwise>
        <td class="${fieldStyle}">

          <!-- In case item is a empty string: Create a column element without value for creation -->
          <c:set value="" var="optionValueSelected" scope="request"/>
          <c:if test="${!empty item}">
            <!-- Item is not empty: Create a column element with value for update -->
            <c:choose>
              <c:when test='${fn:contains(sec_field, ".")}'>
                <c:set value='${fn:substringBefore(sec_field, ".")}' var="auxiliarField" />
                <spring:eval expression="item[auxiliarField]" scope="request" var="fieldValue" />
              </c:when>
              <c:otherwise>
                <spring:eval expression="item[field]" scope="request" var="fieldValue" />
              </c:otherwise>
            </c:choose>
            <c:choose>
              <!-- Check it is a simple type and not a mapped object property
                   before getting the 'itemValue' attribute -->
              <c:when test="${empty itemValue || fieldValue.class.simpleName == 'String' || fieldValue.class.simpleName == 'Number'}">
                <c:set value='${fieldValue}' var="optionValueSelected" scope="request"/>
              </c:when>
              <c:otherwise>
                <!-- fieldValue can be null if has no value: show options without selected -->
                <c:if test="${not empty fieldValue}">
                  <spring:eval expression="fieldValue[itemValue]" scope="request" var="optionValueSelected"/>
                </c:if>
              </c:otherwise>
		    </c:choose>
          </c:if>

          <!-- Hidden field: used only for form submit -->
          <input id="${fieldHiddenId}" name="${fieldName}" type="hidden" value="${optionValueSelected}"/>

		  <!-- Convert the current item field value to string so the spring converters get applied -->
          <c:set var="optionValueSelectedConverted" scope="request" value=""/>
          <c:if test="${not empty optionValueSelected}">
    		<c:set var="optionValueSelectedConverted" scope="request"><spring:eval expression="optionValueSelected"/></c:set>
          </c:if>

		  <!-- If the item field value is not a enum or a object mapped one,
		  look into the list of items for the one whose id is equal to the current
		  field value to get the description to show to the user -->
		  <c:forEach items="${items}" var="item2">
            <c:choose>
              <c:when test="${empty itemLabel}">
                <spring:eval expression="item2" var="optionLabel" scope="request"/>
              </c:when>
              <c:otherwise>
                <spring:eval expression="item2[sec_itemLabel]" var="optionLabel" scope="request"/>
              </c:otherwise>
		    </c:choose>
	        <!-- Set the option value and current selected value -->
        	<c:choose>
              <c:when test="${empty itemValue}">
                <spring:eval expression="item2" var="optionValue" scope="request"/>
              </c:when>
              <c:otherwise>
                <spring:eval expression="item2[itemValue]" var="optionValue" scope="request"/>
              </c:otherwise>
            </c:choose>
            <c:if test="${optionValue == optionValueSelected}">
			    <!-- Convert the current item field value to string so the spring converters get applied -->
            	<c:set var="optionValueSelectedConverted" scope="request"><spring:eval expression="optionLabel"/></c:set>
            </c:if>
          </c:forEach>

          <input type="text" id="${fieldId}" disabled="disabled" value="${optionValueSelectedConverted}" size="${size}"/>

          <!-- On update or create button, activate and apply validation decorations to field -->
          <script type="text/javascript">
                    
           <c:if test="${prepare_widgets_data}">
                      <!-- create select data -->
			        var ${select_data_id}_data = {
			            identifier: 'value',
			            label: 'label',
			            items: [

			<c:set var="is_first_item" value="true"/>
            <c:forEach items="${items}" var="item2">
              <!-- Set the option label -->
              <c:choose>
                <c:when test="${empty itemLabel}">
                  <spring:eval expression="item2" var="optionLabel" scope="request"/>
                </c:when>
                <c:otherwise>
                  <spring:eval expression="item2[sec_itemLabel]" var="optionLabel" scope="request"/>
                </c:otherwise>
 			  </c:choose>
 			  <!-- Convert the current item field value to string so the spring converters get applied -->
 			  <c:set var="optionLabel" scope="request"><spring:eval expression="optionLabel" htmlEscape="false"/></c:set>

			  <!-- Set the option value and current selected value -->
          	  <c:choose>
                <!-- Item is a empty string: Create a column element without value for creation -->
                <c:when test="${empty itemValue}">
                  <spring:eval expression="item2" var="optionValue" scope="request"/>
                </c:when>
                <c:otherwise>
                  <spring:eval expression="item2[itemValue]" var="optionValue" scope="request"/>
                </c:otherwise>
              </c:choose>
              <c:choose>
	              <c:when test="${is_first_item}">
	                <c:set var="is_first_item" value="false"/>
	                <c:set var="json_item_sep" value=""/>
	              </c:when>
	              <c:otherwise>
	              <c:set var="json_item_sep" value=","/>
	              </c:otherwise>
              </c:choose>
					${json_item_sep} {
		                label: '${optionLabel}',
		                value: '${optionValue}'
		              }
            </c:forEach>
			            ]
			        };
          select_tags_data['${select_data_id}'] = new dojo.data.ItemFileReadStore({
        	  		data: ${select_data_id}_data
          		});
         </c:if>

          // see quicklinks.js
          dojo.addOnLoad(function() {
            // On page load, invoke method to connect validation with link click
        	  create_pattern_select_widget({
        		  select_data_id: '${select_data_id}',
        		  parentId: '${parentId}',
        		  fieldId: '${fieldId}',
        		  fieldName: '${fieldName}',
        		  createOrUpdate: '${createOrUpdate}',
        		  secParentId: '${secParentId}',
        		  fieldPos: ${fieldPos},
        		  disabled: ${disabled},
        		  disabledEdit: ${disabledEdit},
        		  widgetAttrs: {promptMessage: '${sec_field_validation}', invalidMessage: '${sec_field_invalid}', required : ${required}, ${sec_validation_regex} missingMessage : '${sec_field_required}' },
        		  multiple: ${multiple},
        		  optionValueSelected: "${optionValueSelected}",
        		  <c:set var="compositePkFieldPrefix" value="${compositePkField}." scope="request" />
        		  <c:set var="isReadOnlySelect" value="${fn:startsWith(field, compositePkFieldPrefix) and createOrUpdate eq 'update'}"/>
        		  readOnly: ${isReadOnlySelect}
        	      }
        	  );
          });
          </script>

        </td>
      </c:otherwise>

    </c:choose>

  </c:if>

</jsp:root>
