<jsp:root xmlns:c="http://java.sun.com/jsp/jstl/core" xmlns:fn="http://java.sun.com/jsp/jstl/functions" xmlns:spring="http://www.springframework.org/tags" xmlns:form="http://www.springframework.org/tags/form" xmlns:jsp="http://java.sun.com/JSP/Page" xmlns:pattern="urn:jsptagdir:/WEB-INF/tags/pattern/form/fields" version="2.0">
  <jsp:output omit-xml-declaration="yes" />

  <jsp:directive.attribute name="id" type="java.lang.String" required="true" rtexprvalue="true" description="The identifier for this tag (do not change!)" />
  <jsp:directive.attribute name="field" type="java.lang.String" required="true" rtexprvalue="true" description="The field exposed from the form backing object" />
  <jsp:directive.attribute name="label" type="java.lang.String" required="false" rtexprvalue="true" description="The label used for this field, will default to a message bundle if not supplied" />
  <jsp:directive.attribute name="labelCode" type="java.lang.String" required="false" rtexprvalue="true" description="Key for label message bundle if label is not supplied" />
  <jsp:directive.attribute name="required" type="java.lang.Boolean" required="false" rtexprvalue="true" description="Indicates if this field is required (default false)" />
  <jsp:directive.attribute name="disabled" type="java.lang.Boolean" required="false" rtexprvalue="true" description="Specify if this field should be enabled" />
  <jsp:directive.attribute name="validationRegex" type="java.lang.String" required="false" rtexprvalue="true" description="Specify regular expression to be used for the validation of the input contents" />
  <jsp:directive.attribute name="validationMessageCode" type="java.lang.String" required="false" rtexprvalue="true" description="Specify the message (message property code) to be displayed if the regular expression validation fails" />
  <jsp:directive.attribute name="validationMessage" type="java.lang.String" required="false" rtexprvalue="true" description="Specify the message to be displayed if the regular expression validation fails" />
  <jsp:directive.attribute name="min" type="java.lang.String" required="false" rtexprvalue="true" description="Specify the minimum length of the input contents" />
  <jsp:directive.attribute name="max" type="java.lang.String" required="false" rtexprvalue="true" description="Specify the maximum length of the input contents" />
  <jsp:directive.attribute name="decimalMin" type="java.lang.String" required="false" rtexprvalue="true" description="Specify the minimum size of the input contents" />
  <jsp:directive.attribute name="decimalMax" type="java.lang.String" required="false" rtexprvalue="true" description="Specify the maximum size of the input contents" />
  <jsp:directive.attribute name="disableFormBinding" type="java.lang.Boolean" required="false" rtexprvalue="true" description="Set to true to disable Spring form binding" />
  <jsp:directive.attribute name="type" type="java.lang.String" required="false" rtexprvalue="true" description="Set field type (default 'text', 'password' or 'hidden')" />
  <jsp:directive.attribute name="render" type="java.lang.Boolean" required="false" rtexprvalue="true" description="Indicate if the contents of this tag and all enclosed tags should be rendered (default 'true')" />
  <jsp:directive.attribute name="z" type="java.lang.String" required="false" description="Used for checking if element has been modified (to recalculate simply provide empty string value)" />
  
  <!-- gvNIX added attributes not included into Roo by default -->
  <jsp:directive.attribute name="value" type="java.lang.String" required="false" rtexprvalue="true" description="Force this string to be used as value at hidden input" />
  <jsp:directive.attribute name="size" type="java.lang.String" required="false" rtexprvalue="true" description="Size of the item to display" />
  
  <c:if test="${empty render or render}">
  
    <c:if test="${empty type}">
      <c:set value="text" var="type" />
    </c:if>
    
    <c:if test="${empty disabled}">
      <c:set value="false" var="disabled" />
    </c:if>
    
    <c:if test="${empty size}">
      <c:set value="15" var="size" />
    </c:if>
    
    <c:if test="${empty label}">
      <c:if test="${empty labelCode}">
        <c:set var="labelCode" value="${fn:substringAfter(id,'_')}" />
      </c:if>
      <spring:message code="label_${fn:toLowerCase(labelCode)}" var="label" htmlEscape="false" />
    </c:if>
    
    <c:if test="${empty validationMessage}">
      <c:choose>
        <c:when test="${empty validationMessageCode}">
          <spring:message arguments="${fn:escapeXml(label)}" code="field_invalid" var="field_invalid" htmlEscape="false" />
        </c:when>
        <c:otherwise>
          <spring:message arguments="${fn:escapeXml(label)}" code="${validationMessageCode}" var="field_invalid" htmlEscape="false" />
        </c:otherwise>
      </c:choose>
    </c:if>
    
    <c:if test="${empty required}">
      <c:set value="false" var="required" />
    </c:if>
    
    <c:set var="sec_field">
      <spring:escapeBody javaScriptEscape="true" >${field}</spring:escapeBody>
    </c:set>
    
    <!-- Set var properties required for form elements -->
    <c:set var="secParentId">
      <spring:escapeBody htmlEscape="true" javaScriptEscape="true">${parentId}</spring:escapeBody>
    </c:set>
    <c:set var="fieldPos" value="${pos.count - 1}" scope="request" />
    <!-- Field name with create or update sufix to avoid duplicated -->
    <c:choose>
      <c:when test="${empty item}">
        <c:set var="createOrUpdate" value="create" scope="request" />
      </c:when>
      <c:otherwise>
        <c:set var="createOrUpdate" value="update" scope="request" />
      </c:otherwise>
    </c:choose>
    <c:set var="fieldHiddenId" value="${secParentId}[${fieldPos}]_${sec_field}_id_${createOrUpdate}" scope="request" />
    <c:set var="fieldId" value="_${fieldHiddenId}" scope="request" />
    <c:set var="fieldMethod" value='${secParentId}_${fieldPos}_${fn:replace(sec_field, ".", "_")}_${createOrUpdate}' scope="request" />
    <c:set var="fieldName" value="list[${fieldPos}].${sec_field}" scope="request" />
    <c:set var="fieldStyle" value="gvNixTableData ${secParentId}_col_${sec_field}" scope="request" />
    <c:set var="pkField" value="${compositePkField}.${referenceField}" scope="request" />

    <c:choose>

      <!-- No item: Show a column header -->
      <c:when test="${item eq null and referenceName ne field and pkField ne field}">
        <!-- Create a header column when not hidden input type -->
        <c:if test="${type != 'hidden'}">
          <th class="${fieldStyle}">
            <c:out value="${label}" />
            <c:set var="colCounter" value="${colCounter + 1}" scope="request" />
          </th>
        </c:if>
      </c:when>

      <!-- When field is a reference, include it as hidden (detail pattern field relation with master pattern) -->      
      <c:when test="${referenceName eq field or pkField eq field}">
        <c:choose>
          <c:when test="${empty item}">
            <input type="hidden" id="${fieldId}" name="${fieldName}" value="${referenceValue}" />
          </c:when>
          <c:otherwise>
            <input type="hidden" id="${fieldId}" name="${fieldName}" value="${referenceValue}" disabled="disabled" />
          </c:otherwise>
        </c:choose>
      </c:when>
     
      <!-- Item is a hidden type: Create a hidden element with defined value without column -->
      <c:when test="${type eq 'hidden'}">
        <!-- Value if specified, else item field value -->
        <c:if test="${empty value and disableFormBinding}">
          <c:set var="value" scope="request">
            <spring:eval expression="item[field]" />
          </c:set>
        </c:if>
        <input id="${fieldId}" name="${fieldName}" type="hidden" value="${value}" />
      </c:when>

      <c:otherwise>
        <td class="${fieldStyle}">
        
          <c:choose>

            <!-- Item is a empty string: Create a column element without value for creation -->
            <c:when test="${empty item}">
              <!-- Visible field: used for user interaction with validations -->
              <input id="${fieldId}" type="${type}" />
            </c:when>
            <c:when test="${not empty item and disableFormBinding}">
              <form:input id="${fieldId}" path="${field}" readonly="true" />
            </c:when>
            <!-- Item is not empty: Create a column element with value for update -->
            <c:otherwise>
              <!-- Visible field: used for user interaction with validations (initialy diabled) -->
              <spring:eval expression="item[field]" scope="request" var="fieldValue" />
              <input id="${fieldId}" type="${type}" value="${fieldValue}" disabled="disabled" size="${size}" />
            </c:otherwise>

          </c:choose>
          
          <!-- Hidden field: used only for form submit -->
          <input id="${fieldHiddenId}" name="${fieldName}" type="hidden" />

          <!-- Roo input type validation definitions -->
          <c:choose>
            <c:when test="${required}">
              <spring:message code="field_required" var="field_required" htmlEscape="false" />
              <spring:message argumentSeparator="," arguments="${label},(${field_required})" code="field_simple_validation" var="field_validation" htmlEscape="false" />
            </c:when>
            <c:otherwise>
              <spring:message argumentSeparator="," arguments="${label}, " code="field_simple_validation" var="field_validation" htmlEscape="false" />
            </c:otherwise>
          </c:choose>
          <c:set var="sec_field_validation">
            <spring:escapeBody javaScriptEscape="true">${field_validation}</spring:escapeBody>
          </c:set>
          <c:set var="sec_field_invalid">
            <spring:escapeBody javaScriptEscape="true" htmlEscape="true">${field_invalid}</spring:escapeBody>
          </c:set>
          <c:set var="sec_field_required">
            <spring:escapeBody javaScriptEscape="true">${field_required}</spring:escapeBody>
          </c:set>
          <c:set var="sec_validation_regex" value="" />
          <c:if test="${!empty validationRegex}">
            <c:set var="sec_validation_regex" value="regExp : '${validationRegex}', " />
          </c:if>

          <!-- On update or create button, activate and apply validation decorations to field -->
          <script type="text/javascript"><![CDATA[
          function ${fieldMethod}() {
            // Get update or create button
            var link = dojo.byId('${parentId}_${createOrUpdate}');
            dojo.connect(link, "onclick", function(event) {
              if (!gvNixEditMode) {
                // Prevent an event's default behavior (e.g., a link from loading a new page)
                event.preventDefault();
                var decorate = true;
                // On update, only apply validations if row selected; on create always apply
                if ('${createOrUpdate}' == 'update') {
                  var checkbox = dojo.byId('gvnix_checkbox_${secParentId}_${fieldPos}');
                  decorate = checkbox.checked;
                }
                if (decorate) {
                  // Get field element to decorate
                  var field = dojo.byId('${fieldId}');
                  // Field keep disabled if required by input attribute
                  field.disabled = ${disabled};
                  
                  // Obtain field size in order to display the new element with the same size
                  var fieldSize = '15'; // Default size: 15
                  if (field != null && field.size != null) {
                    fieldSize = field.size;
                  }
                  
                  Spring.addDecoration(new Spring.ElementDecoration({elementId : '${fieldId}', widgetType : 'dijit.form.ValidationTextBox', widgetAttrs : {promptMessage: '${sec_field_validation}', invalidMessage: '${sec_field_invalid}', required : ${required}, ${sec_validation_regex} missingMessage : '${sec_field_required}' }}));
                  
                  // Set the stored size
                  var newField = dojo.byId('${fieldId}');
                  if (newField != null) {
                    newField.size = fieldSize;
                  }
                }
              }
            });
          }
          dojo.addOnLoad(function() {
            // On page load, invoke method to connect validation with link click
            ${fieldMethod}();
          });
          ]]></script>

        </td>
      </c:otherwise>
      
    </c:choose>

  </c:if>
</jsp:root>