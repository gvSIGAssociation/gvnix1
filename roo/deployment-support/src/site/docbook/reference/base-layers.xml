<?xml version="1.0" encoding="UTF-8"?>
<chapter version="5.0" xml:id="base-layers"
         xmlns="http://docbook.org/ns/docbook"
         xmlns:xlink="http://www.w3.org/1999/xlink"
         xmlns:xi="http://www.w3.org/2001/XInclude"
         xmlns:ns5="http://www.w3.org/1998/Math/MathML"
         xmlns:ns4="http://www.w3.org/1999/xhtml"
         xmlns:ns3="http://www.w3.org/2000/svg"
         xmlns:ns="http://docbook.org/ns/docbook">
  <title>Application Layering</title>

  <para>Java enterprise applications can take many shapes and forms depending
  on their requirements. Depending on these requirements, you need to decide
  which layers your application needs. Many applications <link
  linkend="architecture-dao">won't benefit</link> from additional complexity
  and maintenance cost of service or repository layers unless there is a need.
  With version 1.2.0 Spring Roo offers support for specific application
  layering tailored to the needs of the application. This section provides an
  overview of Roo's support for service and repository layers.</para>

  <para><sidebar>
      <para>Note: This section provides an overview of the application
      layering options Spring Roo offers since the <emphasis
      role="bold">1.2.0.M1</emphasis> release. It does not discuss the merits
      of different approaches to architecting enterprise applications.</para>
    </sidebar></para>

  <section>
    <title>The Big Picture</title>

    <para>With the Roo 1.2.0 release internals have been changed to allow the
    integration of multiple application layers. This is particularly useful
    for the support of different persistence mechanisms. In previous releases
    the only persistence supported in Roo core was the JPA Entity Active
    Record pattern. With the internal changes in place Roo can now support
    alternative persistence providers which support application
    layering.</para>

    <mediaobject>
      <imageobject>
        <imagedata fileref="images/layering.png"></imagedata>
      </imageobject>
    </mediaobject>

    <para>While there are a number of new layering and persistence choices
    available, by default Roo will continue to support the JPA Active Record
    Entity by default (marked orange). However, you can easily change existing
    applications by adding further service or repository layers (details
    below). If you add new layers Roo will automatically change its ITDs in
    the consumer layer or service layer respectively. For example it will
    automatically inject and call a new service layer within an existing MVC
    controller, Integration test or data on demand for a given domain
    type.</para>
  </section>

  <section>
    <title xml:id="repository-layer">Persistence Layers</title>

    <para>There are now three options available in Roo core to support data
    persistence, JPA Entities (Active Record style), JPA Repositories and
    MongoDB Repositories.</para>

    <section>
      <title>JPA Entities (Active Record style)</title>

      <para>Active record-style JPA Entities have been the default since the
      first release of Spring Roo and will remain so. In order to configure
      your project for JPA persistence, you can run the jpa setup
      command:</para>

      <para><programlisting>roo&gt; <emphasis role="bold">jpa setup</emphasis> --provider HIBERNATE --database HYPERSONIC_PERSISTENT</programlisting>This
      configures your project to use the Hibername object relational mapper
      along with a in-memory database (HSQLDB). Further details about this
      persistence option can be found <link
      linkend="base-persistence">here</link>.</para>

      <para>Active record-style JPA entities supported by Roo need to have a
      <emphasis role="bold">@RooJpaActiveRecord</emphasis> annotation which
      takes care of providing an ID field along with its accessor and mutator,
      In addition this annotation creates the typical CRUD methods to support
      data access.</para>

      <para><programlisting>roo&gt; <emphasis role="bold">entity jpa</emphasis> --class ~.domain.Pizza</programlisting>This
      command will create a Pizza domain type along with active record-style
      methods to persist, update, read and delete your entity. The following
      example also contains a number of fields which can be added through the
      <link linkend="command-index-field-commands">field</link> command via
      the Roo shell.</para>

      <para><programlisting>@RooJavaBean
@RooToString
<emphasis role="bold">@RooJpaActiveRecord</emphasis>
public class Pizza {

    @NotNull
    @Size(min = 2)
    private String name;

    private BigDecimal price;

    @ManyToMany(cascade = CascadeType.ALL)
    private Set&lt;Topping&gt; toppings = new HashSet&lt;Topping&gt;();

    @ManyToOne
    private Base base;
}</programlisting>Further details about command options and functionalities
      provided by active record-style JPA Entities please refer to the <link
      linkend="base-persistence">Persistence Add-on</link> chapter.</para>
    </section>

    <section>
      <title>JPA Repository</title>

      <para>Developers who require a repository / DAO layer instead of the
      default Roo entity-based persistence approach can do so by creating a
      <link xlink:href="http://projects.spring.io/spring-data-jpa/">Spring
      Data JPA</link> backed repository for a given JPA domain type. The
      domain type backing the repository needs have a JPA @Entity annotation
      and also a ID field defined along with accessors and mutators. After
      configuring your project for JPA persistence via the <link
      linkend="command-index-jpa-setup">jpa setup</link> command, this
      functionality is automatically provided by annotating the domain type
      with Roo's <emphasis role="bold">@RooJpaEntity</emphasis>
      annotation.<programlisting>roo&gt; <emphasis role="bold">entity jpa</emphasis> --class ~.domain.Pizza <emphasis
            role="bold">--activeRecord false</emphasis></programlisting>By
      defining --activeRecord false you can opt out of the otherwise default
      Active Record style. The following example also contains a number of
      fields which can be added through the <link
      linkend="command-index-field-commands">field</link> command via the Roo
      shell.</para>

      <para><programlisting>@RooJavaBean
@RooToString
<emphasis role="bold">@RooJpaEntity</emphasis>
public class Pizza {

    @NotNull
    @Size(min = 2)
    private String name;

    private BigDecimal price;

    @ManyToMany(cascade = CascadeType.ALL)
    private Set&lt;Topping&gt; toppings = new HashSet&lt;Topping&gt;();

    @ManyToOne
    private Base base;
}</programlisting>With a domain type in place you can now create a new
      repository for this type by using the <link
      linkend="command-index-repository-jpa">repository jpa</link>
      command:</para>

      <para><programlisting>roo&gt; <emphasis role="bold">repository jpa</emphasis> --interface ~.repository.PizzaRepository --entity ~.domain.Pizza</programlisting>This
      will create a simple interface definition which leverages Spring Data
      JPA:</para>

      <para><programlisting><emphasis role="bold">@RooJpaRepository</emphasis>(domainType = Pizza.class)
public interface PizzaRepository {
}</programlisting>Of course, you can simply add the <emphasis
      role="bold">@RooJpaRepository</emphasis> annotation on any interface by
      hand in lieu of issuing the <link
      linkend="command-index-repository-jpa">repository jpa</link> command in
      the Roo shell.</para>

      <para>The adition of the <emphasis
      role="bold">@RooJpaRepository</emphasis> annotation will trigger the
      creation of a fairly trivial AspectJ ITD which adds an extends statement
      to the PizzaRepository interface resulting in the equivalent of this
      interface definition:</para>

      <para><programlisting>public interface PizzaRepository <emphasis
            role="bold">extends JpaRepository&lt;Pizza, Long&gt;</emphasis> {}</programlisting>Note,
      the <link
      xlink:href="http://docs.spring.io/spring-data/data-jpa/docs/current/api/org/springframework/data/jpa/repository/JpaRepository.html">JpaRepository</link>
      interface is part of the <link
      xlink:href="http://projects.spring.io/spring-data-jpa/">Spring Data
      JPA</link> API and provides all CRUD functionality out of the
      box.</para>
    </section>

    <section>
      <title>MongoDB Persistence</title>

      <para>As an alternative to JPA persistence, Spring Roo offers <link
      xlink:href="http://www.mongodb.org/">MongoDB</link> support by
      leveraging the <link
      xlink:href="http://projects.spring.io/spring-data-mongodb/">Spring Data
      MongoDB</link> project.</para>

      <section>
        <title>Setup</title>

        <para>To configure a project for MongoDB persistence you can use the
        <link linkend="command-index-mongo-setup">mongo setup</link>
        command:</para>

        <para><programlisting>roo&gt; <emphasis role="bold">mongo setup</emphasis></programlisting>This
        will configure your Spring Application context to use a MongoDB
        installation running on localhost and the default port. Optional
        command attributes allow you to define host, port, database name,
        username and password. Furthermore, to configure your application for
        deployment on <link xlink:href="http://cloudfoundry.com/">VMware
        CloudFoundry</link> you can use the --cloudFoundry attribute.</para>
      </section>

      <section>
        <title>Entities</title>

        <para>Once the application is configured for MongoDB support, the
        <link linkend="command-index-entity-mongo">entity mongo</link> and
        <link linkend="command-index-repository-mongo">repository mongo</link>
        commands become available:</para>

        <para><programlisting>roo&gt; <emphasis role="bold">entity mongo</emphasis> --class ~.domain.Pizza</programlisting>This
        command will create a Pizza domain type annotated with <emphasis
        role="bold">@RooMongoEntity</emphasis>. This annotation is responsibe
        for triggering the creation of an ITD which provides a Spring Data ID
        annotated field as well as its accessor and mutator. The following
        example also contains a number of fields which can be added through
        the <link linkend="command-index-field-commands">field</link> command
        via the Roo shell.</para>

        <para><programlisting>@RooJavaBean
@RooToString
<emphasis role="bold">@RooMongoEntity</emphasis>
public class Pizza {

    @NotNull
    @Size(min = 2)
    private String name;

    private BigDecimal price;

    @ManyToMany(cascade = CascadeType.ALL)
    private Set&lt;Topping&gt; toppings = new HashSet&lt;Topping&gt;();

    @ManyToOne
    private Base base;
}</programlisting></para>
      </section>

      <section>
        <title>Repository</title>

        <para>With a domain type in place you can now create a new repository
        for this type by using the <link
        linkend="command-index-repository-mongo"><link
        linkend="command-index-repository-jpa">repository</link> mongo</link>
        command (or by applying the @RooMongoRepository annotation to an
        arbitrary interface:</para>

        <para><programlisting>roo&gt; <emphasis role="bold">repository mongo </emphasis>--interface ~.repository.PizzaRepository --entity ~.domain.Pizza</programlisting>This
        will create a simple interface definition which leverages <link
        xlink:href="http://projects.spring.io/spring-data-mongodb/">Spring
        Data MongoDB</link>:</para>

        <para><programlisting><emphasis role="bold">@RooMongoRepository</emphasis>(domainType = Pizza.class)
public interface PizzaRepository {

    List&lt;Pizza&gt; findAll();
}</programlisting>Similar the Spring Data JPA driven repository seen above,
        this interface is augmented through an ITD which introduces the <link
        xlink:href="http://docs.spring.io/spring-data/data-commons/docs/1.1.0.RELEASE/api/org/springframework/data/repository/PagingAndSortingRepository.html">PagingAndSortingRepository</link>
        provided by the Spring Data API and is responsible for providing all
        necessary CRUD functionality. In addition this interface defines a
        'custom' finder which is not offered by the <link
        xlink:href="http://docs.spring.io/spring-data/data-commons/docs/1.1.0.RELEASE/api/org/springframework/data/repository/PagingAndSortingRepository.html">PagingAndSortingRepository</link>
        implementation: <emphasis>List&lt;Pizza&gt; findAll();</emphasis>.
        This method iis required by Spring Roo's UI scaffolding and is
        automatically implemented by the <link
        xlink:href="http://docs.spring.io/spring-data/data-document/docs/1.0.0.M4/reference/html/#repositories.definition-tuning">query
        builder mechanism</link> offered by Spring Data MongoDB.</para>
      </section>

      <section>
        <title>Example &amp; Cloud Foundry Deployment</title>

        <para>Similar to applications which use JPA persistence (see <link
        xlink:href="http://blog.springsource.com/2011/08/30/using-postgres-on-cloud-foundry/">this
        blog</link> for details on using JPA with Postgres) MongoDB
        applications can be easily deployed to <link
        xlink:href="http://cloudfoundry.com/">VMware CloudFoundry</link>. The
        following script provides an example of the P<link
        linkend="beginning">izza Shop sample application</link> which has been
        adjusted for use with a MongoDB-backed repository
        layer:<programlisting>// Create a new project.
project com.springsource.pizzashop

// Create configuration for MongoDB peristence 
mongo setup <emphasis role="bold">--cloudFoundry true</emphasis>

// Define domain model.
entity mongo --class ~.domain.Base --testAutomatically
field string --fieldName name --sizeMin 2 --notNull --class ~.domain.Base
entity mongo --class ~.domain.Topping --testAutomatically
field string --fieldName name --sizeMin 2 --notNull --class ~.domain.Topping
entity mongo --class ~.domain.Pizza --testAutomatically
field string --fieldName name --notNull --sizeMin 2 --class ~.domain.Pizza
field number --fieldName price --type java.lang.Float
field set --fieldName toppings --type ~.domain.Topping
field reference --fieldName base --type ~.domain.Base
entity mongo --class ~.domain.PizzaOrder --testAutomatically
field string --fieldName name --notNull --sizeMin 2 --class ~.domain.PizzaOrder
field string --fieldName address --sizeMax 30
field number --fieldName total --type java.lang.Float
field date --fieldName deliveryDate --type java.util.Date
field set --fieldName pizzas --type ~.domain.Pizza

// Add layer support.
repository mongo --interface ~.repository.ToppingRepository --entity ~.domain.Topping
repository mongo --interface ~.repository.BaseRepository --entity ~.domain.Base
repository mongo --interface ~.repository.PizzaRepository --entity ~.domain.Pizza
repository mongo --interface ~.repository.PizzaOrderRepository --entity ~.domain.PizzaOrder
service type --interface ~.service.ToppingService --entity ~.domain.Topping
service type --interface ~.service.BaseService --entity ~.domain.Base
service type --interface ~.service.PizzaService --entity ~.domain.Pizza
service type --interface ~.service.PizzaOrderService --entity ~.domain.PizzaOrder

// Create a Web UI.
web mvc setup
web mvc all --package ~.web

// Package the application into a war file.
perform package

// Deploy and start the application in CloudFoundry
cloud foundry login 
cloud foundry deploy --appName roo-pizzashop --path /target/pizzashop-0.1.0.BUILD-SNAPSHOT.war --memory 512
<emphasis role="bold">cloud foundry create service --serviceName pizzashop-mongo --serviceType mongodb</emphasis>
<emphasis role="bold">cloud foundry bind service --serviceName pizzashop-mongo --appName roo-pizzashop</emphasis>
cloud foundry start app --appName roo-pizzashop
</programlisting></para>
      </section>
    </section>
  </section>

  <section xml:id="service-layer">
    <title xml:id="service-layer">Service Layer</title>

    <para>Developers can also choose to create a service layer in their
    application. By default, Roo will create a service interface (and
    implementation) for one or more domain entities. If a
    persistence-providing layer such as Roo's <link
    linkend="architecture-entities">default entity layer</link> or a <link
    linkend="repository-layer">repository layer</link> is present for a given
    domain entity, the service layer will expose the CRUD functionality
    provided by this persistence layer through its interface and
    implementation.</para>

    <para>As per Roo's conventions all functionality will be introduced via
    AspectJ ITDs therefore providing the developer a clean canvas for
    implementing custom business logic which does not naturally fit into
    domain entities. Other common use cases for service layers are security or
    integration of remoting such as Web Services. For a more detailed
    discussion please refer to the <link
    linkend="architecture-services">architecture chapter</link>.</para>

    <para>The integration of a services layer into a Roo project is similar to
    the repository layer by using the @RooService annotation directly or the
    <link linkend="command-index-service">service</link> command in the Roo
    shell:</para>

    <para><programlisting>roo&gt; <emphasis role="bold">service</emphasis> --interface ~.service.PizzaService --entity ~.domain.Pizza</programlisting>This
    command will create the PizzaService interface in the defined package and
    additionally a PizzaServiceImpl in the same package (the name and package
    of the PizzaServiceImpl can be customized via the optional --class
    attribute).</para>

    <para><programlisting>@<emphasis role="bold">RooService</emphasis>(domainTypes = { Pizza.class })
public interface <emphasis role="bold">PizzaService</emphasis> {
}</programlisting>Following Roo conventions the default CRUD method
    definitions can be found in the ITD:</para>

    <para><programlisting>void savePizza(Pizza pizza);
Pizza findPizza(Long id);    
List&lt;Pizza&gt; findAllPizzas();    
List&lt;Pizza&gt; findPizzaEntries(int firstResult, int maxResults);   
long countAllPizzas();    
Pizza updatePizza(pizza pizza);
void deletePizza(Pizza pizza);    </programlisting></para>

    <para>Similarly, the PizzaServiceImpl is rather empty:</para>

    <para><programlisting>public class <emphasis role="bold">PizzaServiceImpl</emphasis> implements <emphasis
          role="bold">PizzaService</emphasis> {
}</programlisting></para>

    <para>Through the AspectJ ITD the PizzaServiceImpl type is annotated with
    the <emphasis role="bold">@Service</emphasis> and <emphasis
    role="bold">@Transactional</emphasis> annotations by default. Furthermore
    the ITD will introduce the following methods and fields into the target
    type:</para>

    <para><programlisting>@Autowired PizzaRepository pizzaRepository;
    
public void savePizza(Pizza pizza) {
    pizzaRepository.save(pizza);
}

public Pizza findPizza(Long id) {
    return pizzaRepository.findOne(id);
}

public List&lt;Pizza&gt; findAllPizzas() {
    return pizzaRepository.findAll();
}

public List&lt;Pizza&gt; findPizzaEntries(int firstResult, int maxResults) {
    return pizzaRepository.findAll(new PageRequest(firstResult / maxResults, maxResults)).getContent();
}

public long countAllPizzas() {
    return pizzaRepository.count();
}

public Pizza updatePizza(Pizza pizza) {
    return pizzaRepository.save(pizza);
}
    
public void deletePizza(Pizza pizza) {
    pizzaRepository.delete(pizza);
}
</programlisting>As you can see, Roo will detect if a persistence provider
    layer exists for a given domain type and automatically inject this
    component in order to delegate all service layer calls to this layer. In
    case no persistence (or other 'lower level' layer exists, the service
    layer ITD will simply provide method stubs.</para>
  </section>
</chapter>
