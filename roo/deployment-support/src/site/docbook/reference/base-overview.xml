<?xml version="1.0" encoding="UTF-8"?>
<chapter version="5.0" xml:id="base-overview"
         xmlns="http://docbook.org/ns/docbook"
         xmlns:xlink="http://www.w3.org/1999/xlink"
         xmlns:xi="http://www.w3.org/2001/XInclude"
         xmlns:ns5="http://www.w3.org/1998/Math/MathML"
         xmlns:ns4="http://www.w3.org/1999/xhtml"
         xmlns:ns3="http://www.w3.org/2000/svg"
         xmlns:ns="http://docbook.org/ns/docbook">
  <title>Base Add-On Overview</title>

  <para>When you download the Spring Roo distribution ZIP, there are actually
  two major logical components in use. The first of these is the
  "<emphasis>Roo core</emphasis>", which provides an environment in which to
  host add-ons and provide services to them. The other component is what we
  call "<emphasis>base add-ons</emphasis>". A base add-on is different from a
  third party add-on only in that it is included in the Roo distribution by
  default and does not require you to separately install it. In addition, you
  cannot remove a base add-on using normal Roo commands.</para>

  <para>Base add-ons always adopt the package name prefix
  <code>org.springframework.roo.addon</code>. We also have a part of Roo known
  as "Roo core". This relates to the core modules, and these always have
  package names that start with <code>org.springframework.roo</code> (but
  excluding those with "<code>addon</code>" as the next package name segment,
  as in that case they'd be a "base add-on"). Roo core provides very few
  commands, and whatever commands it provides are generally internal
  infrastructure-related features (like "<link
  linkend="command-index-poll-status">poll status</link>" or "<link
  linkend="command-index-metadata-for-id">metadata for id</link>") or
  sometimes aggregate the features provided by several individual base add-ons
  (e.g. "<link linkend="command-index-entity-jpa"><link
  linkend="command-index-entity">entity</link> jpa</link>
  --testAutomatically").</para>

  <para>Add-ons that do not ship with Spring Roo but are nevertheless about to
  be used with it are known as "installable add-ons" (these were previously
  called "third-party add-ons", but we decided to change the name in Roo 1.1
  in view that SpringSource itself was publishing add-ons that were not
  shipping as part of Roo and the use of the term "third-party" was
  confusing). Such add-ons do not appear under the
  <code>org.springframework.roo</code> package name space. A large number of
  individuals and organizations publish installable add-ons, and indeed even
  within the SpringSource division of VMware we have teams publishing
  installable add-ons. The decision as to whether an add-on becomes a base
  add-on or an installable add-on depends on a large number of factors, but in
  general we prefer installable add-ons over base add-ons. This offers
  flexibility around release cycles, licenses, deployment footprint, code
  maintenance and so on.</para>

  <para>Of course as a user of Roo you do not need to be aware of whether a
  particular component is part of Roo core, a base add-on or an installable
  add-on. It's just useful for us to formally define these commonly-used terms
  and explain the impact on whether you need to install or uninstall a
  component or not.</para>

  <para>The individual base add-ons provided by Roo provide capabilities in
  the following key functional areas:</para>

  <itemizedlist>
    <listitem>
      <para>Project management (like project creation, dependency management,
      "perform" commands)</para>
    </listitem>

    <listitem>
      <para>General type management (like creation of types, toString method,
      JavaBean methods)</para>
    </listitem>

    <listitem>
      <para>Persistence (like JPA setup, entities)</para>
    </listitem>

    <listitem>
      <para>Field management (like JSR 303 and field creation with JPA
      compliance)</para>
    </listitem>

    <listitem>
      <para>Database introspection and reverse engineering</para>
    </listitem>

    <listitem>
      <para>Dynamic finders (creation of finders without needing to write the
      JPA-QL for them)</para>
    </listitem>

    <listitem>
      <para>JUnit testing (with integration and mock testing)</para>
    </listitem>

    <listitem>
      <para>Spring MVC (including URL rewriting, JSP services, controller
      management)</para>
    </listitem>

    <listitem>
      <para>Spring Web Flow</para>
    </listitem>

    <listitem>
      <para>Spring Security</para>
    </listitem>

    <listitem>
      <para>Selenium testing</para>
    </listitem>

    <listitem>
      <para>Java Message Service (JMS)</para>
    </listitem>

    <listitem>
      <para>Simple Mail Transfer Service (SMTP)</para>
    </listitem>

    <listitem>
      <para>Log4J configuration</para>
    </listitem>
  </itemizedlist>

  <para>We have added dedicated chapters for many of these functional areas in
  this, <link linkend="base">Part II</link> of our documentation. You can also
  find more introductory material concerning these areas in <link
  linkend="welcome">Part I</link>, along with our <link
  linkend="intro-exploring-sample">samples</link>, the <link
  linkend="command-index">command reference</link> and <link
  linkend="resources">project resources</link>.</para>
</chapter>
