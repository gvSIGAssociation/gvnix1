<?xml version="1.0" encoding="UTF-8"?>
<chapter version="5.0" xml:id="base-persistence"
         xmlns="http://docbook.org/ns/docbook"
         xmlns:xlink="http://www.w3.org/1999/xlink"
         xmlns:xi="http://www.w3.org/2001/XInclude"
         xmlns:ns5="http://www.w3.org/1998/Math/MathML"
         xmlns:ns4="http://www.w3.org/1999/xhtml"
         xmlns:ns3="http://www.w3.org/2000/svg"
         xmlns:ns="http://docbook.org/ns/docbook">
  <title>Persistence Add-On</title>

  <para>The persistence add-on provides a convenient way to create <link
  xlink:href="http://java.sun.com/javaee/6/docs/tutorial/doc/bnbpz.html">Java
  Persistence API</link> (JPA v2) compliant entities. There are different
  commands available to configure JPA, create new JPA-compliant entities, and
  add fields to these entities. In the following a summary of the features
  offered by the Spring Roo persistence add-on:</para>

  <section>
    <title>JPA setup command</title>

    <para>The <link linkend="command-index-jpa-setup">jpa setup</link> command
    provides the following options and attributes:</para>

    <para>Database Options:</para>

    <itemizedlist>
      <listitem>
        <para><link xlink:href="http://hsqldb.org/">HSQL</link> (in
        memory)</para>
      </listitem>

      <listitem>
        <para><link xlink:href="http://hsqldb.org/">HSQL</link>
        (persistent)</para>
      </listitem>

      <listitem>
        <para><link
        xlink:href="http://www.h2database.com/html/main.html">H2</link> (in
        memory)</para>
      </listitem>

      <listitem>
        <para><link xlink:href="http://www.mysql.com/">MySQL</link></para>
      </listitem>

      <listitem>
        <para><link
        xlink:href="http://www.postgresql.org/">Postgres</link></para>
      </listitem>

      <listitem>
        <para><link xlink:href="http://www.microsoft.com/sqlserver">MS SQL
        Server</link></para>
      </listitem>

      <listitem>
        <para><link xlink:href="http://www.sybase.com/">Sybase</link></para>
      </listitem>

      <listitem>
        <para><link
        xlink:href="http://www.oracle.com/index.html">Oracle</link> *</para>
      </listitem>

      <listitem>
        <para><link xlink:href="http://www.ibm.com/db2">DB2</link> *</para>
      </listitem>

      <listitem>
        <para><link xlink:href="http://www.ibm.com/db2">DB2/400</link></para>
      </listitem>

      <listitem>
        <para><link xlink:href="http://code.google.com/appengine/">Google App
        Engine</link> (GAE)</para>
      </listitem>

      <listitem>
        <para><link xlink:href="http://db.apache.org/derby/">Apache
        Derby</link> (Java DB)</para>
      </listitem>

      <listitem>
        <para><link
        xlink:href="http://www.firebirdsql.org/">Firebird</link></para>
      </listitem>
    </itemizedlist>

    <para>* The JDBC driver dependencies for these databases are not available
    in public Maven repositories. As such, Roo configures a default dependency
    in your project <code>pom.xml</code>. You need to adjust it according to
    your specific version of your database driver available in your private
    Maven repository.</para>

    <para>Some useful hints to get started with Oracle Express (Oracle XE):
    After installing Oracle XE you need to find the JDBC driver under
    <code>${oracle-xe}/app/oracle/product/10.2.0/server/jdbc/lib</code> and
    run the command:</para>

    <programlisting>mvn install:install-file -Dfile=ojdbc14_g.jar -DgroupId=com.oracle -DartifactId=ojdbc14 -Dversion=10.2.0.2 -Dpackaging=jar -DgeneratePom=true </programlisting>

    <para>Also, if you dont want Jetty (or Tomcat) to be conflicting with
    oracle-xe web-server, you should use the following command: <code>mvn
    jetty:run -Djetty.port=8090</code>.</para>

    <para>ORM Provider Options:</para>

    <itemizedlist>
      <listitem>
        <para><link
        xlink:href="http://www.eclipse.org/eclipselink/">EclipseLink</link></para>
      </listitem>

      <listitem>
        <para><link
        xlink:href="http://www.hibernate.org/">Hibernate</link></para>
      </listitem>

      <listitem>
        <para><link
        xlink:href="http://openjpa.apache.org/">OpenJPA</link></para>
      </listitem>

      <listitem>
        <para><link xlink:href="http://www.datanucleus.org/">DataNucleus
        3.0</link></para>
      </listitem>
    </itemizedlist>

    <para>In addition, the <link linkend="command-index-jpa-setup">jpa
    setup</link> command accepts optional <emphasis>databaseName</emphasis>,
    <emphasis>userName</emphasis> and <emphasis>password</emphasis> attributes
    for your convenience. However, it's not necessary to use this command. You
    can easily edit these details in the <code>database.properties</code> file
    at any time. Finally, you can also specify a pre-configured JNDI
    datasource via the <emphasis>jndiDataSource</emphasis> attribute.</para>

    <para>The jpa setup command can be re-run at any time. This means you can
    change your ORM provider or database when you plan to move your
    application between your development setup (e.g. Hibernate with HSQLDB) to
    your production setup (e.g. EclipseLink with DB2). Of course this is a
    convenience only. You'll naturally experience fewer deployment issues if
    you use the same platform for both development and production.</para>

    <para>Running the jpa setup command in the Roo shell takes care of
    configuring several aspects in your project:</para>

    <orderedlist>
      <listitem>
        <para>JPA dependencies are registered in the project
        <code>pom.xml</code> Maven configuration. It includes the JPA API, ORM
        provider (and its dependencies), DB driver, Spring ORM, Spring JDBC,
        Commons DBCP, and Commons Pool</para>
      </listitem>

      <listitem>
        <para>Persistence XML configuration with a persistence-unit
        preconfigured based on your choice of ORM provider and Database. Here
        is an example for the EclipseLink ORM provider and HSQL
        database:</para>

        <para><programlisting>&lt;persistence xmlns="http://java.sun.com/xml/ns/persistence" 
             xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="2.0" 
             xsi:schemaLocation="http://java.sun.com/xml/ns/persistence 
                                 http://java.sun.com/xml/ns/persistence/persistence_2_0.xsd"&gt;    

    &lt;persistence-unit name="persistenceUnit" transaction-type="RESOURCE_LOCAL"&gt;
        &lt;provider&gt;org.eclipse.persistence.jpa.PersistenceProvider&lt;/provider&gt;
        &lt;properties&gt;
            &lt;property name="eclipselink.target-database" 
                      value="org.eclipse.persistence.platform.database.HSQLPlatform"/&gt;

            &lt;!--value='drop-and-create-tables' to build a new database on each run; 
                value='create-tables' creates new tables if needed; 
                value='none' makes no changes to the database--&gt;
            &lt;property name="eclipselink.ddl-generation" value="drop-and-create-tables"/&gt;

            &lt;property name="eclipselink.ddl-generation.output-mode" value="database"/&gt;

            &lt;property name="eclipselink.weaving" value="static"/&gt;
        &lt;/properties&gt;
    &lt;/persistence-unit&gt;
&lt;/persistence&gt;
</programlisting>By default the persistence unit is configured to build a new
        database on each application restart. This helps to avoid data
        inconsistencies during application development when the domain model
        is not yet finalized (new fields added to an entity will yield new
        table columns). If you feel that your domain model is stable you can
        manually switch to a mode which allows data persistence across
        application restarts in the persistence.xml file. This is documented
        in the comment above the relevant property. Each ORM provider uses
        different property names and values to achieve this.</para>
      </listitem>

      <listitem>
        <para>A database properties file
        (<code>src/main/resources/META-INF/spring/database.properties</code>)
        which contains user name, password, JDBC driver name and connection
        URL details:<programlisting>database.url=jdbc\:hsqldb\:mem\:foo
database.username=sa
database.password=
database.driverClassName=org.hsqldb.jdbcDriver
</programlisting>This file can be edited manually, or you can use the <link
        linkend="command-index-properties-set">properties set</link> command,
        or by using the <emphasis>databaseName</emphasis>,
        <emphasis>userName</emphasis> and <emphasis>password</emphasis>
        attributes of the <link linkend="command-index-jpa-setup">jpa
        setup</link> command. You can edit the properties file or use any of
        these commands at any time.</para>
      </listitem>

      <listitem>
        <para>A DataSource definition and a transaction manager are added to
        the Spring application context:</para>

        <para><programlisting>[...]
&lt;bean class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close" id="dataSource"&gt;
    &lt;property name="driverClassName" value="${database.driverClassName}"/&gt;
    &lt;property name="url" value="${database.url}"/&gt;
    &lt;property name="username" value="${database.username}"/&gt;
    &lt;property name="password" value="${database.password}"/&gt;
&lt;/bean&gt;

&lt;bean class="org.springframework.orm.jpa.JpaTransactionManager" id="transactionManager"&gt;
    &lt;property name="entityManagerFactory" ref="entityManagerFactory"/&gt;
&lt;/bean&gt;

&lt;tx:annotation-driven mode="aspectj" transaction-manager="transactionManager"/&gt;
    
&lt;bean class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean" 
      id="entityManagerFactory"&gt;
    &lt;property name="dataSource" ref="dataSource"/&gt;
&lt;/bean&gt;
</programlisting></para>
      </listitem>
    </orderedlist>
  </section>

  <section>
    <title>Entity JPA command</title>

    <para>Using the <link linkend="command-index-entity-jpa"><link
    linkend="command-index-entity">entity</link> jpa</link> command you can
    create simple Java beans which are annotated with JPA annotations. There
    are several optional attributes which can be used as part of this command
    but in its simplest form it will generate the following artifacts:</para>

    <para><programlisting>roo&gt; entity jpa --class ~.Person   
Created SRC_MAIN_JAVA/com/foo
Created SRC_MAIN_JAVA/com/foo/Person.java
Created SRC_MAIN_JAVA/com/foo/Person_Roo_JavaBean.aj
Created SRC_MAIN_JAVA/com/foo/Person_Roo_Jpa_Entity.aj
Created SRC_MAIN_JAVA/com/foo/Person_Roo_Jpa_ActiveRecord.aj
Created SRC_MAIN_JAVA/com/foo/Person_Roo_ToString.aj
Created SRC_MAIN_JAVA/com/foo/Person_Roo_Configurable.aj
~.Person roo&gt;
</programlisting>As you can see from the Roo shell messages there are 6 files
    generated (also, note that the context has changed to the Person type in
    the Roo shell):</para>

    <orderedlist>
      <listitem>
        <para>Person.java:</para>

        <para><programlisting>@RooJavaBean
@RooToString
@RooJpaActiveRecord
public class Person {
}
</programlisting>You will notice that by default, the Person type does not
        contain any fields (these will be added with the field commands or
        manually in the type) or methods.</para>
      </listitem>

      <listitem>
        <para>Person_Roo_JavaBean.aj (this will only be generated when fields
        are added to the Person type)</para>

        <para>The first annotation added by the entity jpa command is the
        @RooJavaBean annotation. This annotation will automatically add public
        accessors and mutators via an ITD for each field added to the Person
        type. This annotation (like all Roo annotations) has source retention
        (so it will not be present in the generated byte code).</para>
      </listitem>

      <listitem>
        <para>Person_Roo_ToString.aj</para>

        <para>The second annotation added to the Person type is the
        @RooToString annotation. This annotation will generate a toString
        method for the Person type via an ITD. The
        <emphasis>toString</emphasis>() method will contain a concatenated
        representation of all field names and their values using the
        commons-lang RefectionToStringBuilder by default. If you want to
        provide your own toString() method alongside the Roo generated
        <emphasis>toString</emphasis>() method you can declare the
        <emphasis>toStringMethod</emphasis> attribute in the @RooToString
        annotation. This attribute allows you to change the default method
        name of the Roo-managed <emphasis>toString</emphasis>() (default name)
        method, thereby allowing your custom toString() method alongside the
        Roo-managed method.</para>
      </listitem>

      <listitem>
        <para>Person_Roo_Configurable.aj</para>

        <para>This ITD is automatically created and does not require the
        @RooConfigurable annotation to be introduced into the Person.java
        type. It takes care of marking the Person type with Spring's
        @Configurable annotation. This annotation allows you to inject any
        types from the Spring bean factory into the Person type. The injection
        of the JPA entity manager (which is defined as a bean in the
        application context) is possible due to the presence of the
        @Configurable annotation.</para>
      </listitem>

      <listitem>
        <para>Person_Roo_Jpa_Entity.aj</para>

        <para>The forth annotation is the @RooJpaActiveRecord annotation. This
        annotation triggers the creation of two ITDs: the
        Person_Roo_Jpa_Entity.aj ITD and the Person_Roo_Jpa_ActiveRecord.aj
        ITD. Note that If you do not want ActiveRecord-style methods in your
        domain object you can just use the @RooJpaEntity annotation.</para>

        <para>The JPA @Entity annotation is added to the
        Person_Roo_Jpa_Entity.aj ITD. This annotation marks the Person as
        persistable. By default, the JPA implementation of your choice will
        create a table definition in your database for this type. Once fields
        are added to the Person type, they will be added as columns to the
        Person table.</para>

        <programlisting>privileged aspect Person_Roo_Jpa_Entity {
    
    declare @type: Person: @Entity;   

    @Id
    @GeneratedValue(strategy = GenerationType.AUTO)
    @Column(name = "id")
    private Long Person.id;
    
    @Version
    @Column(name = "version")
    private Integer Person.version;
    
    public Long Person.getId() {
        return this.id;
    }
    
    public void Person.setId(Long id) {
        this.id = id;
    }
    
    public Integer Person.getVersion() {
        return this.version;
    }
    
    public void Person.setVersion(Integer version) {
        this.version = version;
    }
}
</programlisting>

        <para>As can be seen, the Person_Roo_Jpa_Entity.aj ITD introduces two
        fields by default. An <emphasis>id</emphasis> field (which is
        auto-incremented) and a <emphasis>version</emphasis> field (used for
        JPA-managed optimistic locking).</para>
      </listitem>

      <listitem>
        <para>Person_Roo_Jpa_ActiveRecord.aj</para>

        <para>As mentioned previously, the @RooJpaActiveRecord annotation also
        triggers the creation of the Person_Roo_Jpa_ActiveRecord.aj ITD. This
        contains a number of persistence related CRUD methods into your Person
        type via the ITD:</para>

        <programlisting>privileged aspect Person_Roo_Jpa_ActiveRecord {
    
    @PersistenceContext
    transient EntityManager Person.entityManager;
    
    @Transactional
    public void Person.persist() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.persist(this);
    }
    
    @Transactional
    public void Person.remove() {
        if (this.entityManager == null) this.entityManager = entityManager();
        if (this.entityManager.contains(this)) {
            this.entityManager.remove(this);
        } else {
            Person attached = this.entityManager.find(this.getClass(), this.id);
            this.entityManager.remove(attached);
        }
    }
    
    @Transactional
    public void Person.flush() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.flush();
    }
    
    @Transactional
    public Person Person.merge() {
        if (this.entityManager == null) this.entityManager = entityManager();
        Person merged = this.entityManager.merge(this);
        this.entityManager.flush();
        return merged;
    }

    
    public static final EntityManager Person.entityManager() {
        EntityManager em = new Person().entityManager;
        if (em == null) throw new IllegalStateException("Entity manager has not been \
                        injected (is the Spring Aspects JAR configured as an AJC/AJDT \
                        aspects library?)");
        return em;
    }
    
    public static long Person.countPeople() {
        return entityManager().createQuery("select count(o) from Person o", Long.class)
                                        .getSingleResult();
    }
    
    @SuppressWarnings("unchecked")
    public static List&lt;Person&gt; Person.findAllPeople() {
        return entityManager().createQuery("select o from Person o", Person.class).getResultList();
    }
    
    public static Person Person.findPerson(Long id) {
        if (id == null) return null;
        return entityManager().find(Person.class, id);
    }
    
    @SuppressWarnings("unchecked")
    public static List&lt;Person&gt; Person.findPersonEntries(int firstResult, int maxResults) {
        return entityManager().createQuery("select o from Person o", Person.class)
                   .setFirstResult(firstResult).setMaxResults(maxResults).getResultList();
    }
}
</programlisting>

        <para>The Person_Roo_Jpa_ActiveRecord.aj ITD introduces a number of
        methods such as <emphasis>persist<emphasis>()</emphasis></emphasis>,
        <emphasis>remove</emphasis>(), <emphasis>merge</emphasis>(),
        <emphasis>flush</emphasis>() which allow the execution of <link
        xlink:href="http://en.wikipedia.org/wiki/Active_record_pattern">ActiveRecord</link>-style
        persistence operations on each Roo-managed JPA entity. Furthermore, a
        number of persistence-related convenience methods are provided. These
        methods are <emphasis>countPeople</emphasis>(),
        <emphasis>findAllPeople</emphasis>(),
        <emphasis>findPerson</emphasis>(..), and
        <emphasis>findPersonEntries</emphasis>(..).</para>

        <para>All persistence methods are configured with <link
        xlink:href="http://docs.spring.io/spring/docs/3.0.x/spring-framework-reference/html/transaction.html">Spring's
        Transaction</link> support (Propagation.REQUIRED,
        Isolation.DEFAULT).</para>

        <para>Similar to the @RooToString annotation you can change the
        default method name for all persistence-related methods generated
        through the @RooJpaActiveRecord annotation. For example:</para>

        <para><programlisting>@RooJpaActiveRecord(persistMethod = "save")</programlisting></para>
      </listitem>
    </orderedlist>

    <para>The <link linkend="command-index-entity-jpa"><link
    linkend="command-index-entity">entity</link> jpa</link> command offers a
    number of optional (but very useful) attributes worth mentioning. For
    example the <emphasis role="bold">--testAutomatically</emphasis> attribute
    can be used to have Roo to generate and maintain integration tests for the
    Person type (and the persistence methods generated as part of it).
    Furthermore, the <emphasis role="bold">--abstract</emphasis> and <emphasis
    role="bold">--extends</emphasis> attributes allow you to mark classes as
    abstract or inheritance patterns. Of course this can also be done directly
    in the Java sources of the Person type but sometimes it is useful to do
    this through a Roo command which can be scripted and replayed if desired.
    Other attributes allow you to define the identifier field name as well as
    the identifier field type which, in turn, allows the use of complex
    identifier types.</para>
  </section>

  <section>
    <title>Field commands</title>

    <para>As mentioned earlier in this chapter the <link
    linkend="command-index-field-commands">field</link> commands allow you to
    add pre-configured field definitions to your target entity type
    (Person.java in our example). In addition to simply adding the field names
    and types as defined via the command the appropriate JPA annotations are
    added to the field definitions. For example adding a birth day field to
    the Person.java type with the following command ...<programlisting>~.Person roo&gt; field date --fieldName birthDay --type java.util.Date
Managed SRC_MAIN_JAVA/com/foo/Person.java
Created SRC_MAIN_JAVA/com/foo/Person_Roo_JavaBean.aj
Managed SRC_MAIN_JAVA/com/foo/Person_Roo_ToString.aj
~.Person roo&gt;</programlisting>... yields the following field definition in
    Person.java:</para>

    <para><programlisting>@Temporal(TemporalType.TIMESTAMP)
@DateTimeFormat(style = "M-")
private Date birthDay;
</programlisting>You'll notice that the @Temporal annotation is part of the
    JPA specification and defines how date values are persisted to and
    retrieved from the database in a transparent fashion. The @DateTimeFormat
    annotation is part of the Spring framework and takes care of printing and
    parsing Dates to and from String values when necessary (especially Web
    frontends frequently take advantage of this formatting capability).</para>

    <para>Also note that Roo created a Person_Roo_JavaBean.aj ITD to generate
    accessors and mutators for the birthDay field and it also updated the
    toString() method to take the birthDay field into account.</para>

    <para>Aside from the <link linkend="command-index-field-date">Date</link>
    (and Calendar) type, the <link
    linkend="command-index-field-commands">field</link> command offers <link
    linkend="command-index-field-string">String</link>, <link
    linkend="command-index-field-boolean">Boolean</link>, <link
    linkend="command-index-field-enum">Enum</link>, <link
    linkend="command-index-field-number">Number</link>, <link
    linkend="command-index-field-reference">Reference</link> and <link
    linkend="command-index-field-set">Set</link> types. The <link
    linkend="command-index-field-reference">Reference</link> and <link
    linkend="command-index-field-set">Set</link> types are of special interest
    here since they allow you to define relationships between your
    entities:</para>

    <orderedlist>
      <listitem>
        <para>The <link linkend="command-index-field-reference">field
        reference</link> command will create a JPA many-to-one (default) or
        one-to-one relationship:</para>

        <para><programlisting>~.Person roo&gt; field reference --fieldName car --type com.foo.Car
</programlisting>The field definition added to the Person type contains the
        appropriate JPA annotations:</para>

        <para><programlisting>@ManyToOne
@JoinColumn
private Car car;
</programlisting>The optional --cardinality command attribute allows you to
        define a one-to-one relationship (via JPAs @OneToOne annotation)
        between Person and Car if you wish:</para>

        <para><programlisting>@OneToOne
@JoinColumn
private Car car;</programlisting>You can add the mappedBy attribute to the
        @OneToOne annotation to define the FK name handled by the inverse side
        (Car) of this relationship.</para>

        <para>Consider the following constraint: when you delete a Person, any
        Car they have should also be deleted, but not vice versa (i.e. you
        should be able to delete a Car without deleting its owner). In the
        database, the foreign key should be in the "car" table.</para>

        <para><programlisting>@Entity
@RooJavaBean
@RooJpaActiveRecord
public class Person {

    // Inverse side ("car" table has the FK column)
    @OneToOne(cascade = CascadeType.ALL, mappedBy = "owner")
    private Car car;

}</programlisting></para>

        <para><programlisting>@Entity
@RooJavaBean
@RooJpaActiveRecord
public class Car {

    // Owning side (this table has the FK column)
    @OneToOne
    @JoinColumn
    private Person owner;
}</programlisting></para>

        <para>If you delete a Person from the Person list, both the Person and
        the Car are deleted. So the cascading works. But if you delete a Car,
        the transaction will roll back and you will see an exception due it
        being referenced by a person. To overcome this situation you can add
        the following method to your Car.java:</para>

        <para><programlisting>@PreRemove
private void preRemove() {
    this.getOwner().setCar(null);
}</programlisting> This hooks into the JPA lifecycle callback function and
        will set the reference between Person and Car to null before
        attempting to remove the record.</para>
      </listitem>

      <listitem>
        <para>The <link linkend="command-index-field-set">field set</link>
        command will allow you to create a many-to-many (default) or a
        one-to-many relationship:<programlisting>field set --fieldName cars --type com.foo.Car</programlisting></para>

        <para>The field definition added to the Person type contains the
        appropriate JPA annotation:</para>

        <para><programlisting>@ManyToMany(cascade = CascadeType.ALL)
private Set&lt;Car&gt; cars = new HashSet&lt;Car&gt;();</programlisting>To
        change the mapping type to one-to-many simply use the <emphasis
        role="bold">--cardinality</emphasis> attribute. To achieve a true m:n
        relationship you will need to issue the <link
        linkend="command-index-field-set">field set</link> commands for both
        sides of the relationship.</para>
      </listitem>
    </orderedlist>

    <para>Like the <link linkend="command-index-entity-jpa"><link
    linkend="command-index-entity">entity</link> jpa</link> command, the <link
    linkend="command-index-field-commands">field</link> command offeres a
    number of optional (but very useful) attributes worth mentioning. For
    example, you can change the field / column name translations with the
    <emphasis role="bold">--column</emphasis> attribute. Furthermore there are
    a number of attributes which translate directly to their equivalents
    defined in <link xlink:href="http://jcp.org/en/jsr/detail?id=303">JSR 303
    (Bean Validation)</link>. These attributes include <emphasis
    role="bold">--notNull</emphasis>, <emphasis
    role="bold">--sizeMin</emphasis>, <emphasis
    role="bold">--sizeMax</emphasis> and other related attributes. Please
    refer to the <link linkend="command-index-field-commands">field</link>
    command in the appendix to review the different attributes offered.</para>

    <para></para>
  </section>
</chapter>
