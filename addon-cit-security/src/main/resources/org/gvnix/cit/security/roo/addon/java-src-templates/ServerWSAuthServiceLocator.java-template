package __TARGET_PACKAGE__;

/**
 *
 * @author rgarcia <a href="mailto:rgarcia@disid.com">Ricardo Garcia
 *         Fernandez</a>
 *
 */
public class ServerWSAuthServiceLocator extends org.apache.axis.client.Service
	implements ServerWSAuthService {

    private static final String DEFAULT_PORT_NAME = "ServerWSAuthPort";
	/**
	 * Serial version id
	 */
	private static final long serialVersionUID = 1L;

	/**
     * Default constructor
     */
    public ServerWSAuthServiceLocator() {
    	// Default constructor
    }


    /**
     * Constructor with config data
     * 
     * @param config
     */
    public ServerWSAuthServiceLocator(org.apache.axis.EngineConfiguration config) {
        super(config);
    }

    /**
     * Constructor with wsdl and name
     * 
     * @param wsdlLoc
     * @param sName
     * @throws javax.xml.rpc.ServiceException
     */
    public ServerWSAuthServiceLocator(java.lang.String wsdlLoc, javax.xml.namespace.QName sName) throws javax.xml.rpc.ServiceException {
        super(wsdlLoc, sName);
    }

    // Use to get a proxy class for ServerWSAuthPort
    private java.lang.String serverWSAuthPort_address = "";

    /* (non-Javadoc)
     * @see es.gva.cit.aplusu.security.authentication.wscit.ServerWSAuthService#getServerWSAuthPortAddress()
     */
    public java.lang.String getServerWSAuthPortAddress() {
        return serverWSAuthPort_address;
    }

    // The WSDD service name defaults to the port name.
    private java.lang.String serverWSAuthPortWSDDServiceName = DEFAULT_PORT_NAME;

    /**
     * Gets WSSD service Name
     *  
     * @return
     */
    public java.lang.String getServerWSAuthPortWSDDServiceName() {
        return serverWSAuthPortWSDDServiceName;
    }

    /**
     * Sets WSSD service name
     * @param name
     */
    public void setServerWSAuthPortWSDDServiceName(java.lang.String name) {
        serverWSAuthPortWSDDServiceName = name;
    }

    /* (non-Javadoc)
     * @see es.gva.cit.aplusu.security.authentication.wscit.ServerWSAuthService#getServerWSAuthPort()
     */
    public ServerWSAuthPort getServerWSAuthPort() throws javax.xml.rpc.ServiceException {
       java.net.URL endpoint;
        try {
            endpoint = new java.net.URL(serverWSAuthPort_address);
        }
        catch (java.net.MalformedURLException e) {
            throw new javax.xml.rpc.ServiceException(e);
        }
        return getServerWSAuthPort(endpoint);
    }

    /* (non-Javadoc)
     * @see es.gva.cit.aplusu.security.authentication.wscit.ServerWSAuthService#getServerWSAuthPort(java.net.URL)
     */
    public ServerWSAuthPort getServerWSAuthPort(java.net.URL portAddress) throws javax.xml.rpc.ServiceException {
        try {
            ServerWSAuthBindingStub stub = new ServerWSAuthBindingStub(portAddress, this);
            stub.setPortName(getServerWSAuthPortWSDDServiceName());
            return stub;
        }
        catch (org.apache.axis.AxisFault e) {
            return null;
        }
    }

    /**
     * Sets End-point address
     * 
     * @param address
     */
    public void setServerWSAuthPortEndpointAddress(java.lang.String address) {
        serverWSAuthPort_address = address;
    }

    /**
     * For the given interface, get the stub implementation.
     * If this service has no port for the given interface,
     * then ServiceException is thrown.
     */
    public java.rmi.Remote getPort(Class serviceEndpointInterface) throws javax.xml.rpc.ServiceException {
        try {
            if (ServerWSAuthPort.class.isAssignableFrom(serviceEndpointInterface)) {
        	ServerWSAuthBindingStub stub = new ServerWSAuthBindingStub(new java.net.URL(serverWSAuthPort_address), this);
                stub.setPortName(getServerWSAuthPortWSDDServiceName());
                return stub;
            }
        }
        catch (java.lang.Throwable t) {
            throw new javax.xml.rpc.ServiceException(t);
        }
        throw new javax.xml.rpc.ServiceException("There is no stub implementation for the interface:  " + (serviceEndpointInterface == null ? "null" : serviceEndpointInterface.getName()));
    }

    /**
     * For the given interface, get the stub implementation.
     * If this service has no port for the given interface,
     * then ServiceException is thrown.
     */
    public java.rmi.Remote getPort(javax.xml.namespace.QName portName, Class serviceEndpointInterface) throws javax.xml.rpc.ServiceException {
        if (portName == null) {
            return getPort(serviceEndpointInterface);
        }
        java.lang.String inputPortName = portName.getLocalPart();
        if (DEFAULT_PORT_NAME.equals(inputPortName)) {
            return getServerWSAuthPort();
        }
        else  {
            java.rmi.Remote _stub = getPort(serviceEndpointInterface);
            ((org.apache.axis.client.Stub) _stub).setPortName(portName);
            return _stub;
        }
    }

    /* (non-Javadoc)
     * @see org.apache.axis.client.Service#getServiceName()
     */
    public javax.xml.namespace.QName getServiceName() {
        return new javax.xml.namespace.QName("urn:ServerWSAuth", "ServerWSAuthService");
    }

    private java.util.Set ports = null;

    /* (non-Javadoc)
     * @see org.apache.axis.client.Service#getPorts()
     */
    public java.util.Iterator getPorts() {
        if (ports == null) {
            ports = new java.util.HashSet();
            ports.add(new javax.xml.namespace.QName("urn:ServerWSAuth", DEFAULT_PORT_NAME));
        }
        return ports.iterator();
    }

    /**
    * Set the endpoint address for the specified port name.
    */
    public void setEndpointAddress(java.lang.String portName, java.lang.String address) throws javax.xml.rpc.ServiceException {

        if (DEFAULT_PORT_NAME.equals(portName)) {
            setServerWSAuthPortEndpointAddress(address);
        }
        else
        { // Unknown Port Name
            throw new javax.xml.rpc.ServiceException(" Cannot set Endpoint Address for Unknown Port" + portName);
        }
    }

    /**
    * Set the endpoint address for the specified port name.
    */
    public void setEndpointAddress(javax.xml.namespace.QName portName, java.lang.String address) throws javax.xml.rpc.ServiceException {
        setEndpointAddress(portName.getLocalPart(), address);
    }

}
