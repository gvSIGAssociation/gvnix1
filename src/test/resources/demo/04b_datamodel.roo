
// SLIDE 4.B: Análisis y diseño del dominio - Ingeniería inversa
 
// ATENCIÓN: Asegurarse de crear otro proyecto en STS
// con Project name "tiendavirtual_datamodel" y Top level package name "org.gvnix.tiendavirtual"
// project --topLevelPackage org.gvnix.tiendavirtual --projectName tiendavirtual_datamodel --java 6 --packaging JAR

// Configura el proveedor de persistencia JPA y la base de datos con los datos de conexión de la base de datos existente
// (usuario, clave y nombre de la base de datos)
jpa setup --provider HIBERNATE --database POSTGRES --databaseName tiendavirtualDB --userName tiendavirtual --password tiendavirtual

// Instalar el driver jdbc para postgres
osgi start --url http://spring-roo-repository.springsource.org/release/org/springframework/roo/wrapping/org.springframework.roo.wrapping.postgresql-jdbc3/9.1-901.0001/org.springframework.roo.wrapping.postgresql-jdbc3-9.1-901.0001.jar

// Si no está accesible el jar en dicha URL, instalarlo a mano con:
// osgi start --url file:/ruta/al/fichero.jar

// Mostrar información de las tablas y sus columnas encontradas en la base de datos 
database introspect --schema public

// Realizar la ingeniería inversa: a partir de las tablas de base de datos
// crear en el proyecto el modelo de entidades que lo representa. 
// Se utiliza capa DAO en lugar de registro activo
database reverse engineer --schema public --package ~.domain --testAutomatically --activeRecord false

backup

// Hacer un Maven > Update Project Configuration

// ATENCION: Cerrar la consola y el proyecto en STS para que no hayan confusiones
// Continuaremos con el de proyecto de ingeniería directa
