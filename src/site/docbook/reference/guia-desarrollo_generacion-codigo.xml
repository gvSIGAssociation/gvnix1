<?xml version="1.0" encoding="UTF-8"?>
<chapter version="5.0" xml:id="guia-desarrollo_generacion-codigo" xml:lang="es"
         xmlns="http://docbook.org/ns/docbook"
         xmlns:xlink="http://www.w3.org/1999/xlink"
         xmlns:ns5="http://www.w3.org/1998/Math/MathML"
         xmlns:ns4="http://www.w3.org/2000/svg"
         xmlns:ns3="http://www.w3.org/1999/xhtml"
         xmlns:ns="http://docbook.org/ns/docbook">
         
  <title xml:lang="es">Código generado por gvNIX/Roo</title>

  <section>
    <title xml:lang="es">Clases Java y ficheros AJ</title>

    <section>
      <title xml:lang="es">Archivos Java</title>
      
      <para xml:lang="es">Por lo general, la norma que se sigue es mantener la clase
      Java, el archivo .java, lo más sencillo posible y por ello, muchas
      veces, se puede observar que el archivo .java está prácticamente vacio.
      Contiene poco más que la declaración de la clase y anotaciones asociadas
      a la misma. El resto del código, campos y métodos se declaran en sus
      aspectos java de los que se hablará a continuación.</para>
    </section>

    <section>
      <title xml:lang="es">Archivos AJ</title>
      
      <para xml:lang="es">Estos son los ficheros que genera automáticamente el framework y
      que contienen las operaciones básicas, los campos definidos
      con sus getter y setter, el identificador, etc. En general contine el código que
      un programador haria de manera rutinaria. Estos ficheros tienen nombres como 
      *_Roo_*.aj y *_gvNIX_*aj. Se trata de aspectos java que no son más que porciones de código
      que al compilar el proyecto, se asocian como código de la propia clase
      Java a la que están vinculadas. Si se desea personalizar alguna de las
      operaciones básicas, un getter determinado o añadir nuevas funcionalidades,
      estas deberán realizarse en los ficheros .java. En los ficheros aj no se
      debe de hacer ningún cambio. El motivo de esto es, que teniendo la consola
      funcionando, o al arrancarla, se volvería a generar el código automáticamente
      perdiendo las modificaciones que se hubiesen realizado. Y al contrario si en el
      fichero .java se ha creado el getter personalizandolo, automáticamente lo borrara
      del fichero .aj.</para>
    </section>
  </section>
</chapter>
