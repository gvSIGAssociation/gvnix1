<?xml version="1.0" encoding="UTF-8"?>
<chapter version="5.0" xml:id="guia-desarrollo_capa-web" xml:lang="es"
         xmlns="http://docbook.org/ns/docbook"
         xmlns:xlink="http://www.w3.org/1999/xlink"
         xmlns:xi="http://www.w3.org/2001/XInclude"
         xmlns:ns5="http://www.w3.org/1998/Math/MathML"
         xmlns:ns4="http://www.w3.org/2000/svg"
         xmlns:ns3="http://www.w3.org/1999/xhtml"
         xmlns:ns="http://docbook.org/ns/docbook">
  <title xml:lang="es">Gestión de la capa web</title>

  <para xml:lang="es">La capa web de la aplicación contiene la infraestructura
  necesaria para gestionar las peticiones HTTP y visualizar cierta información
  al usuario como respuesta. Actualmente esta capa puede
  desarrollarse con <link
  xlink:href="http://docs.spring.io/spring/docs/3.2.4.RELEASE/spring-framework-reference/html/mvc.html">Spring
  MVC</link>,
  <link xlink:href="http://code.google.com/webtoolkit/">GWT</link>,
  <link xlink:href="http://www.adobe.com/es/products/flex.html">Flex</link>,
  <link xlink:href="http://javaserverfaces.java.net/">JSF</link> y
  <link xlink:href="https://vaadin.com/">Vaadin</link>.
  Cada una de estas tecnologías está integrada a distinto nivel con la
  generación de código del framework por lo que cada una de ellas ofrecerá
  ciertas características. Este capítulo se centrará en la
  generación de la capa web con Spring MVC ya que se trata de la tecnología
  más evolucionada dentro de la generación de código del framework y para
  la que gvNIX ha añadido la mayoría de sus nuevas funcionalidades.</para>

  <para xml:lang="es">La gestión de peticiones en Spring MVC se basa en los
  controladores, clases en las que, mediante anotaciones, se definen los
  métodos que atienden peticiones HTTP.</para>

  <para xml:lang="es">Un controlador es una clase Java anotada con
  <classname>@Controller</classname> a la que le llegan las peticiones que
  realiza el usuario vía el navegador web. Identifica las URLs que atiende
  mediante la anotación <classname>@RequestMapping</classname>. Esta última
  anotación se puede usar tanto en la clase como en los métodos del
  controlador.</para>

  <para xml:lang="es">Actualmente se pueden generar automáticamente los
  controladores necesarios para gestionar los objetos de la aplicación: crear,
  leer, actualizar, borrar y buscar (CRUDS).</para>

  <section xml:id="guia-desarrollo_web_definir-controller">
    <title xml:lang="es">Crear la capa web con el intérprete de
    comandos</title>

    <para xml:lang="es">Desde el intérprete de comandos se puede crear la capa
    web en Spring MVC de forma sencilla, con los comandos siguientes:</para>

    <itemizedlist>
      <listitem>
        <para><command>web mvc setup</command></para>
      </listitem>

      <listitem>
        <para><command>web mvc scaffold</command></para>
      </listitem>

      <listitem>
        <para><command>web mvc all</command></para>
      </listitem>

      <listitem>
        <para><command>web mvc controller</command></para>
      </listitem>
    </itemizedlist>

    <section xml:id="guia-desarrollo_web_definir-controller_comandos_controller-setup">
      <title>web mvc setup</title>

      <para xml:lang="es">Este comando crea toda la configuración
      necesaria para el funcionamiento de Spring MVC en el proyecto.
      Esto implica varios ficheros de configuración preparados para
      su correcto funcionamiento en el proyecto actual, recursos gráficos,
      hojas de estilo, soporte multidioma, páginas iniciales, tags, menú, etc.
      </para>
	</section>

    <section xml:id="guia-desarrollo_web_definir-controller_comandos_controller-scaffold">
      <title>web mvc scaffold</title>

      <para xml:lang="es">Este comando crea un controlador con el CRUD
      (creación, lectura, actualización y borrado)
      de la entidad especificada. No hay restricciones para crear varios controladores
      para la misma entidad.</para>

      <para xml:lang="es">Este comando, además de generar el controlador,
      genera también las vistas para la creación, visualización, listado y
      actualización de los registros de la entidad y toda la
      configuración necesaria para que las peticiones del usuario lleguen al
      controlador y se visualize al usuario la respuesta (página)
      correspondiente.</para>

      <para xml:lang="es">Las URL de las peticiones que acepta el Controller
      generado siguen el convenio <link
      xlink:href="http://en.wikipedia.org/wiki/Representational_State_Transfer">RESTful</link>
      (<link
      xlink:href="http://es.wikipedia.org/wiki/Representational_State_Transfer">en
      español</link>). Toda la lógica se genera en un fichero
      <filename>*_Roo_*.aj</filename> asociado al controller, de forma que la
      clase Java queda limpia de los métodos generados automáticamente.</para>

      <para xml:lang="es">Los parámetros obligatorios para este comando son:</para>

      <variablelist>
        <varlistentry>
          <term xml:lang="es">--class</term>

          <listitem>
            <para xml:lang="es">Nombre de la clase java para el controller
            (incluido su paquete). Recordar que se puede usar el
            <literal>~</literal> para especificar el paquete base de la
            aplicación. Por convención, estas clases se suelen
            emplazar en el paquete <literal>~.web</literal> y con el
            formato <literal>EntidadController</literal>.</para>
          </listitem>
        </varlistentry>
      </variablelist>

      <para xml:lang="es">Los parámetros opcionales para este comando son:</para>

      <variablelist>
        <varlistentry>
          <term xml:lang="es">--backingType</term>

          <listitem>
            <para xml:lang="es">Nombre de la clase Entidad que manejará el
            controlador. Si no se especifica este parámetro, se tomará
            como valor la clase en la cual se encuentre el contexto de la
            consola.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term xml:lang="es">--path</term>

          <listitem>
            <para xml:lang="es">Ruta base para la generación de la URL para
            las peticiones basadas en RESTful.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term xml:lang="es">--disallowedOperations</term>

          <listitem>
            <para xml:lang="es">Lista de operaciones, separada por comas, de
            las operaciones NO permitidas en este controller. Los elementos de
            esta lista deben estar entre estos: <literal>create update
            delete</literal>.</para>
          </listitem>
        </varlistentry>
      </variablelist>
    </section>

    <section xml:id="guia-desarrollo_web_definir-controller_comandos_controller-scafold">
      <title>web mvc all</title>

      <para xml:lang="es">Este comando ejecuta un <link
      linkend="guia-desarrollo_web_definir-controller_comandos_controller-scaffold">web
      mvc scaffold</link> para cada una de las entidades registradas en la
      aplicación.</para>

      <para xml:lang="es">Los parámetros para este comando son:</para>

      <variablelist>
        <varlistentry>
          <term xml:lang="es">--package</term>

          <listitem>
            <para xml:lang="es">Nombre del paquete donde se generarán los
            controladores. Por convención, se suele
            utilizar el nombre de paquete <literal>~.web</literal>.</para>
          </listitem>
        </varlistentry>
      </variablelist>


      <para>Un ejemplo:</para>

      <programlisting>roo-gvNIX&gt; <command>web mvc setup</command>
roo-gvNIX&gt; <command>web mvc all --package ~.web</command></programlisting>

    </section>

    <section xml:id="guia-desarrollo_web_definir-controller_comandos_controller-class">
      <title>web mvc controller</title>

      <para xml:lang="es">Este comando permite crear un controlador de uso general
      no vinculado a ninguna entidad. Servirá para realizar implementaciones
      a medida.</para>

      <para xml:lang="es">Los parámetros para este comando son:</para>

      <variablelist>
        <varlistentry>
          <term xml:lang="es">--class</term>

          <listitem>
            <para xml:lang="es">Nombre de la clase java para el controlador
            (incluido su paquete). Recordar que se puede usar el
            <literal>~</literal> para especificar el paquete base de la
            aplicación.Por convención, estas clases se suelen
            emplazar en el paquete <literal>~.web</literal>.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term xml:lang="es">--preferredMapping</term>

          <listitem>
            <para xml:lang="es">Permite definir la ruta de la petición para este
            controller.</para>
          </listitem>
        </varlistentry>
      </variablelist>

      <para>Un ejemplo:</para>

      <programlisting>roo-gvNIX&gt; <command>web mvc setup</command>
roo-gvNIX&gt; <command>web mvc controller --class ~.web.MyController</command></programlisting>

      <para>Genera una clase como esta:</para>

      <programlisting>@RequestMapping("/my/**")
@Controller
public class MyController {

    @RequestMapping
    public void get(ModelMap modelMap, HttpServletRequest request,
    		HttpServletResponse response) {
    }

    @RequestMapping(method = RequestMethod.POST, value = "{id}")
    public void post(@PathVariable Long id, ModelMap modelMap, HttpServletRequest request,
    		HttpServletResponse response) {
    }

    @RequestMapping
    public String index() {
        return "my/index";
    }
}</programlisting>

      <para xml:lang="es">En este ejemplo la clase atenderá cualquier petición
      cuya URL comience por <filename>{URLBase}/my</filename> definido por la
      anotación <classname>@RequestMapping</classname> asociada a la clase.
      El método receptor, tal cual están definidas las anotaciones
      <classname>@RequestMapping</classname> en los métodos, cumplirán las siguientes
      reglas:</para>

      <orderedlist>
        <listitem>
          <para>Las peticiones de tipo POST con una petición cuya URL cumpla
          <filename>{URLBase}/myController/{entero}</filename> entrarán por el
          método <methodname>post</methodname> de la clase.</para>
        </listitem>

        <listitem>
          <para>Las peticiones a <filename>{URLBase}/my/index</filename>
          se atenderán en el método <methodname>index</methodname> que mostrará
          la vista <filename>my/index</filename>.</para>
        </listitem>

        <listitem>
          <para>El resto de peticiones serán atendidas en el método
          <methodname>get</methodname> de la clase.</para>
        </listitem>
      </orderedlist>

      <para xml:lang="es">Para más información sobre la anotación
      <classname>@RequestMapping</classname> ver la documentación de <link
      xlink:href="http://docs.spring.io/spring/docs/3.2.4.RELEASE/spring-framework-reference/html/mvc.html#mvc-ann-requestmapping">Spring
      MVC</link>.</para>

      <para>Este comando, además, generará la vista la vista
      <filename>WEB-INF/views/my/index.jspx</filename>, añadirá una entrada de
      menú para ella y actualizará el fichero
      <filename>WEB-INF/i18n/application.properties</filename> con entradas de
      internacionalización.</para>
    </section>

    <section xml:id="guia-desarrollo_capa-web_crear-comando">
      <title xml:lang="es">Proyecto ejemplo</title>

      <para xml:lang="es">Continuando con el proyecto del tutorial, la capa
      web de la aplicación de venta de pizzas se creará con la siguiente
      secuencia de comandos:</para>

      <programlisting>~.domain.PizzaOrder roo-gvNIX&gt; <command>web mvc setup</command>
~.domain.PizzaOrder roo-gvNIX&gt; <command>web mvc all --package ~.web</command></programlisting>

    </section>
  </section>

  <section xml:id="guia-desarrollo_web_definir-controller_a-mano">
    <title xml:lang="es">Crear la capa web con un IDE</title>

    <para xml:lang="es">Para que una clase <literal>Java</literal> sea un
    controlador de Spring MVC debe estar anotada con la anotación
    <classname>@Controller</classname> y añadir la anotación <link
    xlink:href="http://docs.spring.io/spring/docs/3.2.4.RELEASE/spring-framework-reference/html/mvc.html#mvc-ann-requestmapping">
    <classname>@RequestMapping</classname></link>
    como convenga para definir la correspondencia entre una URL y
    los métodos del controlador. Los controladores pueden ser a medida,
    para realizar las operaciones específicas
    o se pueden crear controladores para la gestión del CRUD
    (creación, lectura, actualización y borrado) de las entidades.</para>

    <section xml:id="guia-desarrollo_web_definir-controller_a-mano_propio">
      <title>Controlador a medida</title>

      <para>Para crear un controlador a medida, además de generar la clase con la
      anotaciones pertinentes, se debe tener en cuenta las siguientes
      cuestiones:</para>

      <itemizedlist>
        <listitem>
          <para xml:lang="es">Si se utiliza una vista, crearla dentro de
          <filename>WEB-INF/views/{path}</filename> junto con un fichero
          <filename>WEB-INF/views/{path}/views.xml</filename> de configuración
          del <literal>Tiles</literal>.</para>
        </listitem>

        <listitem>
          <para>Si se utilizan cadenas de literales susceptibles de
          internacionalización, darlas de alta en los ficheros
          <filename>WEB-INF/i18n/*.properties</filename> para los idiomas
          disponibles.</para>
        </listitem>
      </itemizedlist>
    </section>

    <section xml:id="guia-desarrollo_web_definir-controller_a-mano_automatico">
      <title xml:lang="es">Controlador CRUD</title>

      <para xml:lang="es">Se puede crear un controlador en Spring MVC
      que realice de forma automática la creación, lectura, actualización y borrado
      de registros de la entidad. Estas clases tienen el siguiente aspecto:</para>

<programlisting>@RequestMapping("/bases")
@Controller
@RooWebScaffold(path = "bases", formBackingObject = Base.class)
public class BaseController {
}</programlisting>

      <para xml:lang="es">Estas clases contienen, además de las anotaciones ya
      explicadas, la anotación <classname>@RooWebScaffold</classname> que
      admite los siguientes atributos obligatorios:</para>

      <variablelist>
        <varlistentry>
          <term>path</term>

          <listitem>
            <para xml:lang="es">Ruta base del controlador. Debe coincidir con
            la ruta de la anotación <classname>@RequestMapping</classname> de
            la clase. También se usará como ruta base para crear las vistas
            automáticas a partir de <filename>WEB-INF/views/</filename> en la
            aplicación.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>formBackingObject</term>

          <listitem>
            <para xml:lang="es">Objeto que maneja el controlador. Debe ser una
            clase java anotada como entidad.</para>
          </listitem>
        </varlistentry>
      <variablelist>

      <para xml:lang="es">Y también admite los siguientes atributos opcionales:</para>

      </variablelist>
        <varlistentry>
          <term>update, delete y create</term>

          <listitem>
            <para xml:lang="es">Define si deben permitirse estas operaciones en el
            controlador. Por defecto <literal>true</literal>.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>populateMethods</term>

          <listitem>
            <para xml:lang="es">Indica si deben generarse los métodos encargados de
            publicar las listas de valores que sean necesarias en las vistas.
            Por defecto <literal>True</literal>.</para>
          </listitem>
        </varlistentry>
      </variablelist>

      <para xml:lang="es">Cuando el framework detecte la anotación realizará
      las siguientes operaciones:</para>

      <orderedlist>
        <listitem>
          <para xml:lang="es">Creará un fichero *_Roo_Controller.aj donde
          generará todos los métodos para gestionar las peticiones que lleguen
          al controller.</para>
        </listitem>

        <listitem>
          <para>Añadirá las vistas necesarias en
          <filename>WEB-INF/views/{nombre_controller}</filename> para
          gestionar las acciones configuradas en la anotación
          (creación, actualización y/o borrado).</para>
        </listitem>

        <listitem>
          <para>Añadirá las entradas de menú necesarias.</para>
        </listitem>

        <listitem>
          <para>Añadirá en el fichero
          <filename>WEB-INF/i18n/application.properties</filename> las
          entradas multidioma necesarias.</para>
        </listitem>
      </orderedlist>
    </section>

    <section>
      <title>Código generado en las vistas de la capa web</title>

      <para>Cuando se genera capa web de la
      aplicación lo hace generando ficheros jspx y tagx. Los ficheros jspx no
      son más que JSPs que tienen un formato XML válido.
      A su vez las jspx hacen uso de tags de las librerías JSTL,
      Spring Framework y otras que se generán también como parte de la
      aplicación ubicadas en WEB-INF/tags.</para>

      <para>Ya que es una buena práctica la reutilización de código o de
      componentes de la vista web, se utiliza el motor de plantillas <link
      xlink:href="http://tiles.apache.org/">Apache Tiles</link>. Este motor de
      plantillas permite definir fragmentos que pueden ser integrados en una
      página completa en tiempo de ejecución, facilitando el desarrollo de la
      capa de presentación de una forma consistente en toda la
      aplicación.</para>

      <section>
        <title>Estructura de archivos de las vistas en la capa web</title>

        <para>En el proyecto de ejemplo PizzaShop, se habrá creado hasta el
        momento la estructura de directorios y archivos que se puede ver en la
        siguiente imagen:</para>

        <figure>
          <title>Estructura archivos Pizza Shop</title>

          <mediaobject>
            <imageobject>
              <imagedata align="center" fileref="images/webinf-tree.png"></imagedata>
            </imageobject>
          </mediaobject>
        </figure>

        <para>De todas las carpetas anteriores el desarrollo se centrará en
        <emphasis>layouts, tags y views</emphasis>.</para>
      </section>

      <section xml:id="guia-desarrollo_web_tiles">
        <title>Motor de plantillas: Tiles</title>

        <para>Dentro de <emphasis>views</emphasis> hay varios ficheros jspx y
        varias carpetas. Entre los ficheros se encuentra
        <emphasis>views.xml</emphasis>. Este fichero establece la
        configuración de vistas que Tiles deberá generar. Tiles se basa en que
        todas las vistas de una aplicación web son similares, tienen el mismo
        diseño y estructura, pero cada página está compuesta de distintos
        trozos que conforman el contenido pero siempre colocados de la misma
        forma. Al mismo tiempo permite modificar ciertos aspectos del
        diseño para adaptarlos a las necesidades de una vista concreta. Por
        ejemplo, es común que una página web tenga una cabecera, donde se
        puede ver el título de la misma, un menú con las distintas secciones
        que hay en el site, un pie de página y una parte principal con el
        contenido. Tiles nos brinda la posibilidad de especificar que una
        disposición de la página contiene estos cuatro bloques, pero por
        contra en alguna sección o situación (por ejemplo: el usuario de la
        web está o no logado en la aplicación) se desea que el menú no se
        muestre.</para>

          <programlisting>&lt;definition name="index" extends="default"&gt;
  &lt;put-attribute name="body" value="/WEB-INF/views/index.jspx" /&gt;
&lt;/definition&gt;</programlisting>

        <para>El código anterior, extraido de <emphasis>view.xml</emphasis>,
        define una vista llamada <emphasis>index</emphasis> que se basa en,
        extiende de, otra vista <emphasis>default</emphasis> y a la que se le
        pasa como atributo <emphasis>body</emphasis> la página definida por el
        fichero <emphasis>index.jspx.</emphasis> La definición de la vista
        <emphasis>default</emphasis> ayudará a entender esta otra.
        <emphasis>default</emphasis> se define en el fichero
        <emphasis>WEB-INF/layouts/layouts.xml</emphasis>.</para>

        <programlisting>&lt;definition name="default" template="/WEB-INF/layouts/default.jspx"&gt;
  &lt;put-attribute name="header" value="/WEB-INF/views/header.jspx" /&gt;
  &lt;put-attribute name="menu" value="/WEB-INF/views/menu.jspx" /&gt;
  &lt;put-attribute name="footer" value="/WEB-INF/views/footer.jspx" /&gt;
&lt;/definition&gt;</programlisting>

        <para>En la definición de esta vista se indica que la plantilla
        (<emphasis>template</emphasis>) que va a dibujar está parte de la
        web está programada en la JSP <emphasis>default.jspx</emphasis>.
        Además, aquí ya se observan otros fragmentos que van a definir la
        composición de la vista: la cabecera
        (<emphasis>header</emphasis>), menú (<emphasis>menu</emphasis>)
        y pie de página
        (<emphasis>footer</emphasis>), los cuales serán dibujados por las
        respectivas páginas jspx. Volviendo a la definición de la vista
        <emphasis>index</emphasis> del fragmento de código anterior,
        se observa cómo uniendo los atributos
        de las dos definiciones se obtiene que la vista
        <emphasis>index</emphasis> se compone de los cuatro fragmentos que
        comentados anteriormente: cabecera, menú, pie de página y
        cuerpo. Así pues, es sencillo definir una nueva vista con esta
        misma estructura simplemente indicando que el contenido principal, el
        cuerpo, viene definido por otra JSP cualquiera.</para>

        <para>Como aclaración, se puede analizar el contenido del fichero
        <emphasis>default.jspx</emphasis>:</para>

        <programlisting>&lt;html xmlns:jsp="http://java.sun.com/JSP/Page"
 xmlns:c="http://java.sun.com/jsp/jstl/core"
 xmlns:tiles="http://tiles.apache.org/tags-tiles"
 xmlns:spring="http://www.springframework.org/tags"
 xmlns:util="urn:jsptagdir:/WEB-INF/tags/util" &gt;

  &lt;jsp:output doctype-root-element="HTML" doctype-system="about:legacy-compat" /&gt;

  &lt;jsp:directive.page contentType="text/html;charset=UTF-8" /&gt;
  &lt;jsp:directive.page pageEncoding="UTF-8" /&gt;

  &lt;head&gt;
    &lt;meta http-equiv="Content-Type" content="text/html; charset=UTF-8" /&gt;

    <emphasis role="bold">&lt;util:load-scripts /&gt;</emphasis>

    <emphasis role="bold">&lt;spring:message code="application_name" var="app_name" htmlEscape="false"/&gt;</emphasis>
    &lt;title&gt;&lt;spring:message code="welcome_h3" arguments="${app_name}" /&gt;&lt;/title&gt;
  &lt;/head&gt;

  &lt;body class="tundra spring"&gt;
    &lt;div id="wrapper"&gt;
      <emphasis role="bold">&lt;tiles:insertAttribute name="header" ignore="true" /&gt;</emphasis>
      &lt;tiles:insertAttribute name="menu" ignore="true" /&gt;
      &lt;div id="main"&gt;
        <emphasis role="bold">&lt;tiles:insertAttribute name="body"/&gt;</emphasis>
        &lt;tiles:insertAttribute name="footer" ignore="true"/&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/body&gt;
&lt;/html&gt;</programlisting>

        <para>En el fragmento de código anterior aparecen etiquetas de HTML y
        algunas otras etiquetas resaltadas en negrita. <emphasis
        role="bold">&lt;util:load-scripts /&gt;</emphasis> es una etiqueta
        definida dentro del proyecto, luego se verá su
        finalidad. Las etiquetas <emphasis role="bold">&lt;spring:message
        .../&gt; </emphasis>son de Spring Framework y sirven para mostrar
        texto traducido a los distintos idiomas soportados por la
        aplicación. Por último las etiquetas <emphasis
        role="bold">&lt;tiles:insertAttribute ... ignore="true"
        /&gt;</emphasis> son propias de Tiles y permiten
        insertar en esa posición de la página JSP el contenido del fichero
        que se ha especificado en la definición de las vistas como parámetro
        (<emphasis>head, menu, body, footer</emphasis>). Cabe destacar el
        atributo <emphasis>ignore</emphasis> que acompaña a alguna de estas
        etiquetas. El atributo <emphasis>ignore</emphasis> con valor
        <emphasis>true</emphasis> indica que, si el bloque que debe insertarse
        en el lugar de esa etiqueta no está establecido en la definición de la
        vista, lo ignore y siga con el dibujado del resto de la página, por
        contra, en ausencia de este atributo o con valor
        <emphasis>false</emphasis>, al dibujar la página, si el bloque a
        insertar no está definido, se produciría una excepción en tiempo de
        ejecución y por tanto no se dibujaría la página.</para>

        <para>Con esto ya se conoce el funcionamiento del motor de plantillas
        usado en el framework, a continuación se verá el resto de directorios y
        ficheros que componen la capa web de la aplicación.</para>
      </section>

      <section>
        <title>Vistas CRUD (Create, Read, Update, Delete)</title>

        <para>Observando las carpetas contenidas en la carpeta views,
        se puede observar que hay una carpeta por cada una de las entidades de la
        lógica de negocio. Cada una de estas carpetas contiene las páginas JSP
        que dibujarán las vistas para las operaciones de Creación (Create),
        Lectura (Read), Modificación (Update) y Borrado (Delete). Tomando como
        ejemplo la entidad <emphasis>bases</emphasis>:</para>

        <programlisting>bases
|-- create.jspx
|-- list.jspx
|-- show.jspx
|-- update.jspx
`-- views.xml</programlisting>

        <para>Cabe destacar que también existe un archivo
        <emphasis>views.xml</emphasis>. También se trata de un archivo de
        definiciones de vistas. Mirando su contendo se observa que define
        varias vistas que se basan en <emphasis>default</emphasis> tal y como se
        ha comentado anteriormente pero cada una de ellas define un
        <emphasis>body</emphasis> con una JSP distinta.</para>

        <para>Parece bastante evidente cual es el cometido de cada una de las
        JSP:</para>

        <itemizedlist>
          <listitem>
            <para><emphasis>create.jspx</emphasis> muestra el formulario de
            creación de un nuevo registro de la entidad Base,</para>
          </listitem>

          <listitem>
            <para><emphasis>list.jspx</emphasis> muestra el listado de todas
            las bases de pizza existentes,</para>
          </listitem>

          <listitem>
            <para><emphasis>show.jspx</emphasis> mostrará la información
            detallada de la base de pizza seleccionada</para>
          </listitem>

          <listitem>
            <para>y por último <emphasis>update.jspx</emphasis> muestra el
            formulario de actualización del registro.</para>
          </listitem>
        </itemizedlist>

        <para>No hay una JSP dedicada al borrado de registros porque ya se
        incluye un botón para el borrado de un registro tanto en <emphasis>show</emphasis>
        como en <emphasis>list</emphasis>.</para>
      </section>

      <section>
        <title>Componentes de las JSP de las vistas CRUD</title>

        <para>Se van a analizar los componentes que forman las vistas CRUD del
        proyecto.</para>

        <note>
          <para>Se listan algunos componentes que pueden aparecer en cada vista
          aunque cada uno de estos componentes puede no aparecer, aparecer varias veces
          o aparecer otros distintos dependiendo de los campos a informar.</para>
        </note>

        <para><emphasis role="bold">create.jspx</emphasis></para>

        <programlisting>&lt;form:create&gt;
  &lt;field:input/&gt;
  &lt;field:datetime/&gt;
  &lt;field:select/&gt;
&lt;/form:create&gt;
&lt;form:dependency/&gt;</programlisting>

        <para><emphasis>&lt;form:create/&gt;</emphasis> define un formulario
        en el que los campos vienen definidos por las etiquetas
        <emphasis>&lt;field:xxxx/&gt;</emphasis>. Las etiquetas <emphasis>form</emphasis>
        generan el código HTML correspondiente a la infraestructura de un formulario
        de creación siguiendo la definición RESTful. Las etiquetas
        <emphasis>field</emphasis> generan el código HTML necesario para mostrar campos
        de texto, introducción de fechas o desplegables de selección. En este caso cada
        campo puede utilizar una etiqueta distinta en función del tipo de datos que
        contenga y la forma en la que se desee presentar su información en pantalla.</para>

        <para><emphasis role="bold">list.jspx</emphasis></para>

        <programlisting>&lt;page:list&gt;
  &lt;table:table&gt;
    &lt;table:column/&gt;
  &lt;/table:table&gt;
&lt;/page:list&gt;</programlisting>

        <para><emphasis>&lt;table:table/&gt;</emphasis> y
        <emphasis>&lt;page:list/&gt;</emphasis> generarán el HTML de una página y
        una tabla donde las distintas columnas serán los campos indicados
        a través de la etiqueta
        <emphasis>&lt;table:column/&gt;</emphasis> y en cada fila se emplazará
        cada uno de los registros de la entidad paginados. Puesto que esta página
        solo proporciona la visualización de los valores de cada campo sin edición, no es
        necesario especificar distintos tipos de columna para cada campo.</para>

        <para><emphasis role="bold">show.jspx</emphasis></para>

        <programlisting>&lt;page:show&gt;
  &lt;field:display/&gt;
&lt;/page:show&gt;</programlisting>

        <para>Muestra los campos de un registro concreto de la entidad
        en formato texto en la que cada campo se representa mediante la etiqueta
        <emphasis>&lt;field:display/&gt;</emphasis>. Esta página también solo proporciona
        visualización de valores, por lo que tampoco es
        necesario especificar distintos tipos de columna para cada campo.</para>

        <para><emphasis role="bold">update.jspx</emphasis></para>

        <programlisting>&lt;form:update&gt;
  &lt;field:input/&gt;
  &lt;field:datetime/&gt;
  &lt;field:select/&gt;
&lt;/form:update&gt;</programlisting>

        <para>Se comporta de forma muy parecida a la página <emphasis>create.jspx</emphasis>
        pero esta página permite la actualización de los datos de un registro.
        Las etiquetas <emphasis>field</emphasis> que aparecen sirven en este caso para la modificación
        de un registro y son exáctamente las mismas que en el caso del alta de un nuevo
        registro.</para>
      </section>
    </section>
  </section>

  <section>
    <title>Visualización de entidades en la capa web</title>

    <para>Con los componentes &lt;field:display/&gt;, &lt;table:column/&gt; y
    &lt;field:.../&gt; se consigue mostrar datos de las entidades de
    la aplicación, es decir, en el proyecto PizzaShop de ejemplo, tomando
    la definición de la página jspx de listado de como la entidad PizzaOrder:</para>

    <programlisting>&lt;field:display <emphasis role="bold">field="pizzas"</emphasis>
		id="s_com_disid_roo_pizzashop_domain_<emphasis role="bold">PizzaOrder</emphasis>_pizzas" object="${pizzaorder}"
		z="WSxjsiiEWhA5vo8ecxRoox5EjKA="/&gt;</programlisting>

    <para>En la página se mostrará información de las Pizzas ligadas a un
    PizzaOrder. El framework utilizará para la visualización en la
    capa web de estos objetos relacionados los llamados
    <emphasis role="bold">Converters</emphasis>. Los Converters son
    clases java que, como su nombre indica, convierten un objeto dado en otro.
    En este caso particular de los Converters, el framework los utiliza para convertir un objeto
    del modelo (cada Pizza) en una cadena de forma que sea legible para un humano.</para>

    <para>Este mecanismo está implementado en la clase java
    <emphasis>ApplicationConversionServiceFactoryBean.java</emphasis> que
    se puede encontrar en el mismo paquete donde están los controladores de la
    aplicación. Esta clase la genera el framework de manera automática al generar la
    capa web. Tal y como se ha comentado en el apartado de <link
    linkend="guia-desarrollo_generacion-codigo">generación de código</link>,
    asociado al
    <emphasis>ApplicationConversionServiceFactoryBean.java</emphasis> existe
    un Aspecto Java (fichero aj) con la declaración de los Converters y un método que los
    registra para que estén disponibles a la hora de "convertir" una entidad
    del modelo a la cadena que se mostrara en página.</para>

    <para>Si la cadena que se visualiza en la página web no muestra la información
    deseada para una entidad, se puede modificar el Converter de esa entidad y
    adaptarlo a sus requerimientos. En la sección sobre modificación de código se
    explica como hacerlo.</para>
  </section>

  <section>
  	<title>Mejoras de renimiento</title>

  	<para xml:lang="es">Se pueden implementar algunas mejoras de rendimiento
  	definidas en la sección
  	<link linkend="guia-desarrollo_mejoras-rendimiento-evitar-carga-listas-innecesarias">
  	Evitar la carga de listas de valores innecesarias</link>.
  	</para>
  </section>

</chapter>
