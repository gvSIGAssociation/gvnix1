<?xml version="1.0" encoding="UTF-8"?>
<chapter version="5.0" xml:id="guia-desarrollo-acceso-datos" xml:lang="es"
         xmlns="http://docbook.org/ns/docbook"
         xmlns:xlink="http://www.w3.org/1999/xlink"
         xmlns:xi="http://www.w3.org/2001/XInclude"
         xmlns:ns5="http://www.w3.org/1998/Math/MathML"
         xmlns:ns4="http://www.w3.org/2000/svg"
         xmlns:ns3="http://www.w3.org/1999/xhtml"
         xmlns:ns="http://docbook.org/ns/docbook">
  <title xml:lang="es">Gestión del acceso a datos</title>

  <section xml:id="guia-desarrollo-acceso-datos_persistencia-objetos"
           xml:lang="es">
    <title xml:lang="es">Persistencia de objetos</title>

    <para xml:lang="es">Trabajar en un entorno orientado a objetos con acceso
    a fuentes de datos relacionales (lo habitual en tecnología Java) puede
    suponer un incremento de los tiempos de desarrollo porque se debe incluir
    la lógica necesaria para hacer corresponder el modelo relacional de la
    base de datos, que trata con relaciones y conjuntos, con el paradigma
    orientado a objetos de las entidades del proyecto, que trata con objetos,
    atributos y asociaciones de unos con otros. Esta problemática es la que se
    conoce como <emphasis>desajuste objeto-relacional</emphasis>
    (object-relational impedance mismatch).</para>

    <para xml:lang="es">La técnica y herramientas <emphasis>ORM</emphasis>
    (Object-Relational Mapping) surgen para reducir el coste de desarrollo que
    supone el desajuste objeto-relacional. Las técnicas de ORM permiten
    automatizar procesos que trasladan objetos a formas almacenables en tablas
    y viceversa, preservando los atributos de los objetos. Para esto se basan
    en la utilización de metadatos de correspondencia que especifican la
    información necesaria para que se pueda efectuar de forma automática la
    conversión de datos entre el sistema relacional y el sistema orientado a
    objetos.</para>

    <para xml:lang="es">Esta técnica supuso que empezaran a aparecer multitud
    de librerías y herramientas ORM para Java. Para estandarizar esta técnica
    en el mundo Java y hacer nuestras aplicaciones independientes de la
    herramienta surgió JPA (Java Persistence API), actualmente en su versión 2
    (<link xlink:href="http://jcp.org/en/jsr/detail?id=317">JSR
    317</link>).</para>

    <para xml:lang="es">gvNIX (herencia del núcleo Spring Roo) fundamenta su
    interacción con la base de datos en un sistema de persistencia
    <emphasis>JPA 2</emphasis>. Gracias a esto las aplicaciones desarrolladas
    con gvNIX se benefician de las mejoras de tiempos de desarrollo que
    aportan la técnica y herramientas ORM.</para>

    <para xml:lang="es">Regresando a la creación del nuevo proyecto, el primer
    paso es instalar y configurar el sistema de persistencia. Teclear
    <command>hint</command> que sugerirá los siguientes pasos a
    dar:</para>

    <programlisting>roo-gvNIX&gt; <command>hint</command>
Roo requires the installation of a persistence configuration,
for example, JPA or MongoDB.

For JPA, type 'jpa setup' and then hit TAB three times.
We suggest you type 'H' then TAB to complete "HIBERNATE".
After the --provider, press TAB twice for database choices.
For testing purposes, type (or TAB) HYPERSONIC_IN_MEMORY.
If you press TAB again, you'll see there are no more options.
As such, you're ready to press ENTER to execute the command.

Once JPA is installed, type 'hint' and ENTER for the next suggestion.

Similarly, for MongoDB persistence, type 'mongo setup' and ENTER.

roo-gvNIX&gt;</programlisting>

    <para xml:lang="es">En el ámbito de esta documentación es suficiente con
    conectar la aplicación con una base de datos que no necesita ningún
    servidor instalado como Hypersonic e Hibernate como implementación del
    sistema de persistencia:</para>

    <programlisting>roo-gvNIX&gt; <command>jpa setup --provider HIBERNATE --database HYPERSONIC_PERSISTENT</command>
Created SPRING_CONFIG_ROOT/database.properties
Updated SPRING_CONFIG_ROOT/applicationContext.xml
Created SRC_MAIN_RESOURCES/META-INF/persistence.xml
Updated ROOT/pom.xml [added dependencies org.hsqldb:hsqldb:2.2.9,
org.hibernate:hibernate-core:4.2.2.Final, org.hibernate:hibernate-entitymanager:4.2.2.Final,
org.hibernate.javax.persistence:hibernate-jpa-2.0-api:1.0.1.Final,
commons-collections:commons-collections:3.2.1,
org.hibernate:hibernate-validator:4.3.1.Final,
javax.validation:validation-api:1.0.0.GA,
javax.transaction:jta:1.1, org.springframework:spring-jdbc:${spring.version},
org.springframework:spring-orm:${spring.version},
commons-pool:commons-pool:1.5.6, commons-dbcp:commons-dbcp:1.4]
roo-gvNIX&gt;</programlisting>

    <warning>
      <para xml:lang="es">Este tipo de bases de datos no es la mejor opción
      para un entorno de producción, utilizarla sólo para entornos de
      desarrollo, demostraciones y formación.</para>
    </warning>

    <warning>
      <para xml:lang="es">Con la ingeniería directa, es decir, la creación
      de entidades y campos mediante los comandos de la consola, se configura
      el sistema de persistencia para crear la base de datos cada vez
      que se arranca la aplicación. Por eso, los datos de la demo se perderán cada
      vez que se inicie la aplicación. Esto no es así cuando se utiliza la
      ingeniería inversa a partir de un esquema de base de datos ya
      existente.</para>

      <para xml:lang="es">Este comportamiento se puede cambiar en la
      configuración del sistema de persistencia:
      <filename>src/main/resources/META-INF/persistence.xml</filename>.
      Consultar la sección <link
      linkend="guia-desarrollo_gestion-entidades_enlazar-base-datos-existente_regeneracion-bbdd">enlazar
      base de datos existente</link> para aprender cómo cambiar el
      comportamiento por defecto.</para>
    </warning>
  </section>

  <section xml:id="guia-desarrollo_gestion-acceso-datos">
    <title xml:lang="es">Configurar la conexión con la base de datos</title>

    <para xml:lang="es">En cualquier punto del ciclo de vida de una aplicación
    puede surgir la necesidad de cambiar de base de datos (distinta tecnología
    de bases de datos, cambio de la clave de acceso, cambio del equipo donde
    se encuentra la base de datos, etc), para estos casos gvNIX ofrece una
    serie de comandos que simplificarán la actualización de la configuración
    de acceso a la base de datos:</para>

    <itemizedlist>
      <listitem>
        <para><command>jpa setup</command></para>
      </listitem>

      <listitem>
        <para><command>database properties</command></para>
      </listitem>
    </itemizedlist>

    <section>
      <title>jpa setup</title>

      <para xml:lang="es">Crea o actualiza la configuración del acceso a datos
      (base de datos y el proveedor de persistencia o ORM). Entre los parámetros
      requeridos están la herramienta ORM y la base de datos a utilizar.</para>

      <para xml:lang="es">Los parámetros obligatorios que requiere este comando son:</para>

      <variablelist>
        <varlistentry>
          <term>--provider</term>

          <listitem>
            <para xml:lang="es">Identificador de la herramienta ORM. Los
            valores posibles son:</para>

            <variablelist>
              <varlistentry>
                <term>DATANUCLEUS</term>

                <listitem>
                  <para><link xlink:href="http://www.datanucleus.org/">Data
                  Nucleus</link></para>
                </listitem>
              </varlistentry>

              <varlistentry>
                <term>ECLIPSELINK</term>

                <listitem>
                  <para><link
                  xlink:href="http://www.eclipse.org/eclipselink/">EclipseLink</link></para>
                </listitem>
              </varlistentry>

              <varlistentry>
                <term>HIBERNATE</term>

                <listitem>
                  <para><link
                  xlink:href="http://www.hibernate.org/">Hibernate</link></para>
                </listitem>
              </varlistentry>

              <varlistentry>
                <term>OPENJPA</term>

                <listitem>
                  <para><link
                  xlink:href="http://openjpa.apache.org/">OpenJPA</link></para>
                </listitem>
              </varlistentry>
            </variablelist>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>--database</term>

          <listitem>
            <para xml:lang="es">Identificador de la base de datos. Los valores
            posibles son:</para>

            <itemizedlist>
              <listitem>
                <para>ORACLE<emphasis>. Debido a que los drivers JDBC no están
                disponibles en ningún repositorio Maven, en caso de utilizar
                Oracle habrá que instalar manualmente el driver
                JDBC.</emphasis></para>
              </listitem>

              <listitem>
                <para>MSSQL.</para>
              </listitem>

              <listitem>
                <para>MYSQL.</para>
              </listitem>

              <listitem>
                <para>POSTGRES.</para>
              </listitem>

              <listitem>
                <para>SYBASE.</para>
              </listitem>

              <listitem>
                <para>DB2<emphasis>. Debido a que los drivers JDBC no están
                disponibles en ningún repositorio Maven, en caso de utilizar
                DB2 habrá que instalar manualmente el driver
                JDBC.</emphasis></para>
              </listitem>

              <listitem>
                <para>DERBY.</para>
              </listitem>

              <listitem>
                <para>GOOGLE_APP_ENGINE.</para>
              </listitem>

              <listitem>
                <para>H2_IN_MEMORY.</para>
              </listitem>

              <listitem>
                <para>HYPERSONIC_IN_MEMORY.</para>
              </listitem>

              <listitem>
                <para>HYPERSONIC_PERSISTENT.</para>
              </listitem>

              <listitem>
                <para>FIREBIRD.</para>
              </listitem>

              <listitem>
                <para>DATABASE_DOT_COM.</para>
              </listitem>
            </itemizedlist>
          </listitem>
        </varlistentry>
      </variablelist>

      <variablelist>

		<para xml:lang="es">Los parámetros opcionales que permite este comando son:</para>

        <varlistentry>
          <term>--applicationId</term>

          <listitem>
            <para xml:lang="es">Identificación de aplicación en Google App
            Engine (sólo utilizado para esta base de datos).</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>--databaseName</term>

          <listitem>
            <para xml:lang="es">Nombre de la base de datos con la que conectar.
            </para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>--hostName</term>

          <listitem>
            <para>El nombre DNS o la dirección IP del ordenador en el que se
            encuentra la base de datos a utilizar.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>--jndiDataSource</term>

          <listitem>
            <para xml:lang="es">Fuente de datos JNDI a utilizar.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>--password</term>

          <listitem>
            <para xml:lang="es">Contraseña del usuario para la conexión
            con la base de datos.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>--persistenceUnit</term>

          <listitem>
            <para>Nombre de la unidad de persistencia a utilizar en el fichero
            persistence.xml.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>--transactionManager</term>

          <listitem>
            <para>Nombre del gestor de transacciones a utilizar.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>--userName</term>

          <listitem>
            <para xml:lang="es">Nombre del usuario para la conexión
            con la base de datos.</para>
          </listitem>
        </varlistentry>
      </variablelist>

      <para xml:lang="es">Dependiendo del tipo de base de datos pueden ser
      necesarios unos u otros parámetros. Se recomienda usar el completado
      de comandos con <emphasis>TAB</emphasis> (en la consola del sistema)
      o <emphasis>CTRL+SPACE</emphasis> (en el IDE)
      para que se indique lo que hace falta en función del
      contexto. Cuando el autocompletado no proporciona más opciones para
      un comando, se recomienda escribir los caracteres
      <emphasis>--</emphasis> e ir auto completando para que aparezcan
      los parámetros opcionales.</para>
    </section>

    <section>
      <title>database properties</title>

      <para xml:lang="es">Permite la consulta, eliminación, actualización y
      creación de las propiedades de conexión con la base de datos (a diferencia
      del comando anterior que configura el sistema de persitencia en su
      totalidad). Estas propiedades se almacenan el fichero
      <filename>src/main/resources/META-INF/spring/database.properties</filename>
      de la aplicación.</para>

      <para xml:lang="es">Se dispone del siguiente grupo de comandos:</para>

      <variablelist>
        <varlistentry>
          <term>database properties list</term>

          <listitem>
            <para xml:lang="es">Lista las propiedades de conexión con la
            base de datos.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>database properties remove</term>

          <listitem>
            <para xml:lang="es">Elimina una propiedad de la configuración.
            Requiere un único parámetro <parameter>--key</parameter> para
            especificar la clave a eliminar.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>database properties set</term>

          <listitem>
            <para xml:lang="es">Crea o actualiza una propiedad en la
            configuración. Requiere un parámetro <parameter>--key</parameter>
            con el nombre de la propiedad y un <parameter>--value</parameter>
            con el valor a establecer.</para>
          </listitem>
        </varlistentry>
      </variablelist>
    </section>

    <section>
      <title>Ejemplo: Conectar con PostgreSQL</title>

      <para xml:lang="es">En este ejemplo se va a configurar la conexión a un
      servidor PostgreSQL situado en una máquina en de la red local. Los datos de
      conexión de ejemplo son:</para>

      <itemizedlist>
        <listitem>
          <para xml:lang="es">Servidor de base de datos:
          <literal>dbserver</literal></para>
        </listitem>

        <listitem>
          <para xml:lang="rd">Puerto de conexión:
          <literal>5438</literal></para>
        </listitem>

        <listitem>
          <para>Nombre de la base de datos: <literal>my_db</literal></para>
        </listitem>

        <listitem>
          <para xml:lang="es">Nombre de usuario de la base de datos:
          <literal>user1</literal></para>
        </listitem>

        <listitem>
          <para xml:lang="es">Contraseña del usuario:
          <literal>1234</literal></para>
        </listitem>
      </itemizedlist>

      <para xml:lang="es">Recordar que estos comando se pueden
      ejecutar en cualquier momento y tantas veces como se desee.</para>

      <para xml:lang="es">Los pasos a seguir para la configuración son:</para>

      <orderedlist>
        <listitem>
          <para xml:lang="es">Usar el comando <command>persistence
          setup</command> con los parámetros que disponemos:</para>

          <programlisting>roo-gvNIX&gt; <command>jpa setup --provider HIBERNATE --database POSTGRES --databaseName my_db
          			 --userName user1 --password 1234 --hostName dbserver</command>
Created SPRING_CONFIG_ROOT/database.properties
Please update your database details in
 src/main/resources/META-INF/spring/database.properties.
Updated SPRING_CONFIG_ROOT/applicationContext.xml
Created SRC_MAIN_RESOURCES/META-INF/persistence.xml
Updated ROOT/pom.xml [added dependencies postgresql:postgresql:9.1-901-1.jdbc4,
 org.hibernate:hibernate-core:4.2.2.Final, org.hibernate:hibernate-entitymanager:4.2.2.Final,
 org.hibernate.javax.persistence:hibernate-jpa-2.0-api:1.0.1.Final,
 commons-collections:commons-collections:3.2.1,
 org.hibernate:hibernate-validator:4.3.1.Final, javax.validation:validation-api:1.0.0.GA,
 javax.transaction:jta:1.1, org.springframework:spring-jdbc:${spring.version},
 org.springframework:spring-orm:${spring.version}, commons-pool:commons-pool:1.5.6,
 commons-dbcp:commons-dbcp:1.4]
roo-gvNIX&gt; </programlisting>
        </listitem>

        <listitem>
          <para xml:lang="es">Comprobar como ha quedado la configuración de la
          conexión. Para ello usar el comando <command>database properties
          list</command>:</para>

          <programlisting>roo-gvNIX&gt; <command>database properties list</command>
database.driverClassName = org.postgresql.Driver
database.password = 1234
database.url = jdbc:postgresql://dbserver:5432/my_db
database.username = user1
roo-gvNIX&gt; </programlisting>

          <para>Observar que lo único que falta es configurar el
          puerto de la base de datos en la propiedad
          <literal>database.url</literal>. Observar que el puerto
          configurado automáticamente es el puerto por defecto de la base de
          datos, sin embargo en este ejemplo el servidor de base de datos
          utiliza uno distinto.</para>
        </listitem>

        <listitem>
          <para xml:lang="es">Configurar la URL de conexión al servidor
          correctamente usando el comando <command>database properties
          set</command>:</para>

          <programlisting>
roo-gvNIX&gt; <command>database properties set --key database.url --value
				jdbc:postgresql://dbserver:5438/my_db </command>
Updated SPRING_CONFIG_ROOT/database.properties
roo-gvNIX&gt; </programlisting>
        </listitem>

        <listitem>
          <para xml:lang="es">Volver a comprobar el estado de los parámetros
          con el comando <command>database properties list</command>:</para>

          <programlisting>roo-gvNIX&gt; <command>database properties list</command>
database.driverClassName = org.postgresql.Driver
database.password = 1234
database.url = jdbc:postgresql://dbserver:5438/my_db
database.username = user1
roo-gvNIX&gt; </programlisting>
        </listitem>
      </orderedlist>

      <para xml:lang="es">Una vez hecho, la siguiente vez que se arranque la
      aplicación usará la nueva conexión de base de datos configurada.</para>
    </section>

    <section xml:id="guia-desarrollo_acceso-datos_actualizacion-esquema">
      <title>Actualización automática del esquema</title>

      <para xml:lang="es">Al crear las entidades y los campos desde la consola
      mediante los comandos de ingeniería directa, en el arranque de la
	  aplicación se crea automáticamente el esquema de base
	  de datos que se corresponde con el modelo de entidades.
      Esto no es así cuando se realiza la ingeniería inversa a partir
      de un esquema de base de datos ya existente.</para>

      <para xml:lang="es"><emphasis>Si se desea cambiar este
      comportamiento para, por ejemplo, que los datos almacenados
      no desaparezca en cada arranque seguir los siguientes pasos</emphasis>:</para>

      <itemizedlist>
        <listitem>
          <para xml:lang="es">Editar el archivo
          <filename>src/main/resources/META-INF/persistence.xml</filename></para>
        </listitem>

        <listitem>
          <para xml:lang="es">Cambiar el valor de la propiedad
          <emphasis>hibernate.hbm2ddl.auto</emphasis>:</para>

          <para>Existen cinco valores <emphasis>validate, update, create,
          create-drop y none</emphasis>. Estos valores deben utilizarse
          con precauciñón por el peligr" puede suponer para
          la integridad de la BBDD.</para>

          <itemizedlist>
            <listitem>
              <para><emphasis>validate</emphasis>: valida que el modelo de objetos
              y el modelo relacional de base de datos son equivalentes. En caso
              de no ser iguales no se permitirá el arranque de la aplicación.</para>
            </listitem>

            <listitem>
              <para><emphasis>update</emphasis>: actualiza el esquema al
              arrancar la aplicación. Esto es, modificará los elementos del modelo
              relacional de base de datos que no se correspondan con el modelo
              de objetos.</para>
            </listitem>

            <listitem>
              <para><emphasis>create</emphasis>: crea el esquema en el arranque
              de la aplicación destruyendo la información existente.</para>
            </listitem>

            <listitem>
              <para><emphasis>create-drop</emphasis>: hace un
              <emphasis>drop</emphasis> de las tablas al parar la
              aplicación y en el arranque las crea.</para>
            </listitem>

            <listitem>
              <para>none: no hace absolutamente ninguna validación ni
              modificación del esquema.</para>
            </listitem>
          </itemizedlist>
        </listitem>
      </itemizedlist>
    </section>

    <section xml:id="guia-desarrollo_gestion-acceso-datos_multiples-fuentes-datos">
      <title xml:lang="es">Múltiples fuentes de datos</title>

      <para>La conexión con distintas bases de datos está soportada, aunque su
      configuración no se genera automáticamente. Distinguir de la conexión
      con distintos esquemas de la misma base de datos que está tanto soportado
      como contemplado por la generación automática que realiza la ingeniería
      inversa.</para>

      <para>A continuación se muestran los pasos a seguir para configurar la
      conexión con distintas bases de datos en una misma aplicación mediante el
      proveedor de persistencia Hibernate:</para>

      <itemizedlist>
        <listitem>
          <para xml:lang="es">En <emphasis>src/main/resources/META-INF/persistence.xml</emphasis>
          incluir la siguiente configuración reemplazando los puntos suspensivos por
          los valores adecuados para la nueva conexión de base de datos:</para>

          <programlisting>
		    &lt;persistence-unit name=&quot;persistenceUnit2&quot; transaction-type=&quot;RESOURCE_LOCAL&quot;&gt;
		        &lt;provider&gt;org.hibernate.ejb.HibernatePersistence&lt;/provider&gt;
		        &lt;properties&gt;
		            &lt;property name=&quot;hibernate.dialect&quot; value=&quot;...&quot;/&gt;
		            &lt;property name=&quot;hibernate.hbm2ddl.auto&quot; value=&quot;...&quot;/&gt;
		            &lt;property name=&quot;hibernate.ejb.naming_strategy&quot; value=&quot;...&quot;/&gt;
		            &lt;property name=&quot;hibernate.connection.charSet&quot; value=&quot;...&quot;/&gt;
		        &lt;/properties&gt;
		    &lt;/persistence-unit&gt;
		  </programlisting>
        </listitem>

        <listitem>
          <para xml:lang="es">En <emphasis>src/main/resources/META-INF/spring/applicationContext.xml</emphasis>
          incluir la siguiente configuración reemplazando los puntos suspensivos por
          los valores adecuados para la nueva conexión de base de datos:</para>

          <programlisting>
		    &lt;bean class=&quot;org.apache.commons.dbcp.BasicDataSource&quot; destroy-method=&quot;close&quot;
		    		id=&quot;dataSource2&quot;&gt;
		        &lt;property name=&quot;driverClassName&quot; value=&quot;...&quot;/&gt;
		        &lt;property name=&quot;url&quot; value=&quot;...&quot;/&gt;
		        &lt;property name=&quot;username&quot; value=&quot;...&quot;/&gt;
		        &lt;property name=&quot;password&quot; value=&quot;...&quot;/&gt;
		        &lt;property name=&quot;testOnBorrow&quot; value=&quot;...&quot;/&gt;
		        &lt;property name=&quot;testOnReturn&quot; value=&quot;...&quot;/&gt;
		        &lt;property name=&quot;testWhileIdle&quot; value=&quot;...&quot;/&gt;
		        &lt;property name=&quot;timeBetweenEvictionRunsMillis&quot; value=&quot;...&quot;/&gt;
		        &lt;property name=&quot;numTestsPerEvictionRun&quot; value=&quot;...&quot;/&gt;
		        &lt;property name=&quot;minEvictableIdleTimeMillis&quot; value=&quot;...&quot;/&gt;
		        &lt;property name=&quot;validationQuery&quot; value=&quot;...&quot;/&gt;
		 	&lt;/bean&gt;
		    &lt;bean class=&quot;org.springframework.orm.jpa.JpaTransactionManager&quot;
		    		id=&quot;transactionManager2&quot;&gt;
		        &lt;property name=&quot;entityManagerFactory&quot; ref=&quot;entityManagerFactory2&quot;/&gt;
		    &lt;/bean&gt;
		    &lt;tx:annotation-driven mode=&quot;aspectj&quot; transaction-manager=&quot;transactionManager2&quot;/&gt;
		    &lt;bean class=&quot;org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean&quot;
		    		id=&quot;entityManagerFactory2&quot;&gt;
		        &lt;property name=&quot;persistenceUnitName&quot; value=&quot;persistenceUnit2&quot; /&gt;
		        &lt;property name=&quot;dataSource&quot; ref=&quot;dataSource2&quot;/&gt;
		    &lt;/bean&gt;
		  </programlisting>
        </listitem>

        <listitem>
          <para xml:lang="es">En la clase Java de la entidad, por ejemplo,
          <emphasis>src/main/java/.../domain/Entidad.java</emphasis> añadir en la
          anotación <emphasis>@RooJpaActiveRecord</emphasis> el atributo
          <emphasis>persistenceUnit = "persistenceUnit2"</emphasis> haciendo
          referencia a la nueva conexión configurada:</para>

          <programlisting>
		    @RooJpaActiveRecord(persistenceUnit = "persistenceUnit2")
		    class Entity
		  </programlisting>

		  <para xml:lang="es">De esta forma, para cada entidad de datos se
		  puede asociar la conexión de base de datos que se desee.</para>
		</listitem>
	  </itemizedlist>

    </section>
  </section>
</chapter>
