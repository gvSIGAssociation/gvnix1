<?xml version="1.0" encoding="UTF-8"?>
<chapter version="5.0" xml:id="addon-jpa" xml:lang="es"
         xmlns="http://docbook.org/ns/docbook"
         xmlns:xlink="http://www.w3.org/1999/xlink"
         xmlns:ns5="http://www.w3.org/1998/Math/MathML"
         xmlns:ns4="http://www.w3.org/2000/svg"
         xmlns:ns3="http://www.w3.org/1999/xhtml"
         xmlns:ns="http://docbook.org/ns/docbook">
  <title xml:lang="es">Add-on JPA</title>

  <para xml:lang="es">Add-on de utilidades enfocadas a la persistencia y consulta de las
  entidades.</para>

  <para xml:lang="es">Este add-on incluye las siguientes funcionalidades:</para>

  <itemizedlist>
    <listitem>
      <para xml:lang="es">Servicios de persistencia de entidades en bloque.</para>
    </listitem>
    <listitem>
      <para xml:lang="es">Registro de información adicional para búsquedas por relaciones.</para>
    </listitem>
    <listitem>
      <para xml:lang="es">Auditoría y registro de histórico de cambios de las endidades.</para>
    </listitem>
    <listitem>
      <para xml:lang="es">Persistencia de entidades con campos de tipo geográfico.</para>
    </listitem>
  </itemizedlist>

  <para xml:lang="es">Para poder utilizar estas funcionalidades hay que ejecutar
    previamente el comando <command><link linkend="apendice-comandos_addon-jpa_jpa-gvnix-setup">
    jpa gvnix setup</link></command>.</para>

  <section xml:id="addon-jpa_batch">
    <title>Servicios persistencia en bloque</title>

    <para xml:lang="es">Esta funcionalidad permite generar <emphasis>servicios</emphasis> que
    permiten realizar operaciones de creación, actualización y eliminación
    de múltiples instancias de una entidad en una sola petición y de
    forma transaccional.</para>

    <para xml:lang="es">Estos <emphasis>servicios</emphasis> se generan como un
    <emphasis>bean</emphasis> de Spring, de forma que, para utilizarlos,
    solo es necesario declararlos como propiedad en la clase que los requiera
    y serán inyectados en el momento de la construcción de la instancia
    por Spring.</para>

    <para xml:lang="es">Un ejemplo de este servicio generado sería este:</para>

    <programlisting>package com.springsource.petclinic.domain;
import org.gvnix.addon.jpa.batch.GvNIXJpaBatch;
import org.springframework.stereotype.Service;

@Service
@GvNIXJpaBatch(entity = Owner.class)
public class OwnerBatchService {
}
    </programlisting>

    <para xml:lang="es">En el correspondiente fichero <filename>OwnerBatchService_Roo_GvNIXJpaBatch.aj</filename>
    se generarán los siguientes métodos:

    <variablelist>
      <varlistentry>
       <term>deleteAll()</term>
       <listitem>
          <para xml:lang="es">Elimina todos los registro de la entidad.</para>
        </listitem>
      </varlistentry>

      <varlistentry>
       <term>deleteIn(List&lt;Long&gt; ids)</term>
       <listitem>
          <para xml:lang="es">Elimina los registro de la entidad cuyos indentificadores
          se encuentren en la lista <emphasis>ids</emphasis>.</para>
        </listitem>
      </varlistentry>

      <varlistentry>
       <term>deleteNotIn(List&lt;Long&gt; ids)</term>
       <listitem>
          <para xml:lang="es">Elimina los registro de la entidad cuyos indentificadores
          <emphasis>no</emphasis> se encuentren en la lista <emphasis>ids</emphasis>.</para>
        </listitem>
      </varlistentry>

      <varlistentry>
       <term>create(List&lt;Owner&gt; owners)</term>
       <listitem>
          <para xml:lang="es">Persiste como nuevos todos los elementos de la lista
          <emphasis>owners</emphasis>.</para>
        </listitem>
      </varlistentry>

      <varlistentry>
       <term>update(List&lt;Owner&gt; owners)</term>
       <listitem>
          <para xml:lang="es">Persiste todos los elementos de la lista
          <emphasis>owners</emphasis>.</para>
          <note>
            <para xml:lang="es"><emphasis>Importante:</emphasis> Si algún
            elemento de la lista no tiene establecido su campo de clave
            primaria o su campo de control de concurrencia (este último sólo si
            está definido) el registro <emphasis>se guardará como
            registro nuevo</emphasis>.</para>
          </note>
        </listitem>
      </varlistentry>

      <varlistentry>
       <term>findByValues(Map&lt;String,Object&gt; propertyValues)</term>
       <listitem>
          <para xml:lang="es">Devuelve una lista de elemento cuyas propiedades
          coincidan (se usa el operador <emphasis>igual a</emphasis>) con
          <emphasis>todos</emphasis> valores recibidos en <emphasis> propertyValues</emphasis>.
          </para>
        </listitem>
      </varlistentry>

      <varlistentry>
       <term>deleteByValues(Map&lt;String,Object&gt; propertyValues)</term>
       <listitem>
          <para xml:lang="es">Elimina todos elementos cuyas propiedades
          coincidan (se usa el operador <emphasis>igual a</emphasis>) con
          <emphasis>todos</emphasis> valores recibidos en <emphasis> propertyValues</emphasis>.
          </para>
        </listitem>
      </varlistentry>

    </variablelist>
    </para>

    <para xml:lang="es">Para poder usar este servicio en cualquier clase solo es
    necesario declarar una propiedad con la anotación <link href="http://docs.spring.io/spring/docs/3.0.x/javadoc-api/org/springframework/beans/factory/annotation/Autowired.html">
    @Autowire</link>. Spring se encarga de inyectar una instancia del servicio en la
    propiedad. Este sería un ejemplo de la declaración para usarlo:
    </para>

    <programlisting>class MyClass {

    @Autowire
    private OwnerBatchService ownerBatch;
    </programlisting>

    <para xml:lang="es">Todas las operaciones generadas (excepto <emphasis>findByValues</emphasis>)
    son <emphasis>transaccionales</emphasis>. Por lo que, si se produce un error
    en cualquier elemento afectado, <emphasis>la operación entera</emphasis> será
    abortada (no se guardarán los cambios)</para>

    <para xml:lang="es">Esta funcionalidad es requerida por otros add-ons como
    <link linkend="addon-web-mvc-datatables">Web Mvc datatables</link> para poder
    realizar operaciones sobre múltiples registros a la vez.
    </para>

    <para xml:lang="es">Para generar estos servicios se pueden utilizar los
    siguientes comandos:</para>

    <variablelist>
      <varlistentry>
        <term><command><link
        linkend="apendice-comandos_addon-jpa_jpa-batch_jpa-batch-add">
        jpa batch add</link></command></term>

        <listitem>
          <para xml:lang="es">Genera el servicio para una entidad.</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><command><link
        linkend="apendice-comandos_addon-jpa_jpa-batch_jpa-batch-all">
        jpa batch all</link></command></term>

        <listitem>
          <para xml:lang="es">Genera el servicio para todas
          las entidades de la aplicación.</para>
        </listitem>
      </varlistentry>
    </variablelist>
  </section>

  <section xml:id="addon-jpa_query">
    <title>Información adicional para búsquedas por relaciones</title>

    <para xml:lang="es">Esta funcionalidad permite definir información
    adicional sobre las propiedades de la entidad que declaran una relación que
    permiten realizar búsquedas y ordenaciones sobre ella.</para>

    <para xml:lang="es">Esta información se utiliza actualmente
    para permitir realizar búsquedas de texto dentro de entidades relacionadas
    y su ordenación cuando se usa el
    <link linkend="apendice-comandos_addon-web-mvc-datatables">
    add-on web mvc datatables</link>.</para>

    <para xml:lang="es">No tiene implementado ningún comando. Funciona
    añadiendo la anotación <emphasis>GvNIXJpaQuery</emphasis> a la propiedad.
    Por ejemplo, para permitir que, desde el listado de <emphasis>Pet</emphasis>,
    sea posible buscar por el nombre y apellido de su <emphasis>Owner</emphasis>
    y cuando se ordene por su columna se utilicen los mismos campos,
    deberíamos añadir la siguiente anotación:</para>

    <programlisting>
....
public class Pet {
    ....
    ....

    @GvNIXJpaQuery(filterBy={"lastName","firstName"}, orderBy={"lastName","firstName"})
    @ManyToOne
    private Owner owner;

    </programlisting>

  </section>
  <section xml:id="addon-jpa_audit">
  	<title>Auditoría y resgistro de cambios de entidades</title>

    <para xml:lang="es">Esta funcionalidad añade soporte para hacer auditoría (registrar
    quíen y cuándo se crea o modifica un resigtro) de entidades y, opcionalmente, registrar
    cada uno de los cambios de las modificaciones sufridas por los registros de la
    entidad.</para>
    
    <section xml:id="addon-jpa_audit-setup">
      <title>Configurar detalles de usuario</title>
      <para xml:lang="es">Es posible configurar la clase que proveerá
      el nombre de usuario que realiza un cambio. Para ello se ejecuta el siguiente comando:</para>
      <variablelist>
      
        <varlistentry>
          <term><command><link
          linkend="apendice-comandos_addon-jpa_jpa-audit_jpa-audit-setup">
          jpa audit setup</link></command></term>
          <listitem>
            <para xml:lang="es">Configura la auditoría de historico creando la clase que proveerá del
             nombre de usuario que realiza el cambio. Sólo se puede ejecutar una vez. </para>
          </listitem>
        </varlistentry>
        
       </variablelist>
    </section>

    <section xml:id="addon-jpa_audit-basic">
      <title>Auditoría básica de entidades</title>

      <para xml:lang="es">Para añadir la auditoría a las entidades se pueden utilizar los
      siguientes comandos:</para>
      <variablelist>
        <varlistentry>
          <term><command><link
          linkend="apendice-comandos_addon-jpa_jpa-audit_jpa-audit-add">
          jpa audit add</link></command></term>

          <listitem>
            <para xml:lang="es">Añade auditoría para una entidad.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><command><link
          linkend="apendice-comandos_addon-jpa_jpa-audit_jpa-audit-all">
          jpa audit all</link></command></term>

          <listitem>
            <para xml:lang="es">Añade auditoría para todas
            las entidades de la aplicación.</para>
          </listitem>
        </varlistentry>
      </variablelist>
      
      <para xml:lang="es">Al instalar la auditoría en un proyecto gvNIX se creará una clase (con el nombre
      facilitado en el parámetro <emphasis>--service</emphasis>) anotada con <emphasis>@GvNIXJpaAuditUserService</emphasis>, se incluirá 
      el siguiente método (en su correspondiente fichero <emphasis>.aj</emphasis>) para obtener los 
      datos del Usuario:</para>
      
      <variablelist>
        <varlistentry>
          <term>getUser()</term>
          <listitem>
            <para xml:lang="es">Devolverá el tipo facilitado en el parámetro <emphasis>--userType</emphasis>.
            En caso de no definir ninguno, devolverá un tipo <emphasis>String</emphasis></para>
          </listitem>
        </varlistentry>
      </variablelist>

      <para xml:lang="es">Al activar al auditoría sobre una entidad, que serán marcadas con
      la anotación <emphasis>GvNIXJpaAudit</emphasis>, se le incluirán las
      siguientes propiedades (en su correspondiente fichero <emphasis>.aj</emphasis>) para
      almacenar los datos de auditoría:</para>

      <variablelist>
        <varlistentry>
          <term>auditCreation</term>
          <listitem>
            <para xml:lang="es">Fecha de creación del elemento.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>auditCreatedBy</term>
          <listitem>
            <para xml:lang="es">Usuario que creó el elemento.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>auditLastUpdate</term>
          <listitem>
            <para xml:lang="es">Fecha de la última modificación del elemento.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>auditLastUpdatedBy</term>
          <listitem>
            <para xml:lang="es">Último usuario que modificó el elemento.</para>
          </listitem>
        </varlistentry>
      </variablelist>

      <para xml:lang="es">Hay que tener en cuenta que este add-on no provee lógica de pintado,
      pero estas propiedades serán añadidas de forma automática a las
      correspondientes vistas si se han generado, o se generan, utilizando
      las funcionalidades de generación automática.</para>
      <note>En las vistas generadas de forma automática para la
      creación y actualización de elementos puede ser interesante
      realizar cambios de forma manual para que estos campos no
      sean rellenados o modificado por el usuario.</note>
      <note>Para evitar la pérdida de los datos de creación, en las vistas
      generadas de forma automática para la actualización <emphasis>
      incluir los datos de auditoría como campos ocultos en el
      formulario</emphasis>. Si no se incluyen estos campos en las peticiones puede
      perderse sus valores en el proceso de <emphasis>binding</emphasis>
      de los objetos recibidos</note>
      <note>Es muy importante <emphasis>no utilizar</emphasis> actualizaciones/eliminaciones 
      del estilo <emphasis>em.createQuery("UPDATE Country SET population = 0, area = 0");</emphasis>
       ya que los cambios aplicados no serán registrados por la auditoría.</note>

      <para xml:lang="es">
      Para mantener esta información acutalizada se genera un clase, anotada
      con <emphasis>GvNIXJpaAuditListener</emphasis>, que será
      registrada como <emphasis>EntityListener</emphasis>
      de la librería <emphasis>JPA</emphasis>. Una instancia de
      esta clase será llamada cada vez que un elemento de la entidad
      sea creado/modificado.
      </para>

      <para xml:lang="es">
      Esta clase tendrá implementados los siguientes métodos:
      </para>
      <variablelist>
        <varlistentry>
          <term>onCreate</term>
          <listitem>
            <para xml:lang="es">Método llamado antes de la creación de un registro. Rellena
            todos los campos de auditoría de la entidad (creación y actualización).</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>onUpdate</term>
          <listitem>
            <para xml:lang="es">Método antes de la actualización de un registro. Rellena
            los campos de auditoría correspondientes a la última actualización.</para>
            <note>Este método <emphasis>sólo será llamado</emphasis> después de un
            <emphasis><command>merge</command></emphasis> <emphasis>si el registro a sufrido
            modificaciones en sus datos</emphasis>.</note>
          </listitem>
        </varlistentry>
      </variablelist>

      <para xml:lang="es">
      Las clases <emphasis>EntityListener</emphasis> requeridas por esta funcionalidad
      se registran de forma automática en el fichero
      <filename>src/main/resources/orm.xml</filename> del proyecto.
      </para>
    </section>
    <section xml:id="addon-jpa_audit-revision_log">
      <title>Auditoría y registro de cambios de entidades</title>

      <para xml:lang="es">
      Esta funcionalidad almacena todos los cambios sufridos por las entidades auditadas
      de forma que sea posible identificar qué, quién y cuándo se produjeron. Esto incluye
      las eliminaciones de los registros. Esta funcionalidad sólo se aplica a aquellas
      entidades marcadas con la anotación <emphasis>GvNIXJpaAudit</emphasis> (ver <link
        linkend="addon-jpa_audit-basic">
        Auditoría básica de entidades</link>)
      </para>
      
      <note>En caso de <emphasis>actualizar</emphasis> o <emphasis>eliminar</emphasis> registros
      mediante el uso de <emphasis>executeQuery</emphasis> no se almacenarán los cambios sufridos
      por las entidades auditadas. Esto se debe a que no se dispararán los <emphasis>listeners</emphasis>
      necesarios para llevar a cabo este proceso.</note>

      <para xml:lang="es">
      Ya que esta funcionalidad puede implementarse de distinta forma, incluso dependiendo
      de la implementación de JPA que se esté utilizando en el proyecto, para empezar a
      utilizarla es necesario seleccionar un <emphasis>proveedor</emphasis>. Esto proveedores
      deben de estar instalados como add-on en el framework.</para>

      <para xml:lang="es">Para seleccionar el proveedor de registro de cambios se
      debe utilizar el siguiente comando:</para>
      <variablelist>
        <varlistentry>
          <term><command><link
          linkend="apendice-comandos_addon-jpa_jpa-audit_jpa-audit-revisionlog">
          jpa audit revisionLog</link></command></term>

          <listitem>
            <para xml:lang="es">Selecciona el proveedor de registro de cambios a usar.</para>
          </listitem>
        </varlistentry>
      </variablelist>

      <para xml:lang="es">Al activar el proveedor, se instalarán las librerías requeridas y
      se creará una clase que representará el registro índice de cambios
      en la aplicación. Esta clase será anotada con <emphasis>GvNIXJpaAuditRevisionEntity</emphasis>
      sus métodos y propiedades serán generados por el proveedor.</para>

      <para xml:lang="es">Para aquellas entidades anotadas con <emphasis>GvNIXJpaAudit</emphasis> y
      cuyo valor <emphasis>storeRevisionLog</emphasis> sea el adecuado (<emphasis>YES</emphasis>
       o <emphasis>PROVIDER_DEFAULT/null</emphasis> y la opción por defecto del proveedor
       sea activar el registro) se generarán en el <emphasis>.aj</emphasis> los siguientes
       métodos:</para>
      <variablelist>
        <varlistentry>
          <term>findAll<emphasis>Entidad</emphasis></term>
          <listitem>
            <para xml:lang="es">Devuelve la lista de todos elementos de la entidad, al estado
            en el que estuviesen en una fecha en concreto o en un número revisión.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>find<emphasis>Entidad</emphasis></term>
          <listitem>
            <para xml:lang="es">Devuelve una entidad por código en el estado que estuviese
            en un fecha en concreto o en un número de revisión</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>get<emphasis>Entidad</emphasis>Revisions</term>
          <listitem>
            <para xml:lang="es">Devuelve una lista de <emphasis>elementos de revisión</emphasis> de
            la entidad entre fechas o números de revisión para un elemento en concreto, pudiendo
            especificar números de registros a devolver.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>getRevisionNumberForDate</term>
          <listitem>
            <para xml:lang="es">Devuelve el identificador de revisión activo a una fecha.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>find<emphasis>Entidad</emphasis>RevisionsByDates</term>
          <listitem>
            <para xml:lang="es">Devuelve una lista de <emphasis>elementos de revisión</emphasis>
            de la entidad entre fechas, pudiendo especificar filtros, ordenación y
            números de registros a devolver.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>find<emphasis>Entidad</emphasis>Revisions</term>
          <listitem>
            <para xml:lang="es">Devuelve una lista de <emphasis>elementos de
            revisión</emphasis> de la entidad
            entre números de revisión, pudiendo especificar filtros, ordenación y
            números de registros a devolver.</para>
          </listitem>
        </varlistentry>
      </variablelist>

      <para xml:lang="es">Varios de los métodos arriba descritos devuelven
      <emphasis>elementos de revisión</emphasis>. Este elemento es una clase declarada
      para añadir información adicional a la entidad sobre los cambios producidos
      en una revisión del elemento de la entidad. Esta clase se generará en el
      fichero <emphasis>.aj</emphasis> de la entidad y tendrá los siguientes
      métodos:</para>
      <variablelist>
        <varlistentry>
          <term>getItem</term>
          <listitem>
            <para xml:lang="es">Devuelve el objeto en el estado (valores de sus datos)
            en una revisión.</para>
            <note>Para el registro de cambios de eliminación, el estado devuelto por este
            método será el estado anterior a la eliminación
            (los valores antes que tenía el elemento cuando fue eliminado).</note>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>getRevisionNumber</term>
          <listitem>
            <para xml:lang="es">Devuelve el identificador de la revisión.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>getRevisionUserName</term>
          <listitem>
            <para xml:lang="es">Devuelve el nombre del usuario que realizó los cambios
            registrados.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>getRevisionDate</term>
          <listitem>
            <para xml:lang="es">Devuelve la fecha en el que se registraron los cambios.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>isCreate</term>
          <listitem>
            <para xml:lang="es">Informa si tipo de cambio registrado en este elemento es una
            <emphasis>creación</emphasis>.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>isUpdate</term>
          <listitem>
            <para xml:lang="es">Informa si tipo de cambio registrado en este elemento es una
            <emphasis>actualización</emphasis>.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>isDelete</term>
          <listitem>
            <para xml:lang="es">Informa si tipo de cambio registrado en este elemento es una
            <emphasis>eliminación</emphasis>.</para>
            <note>Para estos casos, el estado devuelto por el método
            <emphasis>getItem()</emphasis> será el estado anterior a la eliminación
            (los valores antes que tenía el elemento cuando fue eliminado).</note>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>getType</term>
          <listitem>
            <para xml:lang="es">Devuelve una cadena que representa el tipo
            de cambio del registro: <emphasis>CREATE</emphasis>,
            <emphasis>UPDATE</emphasis> o <emphasis>DELETE</emphasis>.</para>
          </listitem>
        </varlistentry>
      </variablelist>

      <para xml:lang="es">Además de lo métodos aquí descritos, cada proveedor puede incluir
      métodos necesario para dar soporte a su funcionalidad.
      </para>
    </section>

    <section xml:id="addon-jpa_audit-revision_log-envers">
      <title>Proveedor de registro de cambios Hibernate Envers</title>

      <para xml:lang="es">Esta implementación de provee la funcionalidad de
      gestión de revisiones basada en el el módulo de la implementación de JPA
      <link xlink:href="http://docs.jboss.org/hibernate/orm/4.2/devguide/en-US/html/index.html">Hibernate</link>
      denominado <link
        xlink:href="http://docs.jboss.org/hibernate/orm/4.2/devguide/en-US/html/ch15.html">Envers</link>.
      </para>

      <para xml:lang="es">Para seleccionar este proveedor hay que ejecutar el comando:
      <command>jpa audit revisionLog --provider H-ENVERS</command>
      </para>

      <para xml:lang="es">Lógicamente, al ser un módulo de <emphasis>Hibernate</emphasis>, este
      proveedor de gestión de revisiones <emphasis>sólo estará disponible en aquellos proyectos cuyo
      proveedor de persistencia sea Hibernate</emphasis>.</para>

      <para xml:lang="es">Las características de este proveedor son:</para>
      <itemizedlist>
        <listitem>
          <para xml:lang="es">Mantiene el estado de relaciones (siempre que ambas entidades
          estén gestionadas).</para>
        </listitem>
        <listitem>
          <para xml:lang="es">Los estados se mantienen en tablas adjuntas a las auditadas.</para>
        </listitem>
        <listitem>
          <para xml:lang="es">Soporta búsquedas en el histórico utilizando su propio API. Esto tiene
          la limitación de únicamente poder filtrar sobre los datos de la entidad principal de la
          búsqueda (en la implementación actual, aunque en la documentación comentan que en
          un futuro habrá soporte para filtrar por las relaciones).</para>
        </listitem>
      </itemizedlist>

      <para xml:lang="es">En los proyectos en los que <emphasis>Spring Security</emphasis>
      sea el proveedor de seguridad, el proveedor ya genera el código necesario, en la
      clase <emphasis>RevisionEntity</emphasis> para obtener el usuario que está
      realizando el cambio. Para el resto, será necesario realizar un
      <emphasis>push-in</emphasis> de la clase <emphasis>RevisionLogEntityListener</emphasis>
      y ajustar la implementación del método <emphasis>newRevision</emphasis>.</para>

      <para xml:lang="es">Para acceder a la API de lectura de <emphasis>Envers</emphasis>
      se genera un método estático en las entidad con el soporte establecido llamado
      <emphasis>auditReader</emphasis>. Para ver mas información sobre el uso de
      <emphasis>AuditEntityReader</emphasis> ver la documentación de el
      JavaDoc de la clase o la documentación del módulo <emphasis>Envers</emphasis>.</para>

    </section>
  </section>
  <section xml:id="addon-jpa_geo">
  	<title>Persistencia de entidades con campos de tipo geográfico</title>

    <para xml:lang="es">Esta funcionalidad permite guardar entidades con campos de tipo geográfico.</para>
    
    <section xml:id="addon-jpa_geo-setup">
      <title>Configuración del proyecto para soporte geográfico</title>
      <para xml:lang="es">Para poder guardar entidades con campos de tipo GEO es necesario configurar
      el proyecto generado. Para ello se ejecuta el siguiente comando:</para>
      <variablelist>
      
        <varlistentry>
          <term><command><link
          linkend="apendice-comandos_addon-jpa_jpa-geo_jpa-geo-setup">
          jpa geo setup</link></command></term>
          <listitem>
            <para xml:lang="es">Configura el proyecto para poder guardar entidades con campos de tipo 
            geográfico. Este comando solo funcionará si se ha instalado persistencia en el proyecto con
            proveedor <emphasis>HIBERNATE</emphasis> y se ha seleccionado una de las siguientes 
            bases de datos:
           	<itemizedlist>
       			<listitem>
       				<para xml:lang="es">POSTGRES</para>
       			</listitem>
       			<listitem>
       				<para xml:lang="es">MYSQL</para>
       			</listitem>
       			<listitem>
       				<para xml:lang="es">ORACLE</para>
       			</listitem>
       			<listitem>
       				<para xml:lang="es">MSSQL</para>
       			</listitem>
  			</itemizedlist>
            </para>
          </listitem>
        </varlistentry>
        
       </variablelist>
    </section>
    
    <section xml:id="addon-jpa_geo-field_geo">
      <title>Añadir campos de tipo geográfico a entidades</title>
      <para xml:lang="es">Una vez configurado el proyecto para poder guardar entidades con campos de tipo
      geográfico, ya es posible añadir campos de tipo geográfico a las entidades. Para poder añadir
      estos nuevos tipos de campo, es necesario ejecutar este comando:</para>
      <variablelist>
      
        <varlistentry>
          <term><command><link
          linkend="apendice-comandos_addon-jpa_jpa-geo_field-geo">
          field geo</link></command></term>
          <listitem>
            <para xml:lang="es">Añade un nuevo campo de tipo GEO a la entidad seleccionada. Los nuevos campos
            añadidos pueden ser de los siguientes tipos: 
           	<itemizedlist>
       			<listitem>
       				<para xml:lang="es">POINT (Se guarda un único punto en la base de datos)</para>
       			</listitem>
       			<listitem>
       				<para xml:lang="es">LINESTRING (Se guardan una serie de puntos que forman una linea continua)</para>
       			</listitem>
       			<listitem>
       				<para xml:lang="es">MULTILINESTRING (Se guardan una serie de puntos que forman varias lineas continuas)</para>
       			</listitem>
       			<listitem>
       				<para xml:lang="es">POLYGON (Se guardan una serie de puntos que forman un polígono. Siempre empieza y acaba en el mismo punto.)</para>
       			</listitem>
       			<listitem>
       				<para xml:lang="es">GEOMETRY (Se guarda una serie de puntos que forman una geometría. Acepta cualquiera de las geometrías anteriores.)</para>
       			</listitem>
  			</itemizedlist>
            </para>
            <para>A cada campo GEO se le podrá espeficicar un sistema de referencia de cooordenadas (SRS) personalizado, el que utilizará para mostarse sobre el mapa. <link xlink:href="http://www.epsg-registry.org/">Registro de sistemas de referencia de coordenadas</link> Si no se especifica ninguno, se utilizará el por defecto de los mapas (3857)</para>
          </listitem>
        </varlistentry>
        
       </variablelist>
    </section>
    
    <section xml:id="addon-jpa_geo-finder_geo">
      <title>Implementación de buscadores para campos GEO</title>
      <para xml:lang="es">Para poder realizar búsquedas sobre campos de tipo GEO es necesario generar una 
      serie de métodos. Para ello se ejecutan los siguientes comandos:</para>
      <variablelist>
      
        <varlistentry>
          <term><command><link
          linkend="apendice-comandos_addon-jpa_jpa-geo_finder-geo-all">
          finder geo all</link></command></term>
          <listitem>
            <para xml:lang="es">Genera los buscadores de todos los campos de tipo GEO de <emphasis>todas</emphasis> 
            las entidades registradas en el proyecto.</para>
          </listitem>
        </varlistentry>
        
        
        <varlistentry>
          <term><command><link
          linkend="apendice-comandos_addon-jpa_jpa-geo_finder-geo-add">
          finder geo add</link></command></term>
          <listitem>
            <para xml:lang="es">Genera los buscadores para los campos de tipo GEO seleccionados de la entidad
            seleccionada.</para>
          </listitem>
        </varlistentry>
        
       </variablelist>

       <para xml:lang="es">Los buscadores generados incluyen un parámetro <emphasis>GeometryFilter</emphasis>, que podrá ser usado para establecer un filtro específico para una geometría (equals, intersects, touches, etc. ). Para modificar estos métodos será necesarios hacer un <emphasis>push-in</emphasis> de los mismos.</para>
  
    </section>
    
  </section>
</chapter>
