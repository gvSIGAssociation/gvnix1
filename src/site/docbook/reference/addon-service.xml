<?xml version="1.0" encoding="UTF-8"?>
<chapter version="5.0" xml:id="addon-service" xml:lang="es"
         xmlns="http://docbook.org/ns/docbook"
         xmlns:xlink="http://www.w3.org/1999/xlink"
         xmlns:ns5="http://www.w3.org/1998/Math/MathML"
         xmlns:ns4="http://www.w3.org/2000/svg"
         xmlns:ns3="http://www.w3.org/1999/xhtml"
         xmlns:ns="http://docbook.org/ns/docbook">
  <title xml:lang="es">Add-on Service</title>

    <para xml:lang="es">Permite crear servicios locales, servidores de
    servicios web y clientes de servicios web de forma automática.</para>

  <section xml:id="addon-service_descripcion">
    <title xml:lang="es">Descripción</title>

	<para xml:lang="es">Permite crear de forma automática servicios locales,
	servidores de servicios web a partir de un método del
	código fuente, crear servidores de servicios web basándose
	en un archivo de descripción de servicios <emphasis>WSDL</emphasis> y crear clientes de servicios
	web a partir de un archivo de descripción de servicios <emphasis>WSDL</emphasis>.</para>

    <para xml:lang="es">La creación de servicios, del mismo modo que todas las 
    funcionalidades que proporciona el framework, se realiza mediante anotaciones.
    Para simplificar esta tarea se puede hacer uso de los comandos que
    ofrece. A medida que se van ejecutando comandos del add-on, se van
    modificando anotaciones y métodos de la clase Java de forma que acabará
    conformando el servicio web que se desea publicar.</para>

  </section>

  <section xml:id="addon-service_crear-local">
      <title xml:lang="es">Creación de servicios locales</title>

      <para xml:lang="es">Un servicio local es una clase Java con una serie de métodos
      que se desea que estén disponibles de forma interna para toda la aplicación. La clase
      se puede crear con el comando <link linkend="apendice-comandos_addon-service_class">
      remote service class</link>.</para>
      
      <programlisting>roo-gvNIX> <command>remote service class --class ~.service.Service</command>
Created SRC_MAIN_JAVA/org/gvnix/test/service/Service.java</programlisting>
      
      <para xml:lang="es">La ejecución del comando creará una clase en la ruta
      especificada con la anotación <emphasis>@Service</emphasis> que le
      proporciona unas características especiales y facilita su uso como servicio
      local dentro de la aplicación.</para>
      
      <programlisting>...
@Service
public class Service {
}</programlisting>
		
	  <para xml:lang="es">De esta forma, el servicio puede ser utilizar desde
	  cualquier otra clase Java definiendo una propiedad del tipo de la clase
	  de servicio con la anotación <emphasis>@Autowired</emphasis>.</para>
	  
	  <programlisting>@Autowired
Service service;</programlisting>
      
      <para xml:lang="es">Una vez creada la clase se pueden crear los métodos que se
      desea ofrecer en el servicio. Los métodos se pueden crear mediante el comando
      <link linkend="apendice-comandos_addon-service_operation">remote service
      operation</link> que permite añadir métodos en una clase.</para>
      
      <programlisting>roo-gvNIX> <command>remote service operation</command> --name myMethod --service ~.service.Service
		--return java.lang.Long --paramNames param1,param2
		--paramTypes "java.lang.String,java.util.List"
Updated SRC_MAIN_JAVA/org/gvnix/test/service/Service.java</programlisting>
      
      <para xml:lang="es">El comando anterior creará el método con las características
      solicitadas en la clase que se le indica como parámetro.</para>
      
      <programlisting>public Long myMethod(String param1, List param2) {
  return null;
}</programlisting>
      
      <para xml:lang="es">Como se puede observar, la implementación del método
      está vacía y como es obvio deberá ser definida por el desarrollador.</para>
      		
  </section>
  
  <section xml:id="addon-service_crear-desde-java">
      <title xml:lang="es">Creación de servidores desde Java</title>
      
      <para xml:lang="es">Permite que los métodos de una clase Java puedan ser
      accedidos desde el exterior mediante operaciones de un servicio web.</para>

      <para xml:lang="es">En primer lugar se debe elegir una clase Java que contendrá los
      métodos que se desea ofrecer al exterior mediante el servicio web. La clase puede ser
      cualquiera existente previamente o se puede crear una nueva mediante el comando <link
      linkend="apendice-comandos_addon-service_class">remote service class</link>.</para>
      
      <para xml:lang="es">A continuación, se debe elegir los métodos a
      ofrecer a través del servicio web. Si todavía no existen,
      se pueden crear mediante el comando <link 
      linkend="apendice-comandos_addon-service_operation">remote service
      operation</link>.</para>

      <para xml:lang="es">De momento la clase no es accesible mediante
      un servicio web. Para ello se debe ejecutar el comando <link
      linkend="apendice-comandos_addon-service_define_ws">remote service define
      ws</link>.</para>
      
      <programlisting>roo-gvNIX> <command>remote service define ws --class ~.service.Service</command>
Updated ROOT/pom.xml [
		added repository http://repository.gvnix.org; 
		added dependency org.gvnix:org.gvnix.service.roo.addon:X.Y.Z; 
		added plugin org.apache.cxf:cxf-java2ws-plugin:${cxf.version}]
Created SRC_MAIN_WEBAPP/WEB-INF/cxf-appname.xml
Updated SRC_MAIN_WEBAPP/WEB-INF/web.xml
Creating a new class 'Service' to export web service.
Created SRC_MAIN_JAVA/org/gvnix/test/service/Service.java
Updated SRC_MAIN_JAVA/org/gvnix/test/service/Service.java
Updated ROOT/pom.xml [
		added dependency org.apache.cxf:cxf-rt-core:${cxf.version};
		added dependency org.apache.cxf:cxf-rt-bindings-soap:${cxf.version};
		added dependency org.apache.cxf:cxf-rt-databinding-jaxb:${cxf.version};
		added dependency org.apache.cxf:cxf-rt-frontend-jaxws:${cxf.version};
		added dependency org.apache.cxf:cxf-rt-transports-http:${cxf.version};
		added dependency javax.xml.bind:jaxb-api:2.1;
		added dependency javax.xml.ws:jaxws-api:2.1;
		added property 'cxf.version' = '2.4.2']
Updated SRC_MAIN_WEBAPP/WEB-INF/cxf-petclinic.xml
Updated ROOT/pom.xml
Created SRC_MAIN_JAVA/org/gvnix/test/service/Service_Roo_GvNix_WebService.aj
* New service defined without operations, use 'service export operation' command to add it
* New service can be shown adding '/services/' suffix to your base application URL</programlisting>

	  <para xml:lang="es">El comando incluirá la anotación <emphasis>@GvNIXWebService</emphasis>
      en la clase Java indicada. También generará los componentes necesarios para exponer la
      clase como un servicio web a partir de los atributos de la anotación.</para>
      
      <programlisting>...
@GvNIXWebService(name = "ServicePortType",
		targetNamespace = "http://service.test.gvnix.org/",
		serviceName = "Service", address = "Service",
		fullyQualifiedTypeName = "org.gvnix.test.service.Service", exported = false)
public class Service {
}</programlisting>
      
      <para xml:lang="es">La clase Java será enlazada en la definición del servicio
      con un <emphasis>PortType</emphasis> lo que permitirá la comunicación 
      con la clase desde el exterior mediante los protocolos y tecnologías de
      servicios web.</para>
      
      <programlisting>privileged aspect Service_Roo_GvNix_WebService {
declare @type: Service: @WebService(name = "ServicePortType",
		targetNamespace = "http://service.test.gvnix.org/",
		serviceName = "Service", portName = "ServicePortType");
declare @type: Service: @SOAPBinding(style = Style.DOCUMENT, use = Use.LITERAL, 
		parameterStyle = ParameterStyle.WRAPPED);
}</programlisting>

      <para xml:lang="es">En este momento el servicio web ya está publicado y es accesible,
      sin embargo no dispondrá de ninguna operación ya que por defecto todos
      los métodos de la clase publicada son configurados inicialmente como no accesibles
      por motivos de seguridad. Se podrá hacer accesible
      cada uno de los métodos de la clase por separado mediante el 
      comando <link linkend="apendice-comandos_addon-service_export_operation">remote service
      export operation</link></para>
      
      <programlisting>roo-gvNIX> <command>remote service export operation --class ~.service.Service --method method</command>
Updated SRC_MAIN_JAVA/org/gvnix/test/service/Service.java
Updated SRC_MAIN_WEBAPP/WEB-INF/cxf-appname.xml
Updated ROOT/pom.xml
Deleted SRC_MAIN_JAVA/org/gvnix/test/service/Service.java
Created SRC_MAIN_JAVA/org/gvnix/test/service/Service.java
Created SRC_MAIN_JAVA/org/gvnix/test/service/Service_Roo_GvNix_WebService.aj
Updated SRC_MAIN_JAVA/org/gvnix/test/service/Service_Roo_GvNix_WebService.aj
      </programlisting>
      
      <para xml:lang="es">El comando anterior añade la anotación <emphasis>@GvNIXWebMethod
      </emphasis> al método, de forma que que se generará el código necesario para que
      la operación esté disponible en el servicio web.</para>

      <programlisting>@GvNIXWebMethod(operationName = "method", requestWrapperName = "method",
      		requestWrapperNamespace = "http://service.test.gvnix.org/",
      		requestWrapperClassName = "org.gvnix.test.service.MethodRequestWrapper",
      		resultName = "return", resultNamespace = "http://service.test.gvnix.org/",
      		webResultType = Long.class, responseWrapperName = "methodResponse",
      		responseWrapperNamespace = "http://service.test.gvnix.org/",
      		responseWrapperClassName = "org.gvnix.test.service.MethodResponse")
public Long method(@GvNIXWebParam(name = "param1", type = String.class) 
		@WebParam(name = "param1", partName = "parameters", mode = Mode.IN, header = false)
		String param1,
		@GvNIXWebParam(name = "param2", type = List.class)
		@WebParam(name = "param2", partName = "parameters", mode = Mode.IN, header = false)
		List param2) {
    return null;
}</programlisting>

    <para xml:lang="es">Como es obvio, el método no dispone de ningún código 
    en su cuerpo y será responsabilidad del desarrollador el implementar la lógica
    de negocio que sea necesaria.</para>

  </section>

  <section xml:id="addon-service_crear-desde-wsdl">
  
      <title xml:lang="es">Creación de servidores desde WSDL</title>

      <para xml:lang="es">Existe otro modo para crear servidores de 
      servicios web. Consiste en ofrecer al exterior un servicio web partiendo de un
      archivo de contrato de servicio conocido como <emphasis>WSDL</emphasis>. Con el comando <link
      linkend="apendice-comandos_addon-service_export_ws">remote service export
      ws</link> se proporciona la ruta a un archivo <emphasis>WSDL</emphasis>
      y se generará una réplica del servicio en la que las operaciones
      son métodos vacios que posteriormente deberán
      ser personalizadas con la lógica de negocio adecuada.</para>
      
      <programlisting>roo-gvNIX> <command>remote service export ws --wsdl ruta</command></programlisting>
      
      <para xml:lang="es">La ruta al <emphasis>WSDL</emphasis> puede ser un archivo local 
      mediante <emphasis>file://ruta</emphasis>, una dirección web mediante
      <emphasis>http://ruta</emphasis> o una dirección web segura mediante
      <emphasis>https://ruta</emphasis>.</para>
      
      <para xml:lang="es">Este modo es especialmente cómodo para realizar
      la migración de servicios que están implementados en otras aplicaciones
      o tecnologías o que se desean integrar en otra aplicación.</para>
  </section>

    <section>
      <title xml:lang="es">Creación de clientes</title>

      <para xml:lang="es">Es posible generar un cliente que permita realizar
      peticiones a un servicio web remoto existente utilizando para ello el comando <link
      linkend="apendice-comandos_addon-service_import_ws">remote service import
      ws</link>. Facilitando la ruta a un <emphasis>WSDL</emphasis>, se generará una clase 
      en la ruta que se especifique y que contendrá los métodos del cliente que darán
      acceso al servicio web remoto.</para>
      
      <programlisting>remote service import ws --class org.gvnix.test.service.Service
      		--wsdl ruta
Created SRC_MAIN_JAVA/org/gvnix/test/service/
Created SRC_MAIN_JAVA/org/gvnix/test/service/Service.java
Updated SRC_MAIN_JAVA/org/gvnix/test/service/Service.java
Updated ROOT/pom.xml [
		added dependency org.hibernate.javax.persistence:hibernate-jpa-2.0-api:1.0.0.Final;
		removed dependency org.hibernate.javax.persistence:hibernate-jpa-2.0-api:1.0.1.Final;
		added plugin org.apache.cxf:cxf-codegen-plugin:${cxf.version}]
Updated ROOT/pom.xml
</programlisting>

	  <para xml:lang="es">El comando dará lugar a la creación, si no existía, de
	  la clase Java y a la inclusión de la anotación <emphasis>@GvNIXWebServiceProxy
	  </emphasis> que define el servicio web al que da acceso la clase.</para>

	  <programlisting>...
@Service
@GvNIXWebServiceProxy(wsdlLocation = "ruta")
public class Service {
}</programlisting>

	  <para xml:lang="es">La anotación desencadenará la creación en el aspecto
	  Java correspondiente de tantos métodos como operaciones ofrece el
	  servicio web y que enmascaran la comunicación con el sistema
	  remoto.</para>

	  <programlisting>privileged aspect Service_Roo_GvNix_WebServiceProxy {
	  
	public String Service.method(String param1) {
			org.web.service.RemoteService s = new org.web.service.RemoteService();
		org.web.service.RemoteServiceSoap p = s.getRemoteServiceSoap12();
		return p.method(param1);
	}

}</programlisting>

      <para xml:lang="es">Esta clase se podrá utilizar como si de un
      servicio local se tratase. Para usar esta clase simplemente habrá que crear
      una propiedad en la clase donde se desea hacer uso de ella y añadirle
      la anotación <emphasis>@Autowired</emphasis>.</para>

      <programlisting>public class MyClass {
  ...
  @Autowired
  private Service service;
  ...
  public void myMethod() {
    ...
    service.method(..);
    ...
  }
}</programlisting>

      <para xml:lang="es">La ruta al <emphasis>WSDL</emphasis> puede ser un archivo local 
      mediante <emphasis>file://ruta</emphasis>, una dirección web mediante
      <emphasis>http://ruta</emphasis> o una dirección web segura mediante
      <emphasis>https://ruta</emphasis>.</para>

	</section>
    <section>
      <title xml:lang="es">Acceso a un WSDL en un servidor seguro</title>

      <para xml:lang="es">Cuando el <emphasis>WSDL</emphasis> se encuentra en un
      archivo local o en un servidor no seguro como HTTP, se puede acceder
      directamente sin ningún problema.</para>

      <para xml:lang="es">En el caso que un <emphasis>WSDL</emphasis>
      se encuentra en un servidor seguro al que se
      accede mediante HTTPS pueden darse dos posibles escenarios:</para>

      <orderedlist>
        <listitem>
          <para xml:lang="es">El certificado del servidor ha sido creado por una <emphasis
          role="bold">Autoridad de certificación (CA) confiable por la
          JVM</emphasis>.</para>

          <para xml:lang="es">En este caso, el procesado del <emphasis>WSDL</emphasis> funciona de la misma
          manera que en el caso de acceso por HTTP, transparente para el
          usuario.</para>
        </listitem>

        <listitem>
          <para xml:lang="es">El certificado de servidor ha sido creado por un <emphasis
          role="bold">CA no confiable</emphasis> (caso de certificados
          autofirmados).</para>

          <para xml:lang="es">Aquí, es responsabilidad del usuario el aceptar las
          credenciales del servidor para poder acceder al <emphasis>WSDL</emphasis>. Recordando
          como trabajan los navegadores web, cuando se intenta acceder a un
          recurso seguro, si el certificado del servidor no ha sido creado por
          un CA que se encuentre entre la lista de CAs conocida (Verisign,
          Thwate, Equfax, ...), el navegador muestra un mensaje de
          advertencia y pregunta si se desea confiar en la identidad del
          servidor. Cada usuario decide aceptar o no el certificado.</para>

          <para xml:lang="es">Para simplificar el proceso de importación de servicios web,
          se intenta hacer esta tarea de manera transparente para el usuario.</para>

          <para xml:lang="es">Para ello, se manipula el almacén de certificados de la
          máquina virtual Java siempre que sea posible. Esto es:</para>

          <orderedlist>
            <listitem>
              <para xml:lang="es">Existe el archivo de keystore en el directorio
              donde está instalado Java, por ejemplo en sistemas linux <emphasis> 
              $JAVA_HOME/jre/lib/security/cacerts</emphasis> y es modificable
              por el usuario del sistema que está ejecutando gvNIX.</para>
            </listitem>

            <listitem>
              <para xml:lang="es">La contraseña del <emphasis>keystore</emphasis> es
              changeit (la contraseña por defecto del keystore).</para>
            </listitem>
          </orderedlist>

          <para xml:lang="es">Si se puede modificar el keystore, se importarán los
          certificados implicados en la autenticación del servidor y entonces se
          podrá acceder al <emphasis>WSDL</emphasis> requerido para generar el cliente del
          WS.</para>

          <para xml:lang="es">Al mismo tiempo, se crea en
          <emphasis>src/main/resources</emphasis> una copia del almacén de
          certificados en el archivo gvnix-cacerts y una copia local de los
          certificados importados con el nombre
          <emphasis>&lt;servidor&gt;-&lt;indice_certificado&gt;.cer</emphasis>.
          De esta forma, los certificados pueden ser distribuidos con el resto
          de archivos del proyecto para que puedan ser instalados en otros
          entornos.</para>

          <para xml:lang="es">Si no puede modificar el keystore de la JVM, porque no
          se cumplen alguna de las 2 condiciones enumeradas anteriormente, de todas
          formas realizará la copia de los certificados necesarios para que sea el
          usuario quien instale los mismos en el almacén de certificados de su
          JVM. Para ello se puede hacer uso de la herramienta <link
          xlink:href="http://download.oracle.com/javase/6/docs/technotes/tools/solaris/keytool.html">keytool</link>
          (distribuida también con el JDK). La operación de importar los
          certificados equivale a la aceptación que se hace con el navegador.</para>
        </listitem>
      </orderedlist>

      <section>
        <title xml:lang="es">Creación de clientes con firma</title>

        <para xml:lang="es">El add-on permite añadir una
        firma digital a las peticiones realizadas a un servicio web
        externo que se encuentra importado en la aplicación.</para>

        <para xml:lang="es">Actualmente esta opción sólo está disponible para los servicio
        web que utilicen la librería Axis (RPC/Encoded). En futuras versiones se añadirá
        esta misma opción para servicios que utilicen la librería CXF (Document/Literal)
        y otra operaciones relacionadas con la seguridad en servicios web.</para>

        <para xml:lang="es">Para ello se debe disponer de:</para>

        <orderedlist>
          <listitem>
            <para xml:lang="es">Servicio web importado en la aplicación.</para>
          </listitem>

          <listitem>
            <para xml:lang="es">Fichero <emphasis>pkc12</emphasis> con el certificado a usar
            para firmar la petición.</para>
          </listitem>

          <listitem>
            <para xml:lang="es">Contraseña del certificado.</para>
          </listitem>

          <listitem>
            <para xml:lang="es">Alias a usar con el certificado</para>
          </listitem>
        </orderedlist>

        <para xml:lang="es">Disponiendo de esto elementos, se puede hacer uso del comando <link
        linkend="apendice-comandos_addon-service_security_ws">remote service
        security ws</link> para añadir la firma en las peticiones del cliente.</para>
        
        <programlisting>roo-gvNIX> <command>remote service security ws --class org.gvnix.test.service.Service
        		--alias alias --certificate /tmp/certificate.p12 --password clave</command>
Created ROOT/src/main/resources/org/gvnix/test/service
Created ROOT/src/main/resources/org/gvnix/test/service/certificate.p12
Updated SRC_MAIN_JAVA/org/gvnix/test/service/Service.java
Created ROOT/src/main/resources/client-config.wsdd
Created ROOT/src/main/resources/org/gvnix/test/service/ServiceSecurity.properties
Updated ROOT/pom.xml [added dependency org.apache.ws.security:wss4j:1.5.11]
Updated ROOT/src/main/resources/client-config.wsdd
Created SRC_MAIN_JAVA/org/gvnix/test/service/Service_Roo_GvNIX_WebSecurity.aj
</programlisting>

		<para xml:lang="es">Se crearán dos ficheros con distintos parámetros
		de configuración en <filename>src/main/resources/org/gvnix/test/service/ServiceSecurity.properties</filename>
		y <filename>src/main/resources/client-config.wsdd</filename>. El primero contiene los parámetros introducidos
		para la configuración de la seguridad y el segundo la configuración para axis.</para>

		<para xml:lang="es">También dará lugar a la inclusión de la
		anotación <emphasis>@GvNIXWebServiceSecurity</emphasis>.
		</para>
		
		<programlisting>...
@GvNIXWebServiceSecurity
public class Service {
}</programlisting>

		<para xml:lang="es">La anotación anterior dará lugar a la generación
		del aspecto Java correspondiente que establece la clave de acceso
		al certificado que se encuentra en el fichero <filename>ServiceSecurity.properties</filename>.</para>

		<programlisting><![CDATA[privileged aspect Service_Roo_GvNIX_WebSecurity {

    declare parents: Service implements CallbackHandler;

    public Service.new() {
        super();
    }

    public void Service.handle(Callback[] callbacks)
    		throws IOException, UnsupportedCallbackException {
        final String propPath = "org/gvnix/test/service/ServiceSecurity.properties";
        final String propKey = "org.apache.ws.security.crypto.merlin.keystore.password";
        try {
// Get class loader to get file from project            
            ClassLoader classLoader = Thread.currentThread().getContextClassLoader();
            java.io.File file = new java.io.File(classLoader.getResource(propPath).toURI());
            if (file != null && file.exists()) {
// Load properties                
                java.util.Properties properties = new java.util.Properties();
                java.io.FileInputStream ins = null;
                try {
                    ins = new java.io.FileInputStream(file);
                    properties.load(ins);
                } finally {
                    if (ins != null) {
                        ins.close();
                    }
                }
                String value = properties.getProperty(propKey);
                if (value != null) {
                    ((org.apache.ws.security.WSPasswordCallback) callbacks[0]).setPassword(value);
                } else {
                    throw new IOException("Property ".concat(propKey).concat(" not exists"));
                }
            } else {
                throw new IOException("File ".concat(propPath).concat(" not exists"));
            }
        } catch (java.net.URISyntaxException e) {
            throw new IOException("Problem getting ".concat(propPath).concat(" file"),e);
        }
    }
}]]></programlisting>


		<para xml:lang="es">Para realizar cambios en los parámetros de firma del servicio es posible ejecutar
		de nuevo el comando <link linkend="apendice-comandos_addon-service_security_ws">remote service
        security ws</link> con los nuevos datos sobre la misma clase (opción recomendada) o modificar 
        los ficheros antes mencionados a mano.</para>
        
      </section>
    </section>

    <section>
      <title xml:lang="es">Listar los servicios</title>

      <para xml:lang="es">El comando <link
      linkend="apendice-comandos_addon-service_list_operation">remote service list
      operation</link> muestra los métodos existentes en una clase
      que están disponibles para ser ofrecidos al exterior siempre y cuando la clase esté
      definida como un servicio web.</para>
      
<programlisting>roo-gvNIX> <command>remote service list operation --class ~.service.Service</command>
Method list to export as web service operation in '~.service.Service':
    * myMethod2</programlisting>

      <para xml:lang="es">El comando <link
      linkend="apendice-comandos_addon-service_ws_list">remote service ws
      list</link> permite obtener un listado de los servicios ofrecidos al
      exterior o aquellos servicios externos que son utilizados en la aplicación.</para>

      <para xml:lang="es">El resultado es una salida como esta:</para>

      <programlisting>roo-gvNIX&gt; remote service ws list
Services                         exported    imported
-------------------------------  ---------   ----------
org.gvnix.test.service.Service1      X
org.gvnix.test.service.Service2                 X 
org.gvnix.test.service.Service3                 X</programlisting>
    </section>
</chapter>
