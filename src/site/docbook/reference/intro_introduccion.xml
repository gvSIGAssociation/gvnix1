<?xml version="1.0" encoding="UTF-8"?>
<chapter version="5.0" xml:id="introduccion" xml:lang="es"
         xmlns="http://docbook.org/ns/docbook"
         xmlns:xlink="http://www.w3.org/1999/xlink"
         xmlns:ns5="http://www.w3.org/1998/Math/MathML"
         xmlns:ns4="http://www.w3.org/2000/svg"
         xmlns:ns3="http://www.w3.org/1999/xhtml"
         xmlns:ns="http://docbook.org/ns/docbook">
  <title>Introducción</title>

  <section xml:id="introduccion_que-es-gvnix">
    <title xml:lang="es">¿Qué es gvNIX?</title>

    <para xml:lang="es">gvNIX es un entorno de trabajo Java de código abierto
    para el desarrollo rápido de aplicaciones web altamente productivo,
    flexible y que no compromete la calidad de los proyectos.</para>

    <para xml:lang="es">Está compuesto de un conjunto de herramientas de
    código abierto entre las que destaca su núcleo, <link
    xlink:href="http://www.springsource.org/spring-roo">Spring Roo</link>.
    Esto le proporciona un amplio apoyo por parte de importantes
    organizaciones como Spring Source y VMWare. Añade funcionalidades de alto
    nivel a las prestaciones que ya se obtienen con <link
    xlink:href="http://www.springsource.org/spring-roo"> Spring Roo</link>
    para mejorar la productividad.</para>

    <para xml:lang="es">gvNIX es un proyecto subvencionado y liderado por la
    Consejería de Infraestructuras, Transporte y Medio Ambiente (CITMA) de la
    Generalidad Valenciana.</para>

    <para xml:lang="es">gvNIX está disponible dentro del proyecto de Migración
    a Software de fuentes abiertas <link
    xlink:href="http://www.gvpontis.gva.es">gvPONTIS</link>.</para>

    <itemizedlist>
      <listitem>
        <para xml:lang="es"><link xlink:href="http://www.gvnix.org">Comunidad
        online de gvNIX</link></para>
      </listitem>

      <listitem>
        <para xml:lang="es"><link
        xlink:href="http://gvnix.googlecode.com">Proyecto gvNIX en Google
        Code</link></para>
      </listitem>

      <listitem>
        <para xml:lang="es"><link
        xlink:href="http://www.gvpontis.gva.es/cast/gvnix/">Página de gvNIX
        dentro del proyecto gvPONTIS</link></para>
      </listitem>

      <listitem>
        <para xml:lang="es"><link
        xlink:href="http://projects.spring.io/spring-roo/">Página oficial de
        Spring Roo</link></para>
      </listitem>
    </itemizedlist>
  </section>

  <section>
    <title xml:lang="es">¿Qué es Spring Roo?</title>

    <para xml:lang="es">Según su creador, Ben Alex: "Roo es un pequeño genio
    que observa desde un segundo plano y gestiona todo aquello de lo que no me
    quiero preocupar".</para>

    <para xml:lang="es">Spring Roo es un entorno de trabajo Java que permite
    el desarrollo de aplicaciones web de forma rápida y cómoda para el
    desarrollador. Sus principales características son:</para>

    <itemizedlist>
      <listitem>
        <para xml:lang="es">Generación de código en Java (lenguaje
        estático).</para>
      </listitem>

      <listitem>
        <para xml:lang="es">Eliminar el trabajo tedioso centrando el
        desarrollo en la lógica de negocio.</para>
      </listitem>

      <listitem>
        <para xml:lang="es">Convención sobre configuración.</para>
      </listitem>

      <listitem>
        <para xml:lang="es">Desarrollo dirigido por el dominio (Domain-Driven
        Development):</para>

        <itemizedlist>
          <listitem>
            <para xml:lang="es">Diseño dirigido por el modelo de
            entidades.</para>
          </listitem>

          <listitem>
            <para xml:lang="es">Lógica en las entidades (Real Object
            Oriented), eliminando capas redundantes.</para>
          </listitem>

          <listitem>
            <para xml:lang="es">Otras capas opcionales (servicios, DAOs,
            ...).</para>
          </listitem>
        </itemizedlist>
      </listitem>

      <listitem>
        <para xml:lang="es">Crea un proyecto en segundos.</para>
      </listitem>

      <listitem>
        <para xml:lang="es">Realimentación: añade valor durante todo el ciclo
        de vida.</para>
      </listitem>

      <listitem>
        <para>No incorpora elementos adicionales al entorno de ejecución, por
        lo que no penaliza la velocidad ni la memoria de la aplicación.</para>
      </listitem>

      <listitem>
        <para>No requiere ningún IDE.</para>
      </listitem>

      <listitem>
        <para>Recibe instrucciones a través de una consola interactiva con
        autocompletado y ayuda en línea.</para>
      </listitem>

      <listitem>
        <para>Extensible usando <emphasis>bundles OSGi</emphasis>.</para>
      </listitem>

      <listitem>
        <para>Aprovecha el conocimiento: no necesita más conocimiento que el
        necesario para el desarrollo de aplicaciones JEE.</para>
      </listitem>
    </itemizedlist>
  </section>

  <section>
    <title>¿Qué ofrece gvNIX?</title>

    <para>gvNIX aprovecha las características de Spring Roo y aporta su propia
    filosofía, ofrecer al desarrollador componentes de alto valor funcional
    para aplicaciones corporativas:</para>

    <itemizedlist>
      <listitem>
        <para>Control de concurrencia a nivel de aplicación sin campos en base
        de datos.</para>
      </listitem>

      <listitem>
        <para>Utilidades de generación de consultas.</para>
      </listitem>

      <listitem>
        <para>Utilidades de modificaciones múltiples de entidades.</para>
      </listitem>

      <listitem>
        <para>Gestión de temas visuales.</para>
      </listitem>

      <listitem>
        <para>Gestión de la visualización de excepciones.</para>
      </listitem>

      <listitem>
        <para>Gestión de mensajes de usuario en ventana modal.</para>
      </listitem>

      <listitem>
        <para>Gestión de la estructura de páginas en el menú.</para>
      </listitem>

      <listitem>
        <para>Gestión de patrones de visualización de entidades y sus
        relaciones.</para>
      </listitem>

      <listitem>
        <para>Gestión de transformación de cadenas vacías a valores
        nulos.</para>
      </listitem>

      <listitem>
        <para>Gestión de servicios locales y servicios web (importación y
        exposición).</para>
      </listitem>

      <listitem>
        <para>Control de acceso (autenticación y autorización).</para>
      </listitem>

      <listitem>
        <para>Gestión de configuraciones por entorno.</para>
      </listitem>

      <listitem>
        <para>Generación de documentos (reportes).</para>
      </listitem>
    </itemizedlist>
  </section>

  <section>
    <title xml:lang="es">Arquitectura</title>

    <para xml:lang="es">gvNIX se centra en el desarrollo de aplicaciones Java
    para entornos corporativos.</para>

    <para xml:lang="es">La arquitectura de Roo y gvNIX se subdivide en 2
    grandes bloques: el entorno de desarrollo y el entorno de ejecución</para>

    <itemizedlist>
      <listitem>
        <para xml:lang="es">El entorno de desarrollo incorpora distintas
        herramientas enfocadas al desarrollo rápido de aplicaciones Java. La
        característica más importante del entorno de desarrollo es que no
        introduce ningún tipo de librería propia, de tal forma que en tiempo
        de ejecución no añade sobre coste alguno al rendimiento a las
        aplicaciones.</para>
      </listitem>

      <listitem>
        <para xml:lang="es">El entorno de ejecución es un entorno típico de
        aplicaciones basadas en Spring 3:</para>

        <itemizedlist>
          <listitem>
            <para>Acceso a bases de datos relacionales usando el API Java
            Persistence (JPA).</para>
          </listitem>

          <listitem>
            <para>Inyección de dependencias.</para>
          </listitem>

          <listitem>
            <para>Gestión de transacciones propia de Spring.</para>
          </listitem>

          <listitem>
            <para>Pruebas unitarias con JUnit.</para>
          </listitem>

          <listitem>
            <para>Configuración Maven para la construcción de las
            aplicaciones.</para>
          </listitem>

          <listitem>
            <para>Vistas JSP usando Spring MVC. Además, se pueden utilizar
            otras tecnologías de visualización tales como Flex, GWT, JSF y
            Vaadin.</para>
          </listitem>
        </itemizedlist>

        <para xml:lang="es">Las aplicaciones basadas en Spring son
        probablemente las aplicaciones Java más populares seguidas de JSF,
        Struts y GWT según el <link
        xlink:href="http://twitpic.com/9mgnd5">Developer Productivity Report
        2012</link>.</para>
      </listitem>
    </itemizedlist>

    <para xml:lang="es">Es importante destacar que Roo y gvNIX no imponen
    ninguna restricción sobre el tipo de aplicaciones que se pueden generar
    con este entorno. Algunos ejemplos de las funcionalidades que se pueden
    cubrir fácilmente con la versión actual son (notar que no están limitadas
    únicamente a estas):</para>

    <itemizedlist>
      <listitem>
        <para xml:lang="es">Intercambio de mensajes por JMS o envío por
        SMTP.</para>
      </listitem>

      <listitem>
        <para xml:lang="es">Capa de servicios opcional con posibilidad de
        acceso remoto para clientes RIA.</para>
      </listitem>

      <listitem>
        <para xml:lang="es">Ejecución de acciones predefinidas contra la base
        de datos.</para>
      </listitem>
    </itemizedlist>

    <para xml:lang="es">Una de las mayores diferencias entre Roo/gvNIX y las
    aplicaciones tradicionales generadas a mano es que, por defecto, no añade
    capas de abstracción innecesarias. Las aplicaciones Java más tradicionales
    tienen una capa DAO, capas de servicios, capa de dominio y una capa de
    control. En una aplicación generada con Roo/gvNIX inicialmente solo se usa
    una <link linkend="guia-desarrollo_gestion-entidades">capa de
    Entidad</link> (que es similar a la capa de dominio) y una <link
    linkend="guia-desarrollo_capa-web">capa Web</link>. Se podrá generar
    también una capa de Servicios y/o DAO si fuese necesario.</para>

    <para xml:lang="es">A continuación se puede ver un diagrama de los
    componentes de la arquitectura, capas y tecnologías relacionadas en
    Roo/gvNIX:</para>

    <figure>
      <title xml:lang="es">Diagrama Arquitectura</title>

      <mediaobject>
        <imageobject>
          <imagedata align="center"
                     fileref="images/gvnix-arquitectura-v1.0.png"/>
        </imageobject>
      </mediaobject>
    </figure>
  </section>

  <section>
    <title xml:lang="es">El intérprete de comandos</title>

    <para>Para que el entorno empiece a funcionar, hay que arrancar un
    intérprete de comandos (<emphasis>Roo shell</emphasis>) mediante el que se
    interactuará con el entorno de desarrollo. Este intérprete de comandos o
    consola tiene dos funciones básicas:</para>

    <itemizedlist>
      <listitem>
        <para>Ejecutar las órdenes indicadas por el desarrollador.</para>
      </listitem>
    </itemizedlist>

    <itemizedlist>
      <listitem>
        <para>Monitorizar cualquier cambio en el proyecto para reajustar el
        código generado.</para>
      </listitem>
    </itemizedlist>

    <para>La consola tiene el siguiente aspecto:</para>

    <programlisting>    ____  ____  ____
   / __ \/ __ \/ __ \
  / /_/ / / / / / / /
 / _, _/ /_/ / /_/ /   gvNIX x.x.x distribution
/_/ |_|\____/\____/    x.x.x-RELEASE [rev xxxxxxx]

Welcome to Spring Roo. For assistance press TAB or type "hint" then hit ENTER.
roo-gvNIX&gt;</programlisting>

    <para xml:lang="es">La usabilidad es un factor clave en el entorno de
    trabajo. Entre las principales características de usabilidad que
    proporciona la consola se encuentran:</para>

    <itemizedlist>
      <listitem>
        <para xml:lang="es">Comandos <emphasis>hint</emphasis> y
        <emphasis>help</emphasis>: Guían al usuario sobre la forma de
        proceder</para>
      </listitem>

      <listitem>
        <para xml:lang="es"><emphasis>TAB</emphasis> para completar
        prácticamente cualquier comando.</para>

        <para>Pulsando <emphasis>TAB</emphasis> Roo sugiere que hacer a
        continuación, que comando se puede utilizar a continuación, incluso
        pulsando algún caracter qué comandos que empiezan por ese caracter se
        pueden utilizar.</para>
      </listitem>

      <listitem>
        <para xml:lang="es">Si se produce algún error en alguna operación, Roo
        deshará todos los cambios generados dejando la aplicación como se
        encontraba inicialmente.</para>
      </listitem>

      <listitem>
        <para xml:lang="es">Ejecución de <emphasis>scripts</emphasis>: Se
        puede guardar una secuencia de comandos en un archivo de texto y
        ejecutarlos en bloque cuantas veces se necesite. Por ejemplo, se puede
        hacer un guión para crear una aplicación completa y ejecutarlo en el
        intérprete de Roo.</para>
      </listitem>

      <listitem>
        <para xml:lang="es">Funcionamiento predictivo y conservador: Al
        ejecutarse en segundo plano debe ser un entorno conservador en el
        sentido que si no cambia nada en el proyecto no debe tocar nada, el
        desarrollador no debe perder nunca el control del proyecto.</para>
      </listitem>
    </itemizedlist>
  </section>

  <section>
    <title xml:lang="es">¿Cómo funciona?</title>

    <para>Este diagrama muestra a alto nivel el modelo funcional de Roo y
    gvNIX:</para>

    <figure xml:lang="es">
      <title xml:lang="es">Diagrama de modelo funcional de Roo y gvNIX</title>

      <mediaobject>
        <imageobject>
          <imagedata align="center" fileref="images/modelo-roo.png"/>
        </imageobject>
      </mediaobject>
    </figure>

    <itemizedlist>
      <listitem>
        <para xml:lang="es">Proyecto Java</para>

        <para xml:lang="es">Es el contenido de nuestra aplicación formada por
        todos los archivos necesarios.</para>
      </listitem>

      <listitem>
        <itemizedlist>
          <para xml:lang="es">Infraestructura de Roo/gvNIX</para>

           <para xml:lang="es">Toda la infraestructura de Roo/gvNIX que forma
           el entorno de desarrollo, autocontenida y separada del proyecto
           final. Se compone de:</para>

          <listitem>
            <para xml:lang="es">Add-ons</para>

            <para xml:lang="es">Componentes que automáticamente monitorizan y
            realizan cambios en nuestro proyecto.</para>

            <para>También ofrecen un conjunto de comandos para que los
            desarrolladores puedan realizar operaciones a través del
            intérprete de comandos.</para>
          </listitem>

          <listitem>
            <para xml:lang="es">Intérprete de comandos (Shell)</para>

            <para xml:lang="es">Componente que permite la recepción y
            ejecución de órdenes del desarrollador</para>
          </listitem>

          <listitem>
            <para xml:lang="es">STS: SpringSource Tool Suite</para>

            <para xml:lang="es">Plugin/Aplicación Eclipse de SpringSource para
            trabajar con proyectos Spring. Entre otras, dispone de
            herramientas para trabajar con Roo/gvNIX.</para>
          </listitem>
        </itemizedlist>
      </listitem>

      <itemizedlist>
        <listitem>
          <para xml:lang="es">Anotaciones</para>

          <para xml:lang="es">Conjunto de <link
          xlink:href="http://hartocodigo.blogspot.com/2009/02/anotaciones-en-java-5.html">anotaciones
          JAVA</link> que utilizan Roo y gvNIX para poder identificar un tipo de
          artefacto concreto y su configuración. Tienen una política de
          retención <emphasis>SOURCE</emphasis> por lo que el compilador Java
          no las incluirá en la clases compiladas.</para>
        </listitem>
      </itemizedlist>
    </itemizedlist>
  </section>

  <section>
    <title xml:lang="es">Generación de código</title>

    <para xml:lang="es"><emphasis>Roo y gvNIX es un generador de código
    híbrido, puesto que intenta combinar lo mejor de los modelos de
    generación pasiva y activa.</emphasis></para>

    <itemizedlist>
      <listitem>
        <para>Generación pasiva:</para>

        <para>El desarrollador indica a la herramienta qué es lo que debe
        generar, y una vez generado finaliza el trabajo de la herramienta.
        No se asume un mantenimiento a largo plazo del código generado. El
        desarrollador interactúa mediante el intérprete de comandos, desde
        ahí se realiza y termina el proceso de generación de código, que
        genera archivos xml y java.</para>
      </listitem>

      <listitem>
        <para>Generación activa:</para>

        <para>Es una realimentación automática que genera un modelo
        detallado de metadatos con la ayuda de las anotaciones @Roo y @GvNIX
        e incrementalmente actualiza archivos aj y jsp. Permite mantener
        automáticamente elementos del proyecto en respuesta a cambios, este
        tipo de generación nunca modifica archivos java, estos solo se
        modifican por indicación expresa del desarrollador y solo a través
        del intérprete de comandos.</para>
      </listitem>
    </itemizedlist>
  </section>
</chapter>
