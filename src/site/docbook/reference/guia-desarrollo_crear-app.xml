<?xml version="1.0" encoding="UTF-8"?>
<chapter version="5.0" xml:id="guia-desarrollo-crear-app" xml:lang="es"
         xmlns="http://docbook.org/ns/docbook"
         xmlns:xlink="http://www.w3.org/1999/xlink"
         xmlns:xi="http://www.w3.org/2001/XInclude"
         xmlns:ns5="http://www.w3.org/1998/Math/MathML"
         xmlns:ns4="http://www.w3.org/2000/svg"
         xmlns:ns3="http://www.w3.org/1999/xhtml"
         xmlns:ns="http://docbook.org/ns/docbook">
  <title xml:lang="es">Crear una nueva aplicación</title>

  <para xml:lang="es">El proyecto de ejemplo que se utilizará en esta parte
  de la documentación consiste en una aplicación web para la venta de pizzas, 
  <emphasis role="bold">Pizza Shop</emphasis>.</para>

  <para xml:lang="es">Requerimientos:</para>

  <itemizedlist>
    <listitem>
      <para>Los clientes pueden hacer pedidos por la web.</para>
    </listitem>

    <listitem>
      <para>Los empleados crean pedidos recibidos por teléfono.</para>
    </listitem>

    <listitem>
      <para>Las pizzas son un conjunto de ingredientes sobre una base.</para>
    </listitem>
  </itemizedlist>

  <para xml:lang="es">gvNIX es especialmente potente si usamos los principios
  del <emphasis>diseño dirigido por el dominio</emphasis> (DDD). Básicamente
  son un conjunto de patrones para construir aplicaciones a partir del modelo
  del dominio. En el ámbito de gvNIX destacan las siguientes dos 
  características:</para>

  <itemizedlist>
    <listitem>
      <para><emphasis role="bold">Diseño dirigido por el modelo</emphasis>.
      Representar fielmente los conceptos seleccionados del dominio del
      problema, por ejemplo utilizando UML (diagramas de clases).</para>
    </listitem>

    <listitem>
      <para><emphasis role="bold">Arquitectura por capas</emphasis>. Separar
      la lógica de negocio de la lógica de aplicación (transacciones,
      seguridad, etc), de la lógica de presentación y de la lógica de
      infraestructura (acceso a datos, acceso a servicios externos,
      etc).</para>

      <para>La arquitectura por capas es un patrón que gvNIX se encarga de
      aplicar por nosotros, sin embargo, debemos conocer las capas generadas
      por gvNIX porque este conocimiento será de utilidad a la hora de hacer
      nuestros desarrollos.</para>
    </listitem>
  </itemizedlist>

  <para>Por tanto, lo primero que se debe hacer es definir el modelo
  del dominio:</para>

  <figure>
    <title>Pizza Shop Domain Model</title>

    <mediaobject>
      <imageobject>
        <imagedata align="center" fileref="images/pizza.png"></imagedata>
      </imageobject>
    </mediaobject>
  </figure>

  <section xml:id="guia-desarrollo_aplicacion-base_crear-projecto">
    <title xml:lang="es">Crear un nuevo proyecto</title>

    <para xml:lang="es">La creación de un nuevo proyecto se puede 
    realizar de dos formas, en función de si se hace desde la consola
    del sistema operativo o desde el IDE. Para ello, leer las secciones
    <link linkend="guia-desarrollo_eclipse-usar">
    Crear proyecto gvNIX en Eclipse IDE</link> para la creación desde el IDE
    o <link linkend="instalacion_instalacion">Descarga e instalación gvNIX
    </link> para la creación desde la consola del sistema.</para>

    <para xml:lang="es">Acceder a la consola y teclear
    <command>hint</command> para mostrar la información del asistente 
    que cambiará durante el proceso de desarrollo en función
    del estado en el que se encuentre el proyecto:</para>

    <programlisting>roo-gvNIX&gt; <command>hint</command> 
<computeroutput>Welcome to Roo! We hope you enjoy your stay!

Before you can use many features of Roo, you need to start a new project.

To do this, type 'project' (without the quotes) and then hit TAB.

Enter a --topLevelPackage like 'com.mycompany.projectname' (no quotes).
When you've finished completing your --topLevelPackage, press ENTER.
Your new project will then be created in the current working directory.

Note that Roo frequently allows the use of TAB, so press TAB regularly.
Once your project is created, type 'hint' and ENTER for the next suggestion.
You're also welcome to visit http://forum.springframework.org for Roo help.</computeroutput></programlisting>

    <para xml:lang="es">Muestra las instrucciones para continuar y crear
    un proyecto. El proyecto ya estará creado si se hizo desde la consola
    del IDE y se podrá pasar a la siguiente sección, en caso contrario teclear
    <command>project</command>. Pulsar la tecla TAB (tabulador) para que se 
    muestre el parámetro <parameter>--topLevelPackage</parameter> y definir el 
    paquete principal del proyecto, en este caso
    <package>com.springsource.roo.pizzashop</package>. También se puede
    indicar el JDK con el que se va a trabajar en el proyecto añadiendo el atributo
    <parameter>--java 6</parameter>, el número 6 corresponde a la versión del
    JDK utilizado, en este caso JDK 1.6, si no se especifica Roo por defecto
    utiliza el JDK 1.6</para>

    <programlisting>roo-gvNIX&gt; <command>project --topLevelPackage com.springsource.roo.pizzashop</command>
<computeroutput>Created ROOT/pom.xml
Created SRC_MAIN_RESOURCES
Created SRC_MAIN_RESOURCES/log4j.properties
Created SPRING_CONFIG_ROOT
Created SPRING_CONFIG_ROOT/applicationContext.xml</computeroutput></programlisting>

    <para xml:lang="es">Una vez creado el proyecto observar que el foco
    de la consola ha cambiado, ahora se encuentra apuntando al paquete base del
    proyecto que se ha indicado al crearlo:</para>

    <programlisting>com.springsource.roo.pizzashop roo-gvNIX&gt;</programlisting>

    <para xml:lang="es">Por otro lado, la estructura de directorios creada
    esta basada en las recomendaciones de Maven.</para>

    <figure>
      <title xml:lang="es">Estructura de carpetas</title>

      <mediaobject>
        <imageobject>
          <imagedata align="center" fileref="images/projectfolders.png"></imagedata>
        </imageobject>
      </mediaobject>
    </figure>
  </section>
</chapter>
