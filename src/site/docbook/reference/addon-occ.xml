<?xml version="1.0" encoding="UTF-8"?>
<chapter version="5.0" xml:id="addon-persistence" xml:lang="es"
         xmlns="http://docbook.org/ns/docbook"
         xmlns:xlink="http://www.w3.org/1999/xlink"
         xmlns:ns5="http://www.w3.org/1998/Math/MathML"
         xmlns:ns4="http://www.w3.org/2000/svg"
         xmlns:ns3="http://www.w3.org/1999/xhtml"
         xmlns:ns="http://docbook.org/ns/docbook">
  <title xml:lang="es">Add-on OCC (Optimistic Concurrency Control)</title>

  <para xml:lang="es">Add-on de utilidades enfocadas a la persistencia de las
  entidades.</para>

  <para xml:lang="es">Este add-on proporciona un sistema
  que facilita la detección de modificaciones concurrentes
  en la persistencia de entidades del modelo de datos.</para>

  <para xml:lang="es">El sistema consiste en un control de
  <emphasis>concurrencia optimista</emphasis> basada en un
  <emphasis>checkSum o suma de control</emphasis> de los
  valores de una entidad dada.</para>

  <section xml:id="addon-persistence_occchecksum">
    <title>Introducción</title>

    <para xml:lang="es">Esta utilidad añade a las entidades un sistema
    de <emphasis>control de concurrencia</emphasis> basado en una operación de
    <emphasis>checksum o suma de control</emphasis> sobre todos los campos persistentes
    que contiene la entidad.</para>

    <para xml:lang="es">El <emphasis>control de concurrencia optimista</emphasis>
    ya es ofrecido por defecto por el núcleo de Spring Roo. Sin embargo, el sistema que proporciona
    se basa en la existencia de un campo en cada una de las tabla de base de datos
    que se desea controlar. Este campo se suele definir como <emphasis>version</emphasis>
    (numérico que identifica la versión del objeto) o <emphasis>lastupdate</emphasis> (fecha
    de la última actualización). Esto es un problema para aquellas bases de datos ya
    existentes y en las que no se puede o no se quiere alterar su estructura.</para>

    <para xml:lang="es">Esta funcionalidad nace de la necesidad de controlar
    la concurrencia sobre modelos de datos heredados en los que no es posible
    alterar el modelo relacional de base de datos para añadir los campos de control
    en los que se basa el mecanismo de <emphasis>control de concurrencia</emphasis>
    del núcleo de Spring Roo que sigue la especificación <link
    xlink:href="http://jcp.org/aboutJava/communityprocess/final/jsr220/index.html">
    JPA</link>.</para>

    <para xml:lang="es">El checksum consiste en una operación matemática
    de los distintos valores que contiene un registro (instancia) de una entidad.
    El cálculo tiene en cuenta todas las propiedad de tipo simple de la entidad,
    es decir, no se incluye en el cálculo propiedad que represente una relación con otro
    u otros objetos. El cálculo se realiza en el momento de la carga
    del registro de la entidad desde la base de datos y es
    almacenado en una propiedad no persistente de la misma entidad.</para>

    <para xml:lang="es">En el momento de <emphasis>actualizar o
    eliminar</emphasis> un registro de dicha entidad se carga el elemento que
    está persistido en la base de datos y <emphasis>se compara el valor de
    checksum</emphasis> actual con el que se calculó en el momento de la carga del
    elemento a actualizar o eliminar. <emphasis>Si no coincide se lanza una
    Excepción </emphasis>(<link
    xlink:href="http://docs.oracle.com/javaee/6/docs/api/javax/persistence/OptimisticLockException.html">
    javax.persistence.OptimisticLockException</link>) y la operación no se realizará.</para>

    <para xml:lang="es">Esta operación supone un coste adicional en las tareas
    de persistencia, pero no es apreciable en condiciones del uso
    cuotidiano de la aplicación excepto en procesos de actualizaciones masivas
    de registros.</para>
    
    <para xml:lang="es">Para mostrar un mensaje amigable al usuario se puede utilizar el
    <link linkend="addon-web-exception-handler_descripcion">Add-on Web Dialog</link>
    que, en el <link linkend="addon-web-exception-handler_excptiones-de-gvnix"> 
    conjunto de excepciones gestionadas por defecto</link> se incluye esta. Una vez 
    inicializada la gestión de excepciones es posible personalizar el mensaje
    usando el comando <link
    linkend="apendice-comandos_addon-web-exception-handler_exception-handler-set-language">web
    mvc dialog exception set language</link></para>
    
  </section>
  <section xml:id="addon-persistence_incluir">
    <title>Añadir el control en las entidades</title>

    <para xml:lang="es">Para activar esta característica sobre una entidad se
    pueden utilizar los siguientes comandos:</para>

    <variablelist>
      <varlistentry>
        <term><link
        linkend="apendice-comandos_addon-persistence_occchecksum_occ-checksum-set">occ
        checksum set</link></term>

        <listitem>
          <para xml:lang="es">Aplica el control de concurrencia a una
          entidad.</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><link
        linkend="apendice-comandos_addon-persistence_occchecksum_occ-checksum-all">occ
        checksum all</link></term>

        <listitem>
          <para xml:lang="es">Aplica el control de concurrencia a todas
          las entidades de la aplicación.</para>
        </listitem>
      </varlistentry>
    </variablelist>

    <para xml:lang="es">Estos comandos añaden a uno o a todos los ficheros
    <filename>.java</filename> de las entidades una anotación
    <classname>@GvNIXEntityOCCChecksum</classname> y un campo no persistente
    para almacenar el checksum. En base a esta anotación se
    generará un <emphasis>aspecto java</emphasis> (fichero
    <filename>*_gvNIX_occChecksum.aj</filename>) con toda la lógica necesaria
    para calcular el checksum en base a las propiedades de un registro de
    la entidad y para controlar antes de una actualización o borrado si el
    registro ha cambiado desde que se cargo inicialmente.
    Toda esta lógica sera manejada automáticamente por el add-on.</para>

    <para xml:lang="es">Si se aplica el control de concurrencia sobre
    una entidad que extiende de otra y en la clase padre existe un campo
    anotado como campo de control de persistencia con 
    @javax.persistence.Version, el add-on detectará esta
    circunstancia y aplicará el control de concurrencia sobre la
    clase padre.</para>

    <para xml:lang="es">Para ver todos los comandos y sus opciones ver el
    <link linkend="apendice-comandos_addon-persistence">apéndice
    de comandos</link>.</para>

    <note>
      <para>Se ha detectado que al aplicar este control de concurrencia
      sobre entidades que tienen generados, o sobre los que se van a generar,
      tests de integración (mediante el comando <emphasis>test
      integration</emphasis> o mediante la opción <emphasis>--testAutomatically</emphasis>
      del comando <emphasis>entity jpa</emphasis>) los tests de integración presentarán un error
      de compilación. Se debe a que el add-on que genera los tests de integración no
      considera el caso en el que el campo que hace de control de concurrencia sea
      del tipo cadena. Hay varias opciones para evitar estos errores de compilación:</para>

      <orderedlist>
        <listitem>
          <para>No es recomendable, pero se pueden desactivar los tests
          de los métodos <emphasis>flush()</emphasis> y
          <emphasis>merge()</emphasis> (métodos
          <emphasis>testFlush()</emphasis> y
          <emphasis>testMerge()</emphasis>). Para ello hay que editar los
          archivos <emphasis>src/test/java/**/*IntegrationTest.java</emphasis>
          y añadir a la anotación <emphasis>@RooIntegrationTest</emphasis> los
          atributos <emphasis>flush = false</emphasis> y <emphasis>merge =
          false</emphasis>, de esta manera estos dos tests no se generan
          en sus aspecto Java correspondiente quedando la batería de pruebas
          incompleta pero compilando correctamente:</para>

          <programlisting>@RooIntegrationTest(entity = MiClase.class, <emphasis
              role="bold">flush = false, merge = false</emphasis>)</programlisting>
        </listitem>

        <listitem>
          <para>La más recomendable es corregir los dos test mencionados en el
          punto anterior. Para ello se debe realizar un <emphasis>pushin</emphasis>
          de estos dos métodos que se encuentran declarados en
          <emphasis>src/test/java/**/*IntegrationTest_Roo_IntegrationTest.aj</emphasis>
          y también el campo &lt;nombre_entidad&gt;DataOnDemand dod, anotado
          con @Autowired, llevandolos a la clase Java del test de
          integración. Una vez los test están en la clase Java, se pueden corregir
          los errores de compilación reemplazando el operador
          <emphasis>"&gt;"</emphasis> por el método
          <emphasis>equals</emphasis>. A continuación se muestra un ejemplo
          extraido del proyecto de ejemplo petclinic que se distribuye junto a
          gvNIX/Roo en el que se han corregido las líneas marcadas en negrita
          para los métodos <emphasis>testFlush()</emphasis> y
          <emphasis>testMerge()</emphasis>.</para>

          <programlisting>package com.springsource.petclinic.domain;

import org.junit.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.roo.addon.test.RooIntegrationTest;

@RooIntegrationTest(entity = Owner.class)
public class OwnerIntegrationTest {
    @Autowired
    private OwnerDataOnDemand dod;

    @Test
    public void testMarkerMethod() {

    }

    @Test
    public void testFlush() {
        com.springsource.petclinic.domain.Owner obj = dod.getRandomOwner();
        org.junit.Assert.assertNotNull(
        		"Data on demand for 'Owner' failed to initialize correctly", obj);
        java.lang.Long id = obj.getId();
        org.junit.Assert.assertNotNull(
        		"Data on demand for 'Owner' failed to provide an identifier", id);
        obj = com.springsource.petclinic.domain.Owner.findOwner(id);
        org.junit.Assert.assertNotNull(
        		"Find method for 'Owner' illegally returned null for id '"
        		+ id + "'", obj);
        boolean modified =  dod.modifyOwner(obj);
        java.lang.String currentVersion = obj.getOccChekcsum();
        obj.flush();
        org.junit.Assert.assertTrue(
        		"OccCheckSum for 'Owner' failed to modify on flush directive", 
        		(currentVersion != null &amp;&amp;
        		<emphasis role="bold">obj.getOccChekcsum().equals(currentVersion)</emphasis>) ||
        		!modified);
    }

    @Test
    public void testMerge() {
        com.springsource.petclinic.domain.Owner obj = dod.getRandomOwner();
        org.junit.Assert.assertNotNull(
        		"Data on demand for 'Owner' failed to initialize correctly", obj);
        java.lang.Long id = obj.getId();
        org.junit.Assert.assertNotNull(
        		"Data on demand for 'Owner' failed to provide an identifier", id);
        obj = com.springsource.petclinic.domain.Owner.findOwner(id);
        boolean modified =  dod.modifyOwner(obj);
        java.lang.String currentVersion = obj.getOccChekcsum();
        com.springsource.petclinic.domain.Owner merged = (
        		com.springsource.petclinic.domain.Owner) obj.merge();
        obj.flush();
        org.junit.Assert.assertEquals(
        		"Identifier of merged object not the same as identifier of " + 
        				"original object",
        		merged.getId(), id);
        org.junit.Assert.assertTrue(
        		"OccCheckSum for 'Owner' failed to modify on merge and flush " + 
        				"directive", 
        		(currentVersion != null &amp;&amp;
        		<emphasis role="bold">obj.getOccChekcsum().equals(currentVersion)</emphasis>)
        		|| !modified);
    }
}</programlisting>
        </listitem>
      </orderedlist>
    </note>
  </section>
</chapter>
