<?xml version="1.0" encoding="UTF-8"?>
<chapter version="5.0" xml:id="addon-web-report" xml:lang="es"
         xmlns="http://docbook.org/ns/docbook"
         xmlns:xlink="http://www.w3.org/1999/xlink"
         xmlns:xi="http://www.w3.org/2001/XInclude"
         xmlns:ns5="http://www.w3.org/1998/Math/MathML"
         xmlns:ns4="http://www.w3.org/2000/svg"
         xmlns:ns3="http://www.w3.org/1999/xhtml"
         xmlns:ns="http://docbook.org/ns/docbook">
  <title xml:lang="es">Add-on Web Report</title>

  <para xml:lang="es">El add-on añade soporte para la generación de informes
  con <emphasis>Jasper Reports</emphasis> y genera informes totalmente
  funcionales para una entidad que posteriormente pueden ser personalizados.
  Los informes son accesibles desde la interfaz web mediante un 
  formulario que se crea para tal efecto.</para>
  
  <para xml:lang="es">En la sección de recetas se puede encontrar
  información adicional para realizar el <link linkend="recetas-reports-subinforme">
  diseño de informes con sub informes</link>.</para>

  <section xml:id="addon-web-report_descripcion">
    <title xml:lang="es">Descripción</title>

    <para xml:lang="es">El add-on añade por un lado el soporte necesario para trabajar
    con Jasper Reports y por otro es capaz de generar informes asociados con una
    entidad cualquiera de la aplicación.</para>

    <para xml:lang="es">Un informe de <emphasis>Jasper Reports</emphasis>
    se se define principalmente mediante un archivo de diseño de informe (jrxml).
    El diseño de informe al procesarse junto con una fuente de datos, genera
    un fichero de salida en un formato determinado incluyendo en él la
    información existente en la fuente de datos. La fuente de datos puede
    provenir de distintos orígenes, aunque en este caso siempre será
    una lista de entidades proporcionada directamente desde la aplicación.</para>

    <para xml:lang="es">El archivo de diseño es un documento XML con un
    formato determinado que se puede editar de manera sencilla y gráfica
    mediante una herramienta como <link
    xlink:href="http://jasperforge.org/projects/ireport">iReport</link>.</para>

    <figure>
      <title xml:lang="es">Editor de informes iReport</title>

      <mediaobject>
        <imageobject>
          <imagedata align="center" fileref="images/ireport.png"></imagedata>
        </imageobject>
      </mediaobject>
    </figure>
  </section>

  <section xml:id="addon-web-report_instalacion">
    <title xml:lang="es">Instalación</title>

    <para xml:lang="es">Jasper Reports requiere varias librerías y configuraciones para funcionar,
    el add-on incluye en el proyecto las dependencias de la librería modificando el pom.xml
    del mismo e incluye varios ficheros de configuración que se verán a continuación
    con mas detalle.</para>

    <para xml:lang="es">El comando sólo estará disponible si el proyecto utiliza Spring MVC en
    la capa web. Esto es, el archivo de configuración <emphasis>webmvc-config.xml</emphasis>
    debe existir en <emphasis>/WEB-INF/spring</emphasis>.</para>
    
    <para xml:lang="es">Estas operaciones de configuración las realiza el comando del add-on
    <link linkend="apendice-comandos_addon-web-report_setup">web report setup</link>:</para>

	<programlisting>
	roo-gvNIX> <command>web report setup</command>
	Updated SRC_MAIN_WEBAPP/WEB-INF/spring/webmvc-config.xml
	Created SRC_MAIN_WEBAPP/WEB-INF/spring/jasper-views.xml
	Created SRC_MAIN_WEBAPP/WEB-INF/classes/jasperfonts
	Created SRC_MAIN_WEBAPP/WEB-INF/classes/jasperfonts/FreeSans.ttf
	Created SRC_MAIN_WEBAPP/WEB-INF/classes/jasperfonts/FreeSansBold.ttf
	Created SRC_MAIN_WEBAPP/WEB-INF/classes/jasperfonts/FreeSansBoldOblique.ttf
	Created SRC_MAIN_WEBAPP/WEB-INF/classes/jasperfonts/FreeSansOblique.ttf
	Created SRC_MAIN_WEBAPP/WEB-INF/classes/jasperfonts/gvnix_reportfonts.xml
	Updated ROOT/pom.xml [added dependency org.gvnix:org.gvnix.web.report.roo.addon:X.Y.Z; 
			added property 'jasperreports.version' = '4.0.1';
			added property 'jasperreportsfonts.version' = '4.0.0';
			added property 'apachepoi.version' = '3.7';
			added dependencies net.sf.jasperreports:jasperreports:${jasperreports.version},
			org.apache.poi:poi:${apachepoi.version},
			net.sf.jasperreports:jasperreports-fonts:${jasperreportsfonts.version}]
	Created SRC_MAIN_WEBAPP/WEB-INF/classes/jasperreports_extension.properties
	</programlisting>

    <para xml:lang="es">El comando configura los siguientes archivos:</para>

    <itemizedlist>
      <listitem>
        <para><emphasis>pom.xml</emphasis>: añade la dependencia JasperReports,
        la dependencia Apache POI para informes en formato Excel y una
        dependencia con el propio add-on para así reconocer la anotación
        <emphasis>@GvNIXReports</emphasis> que se utilizará en el proyecto.</para>
      </listitem>

      <listitem>
        <para><emphasis>webmvc-config.xml</emphasis>: añade un bean para
        configurar el sitema de vistas de informes.</para>
      </listitem>

      <listitem>
        <para><emphasis>jasper-views.xml</emphasis>: añade una definición de
        vistas por informe.</para>
      </listitem>

      <listitem>
        <para><emphasis>jasperfonts</emphasis>: directorio que contiene
        fuentes True Type que usará JasperReports para confeccionar el
        informe.</para>
      </listitem>

      <listitem>
        <para><emphasis>jasperreports_extension.properties</emphasis>: define
        el lugar donde se encuentran las fuentes a utilizar.</para>
      </listitem>
    </itemizedlist>

    <para xml:lang="es">Cada uno de los informes se comporta como una vista más de la aplicación y 
    por tanto el add-on habrá incluido en el fichero de configuración de la capa web
    <emphasis>webmvc-config.xml</emphasis> un componente que para cada  petición
    de este tipo devolverá el nuevo tipo de salida (un informe). Esto se logra
    añadiendo un nuevo <emphasis>bean</emphasis>:</para>

    <programlisting>&lt;bean id="jasperReportsXmlViewResolver"
    		class="org.springframework.web.servlet.view.XmlViewResolver"
    		p:location="/WEB-INF/spring/<emphasis role="bold">jasper-views.xml</emphasis>" p:order="0" /&gt;</programlisting>

    <para xml:lang="es">Este <emphasis>bean</emphasis> referencia al fichero
    <emphasis>jasper-views.xml</emphasis> como fichero de configuración de las
    nuevas vistas, por tanto el add-on habrá creado este archivo en
    <emphasis>src/main/webapp/WEB-INF/spring</emphasis>.</para>

    <para xml:lang="es">Los informes generados pueden contener textos que se deban visualizar con 
    características especiales tales como negrita y cursiva. Para ello, Jasper Reports
    requiere que las fuentes utilizadas para generar el
    informe se encuentren en el classpath de la aplicación. Así pues, el
    add-on se ocupa de copiar en
    <emphasis>src/main/webapp/WEB-INF/classes/jasperfonts</emphasis>
    varios archivos de fuentes
    True Type y su definición para poder hacer uso de ellas en el archivo
    <emphasis>gvnix_reportfonts.xml</emphasis>. En el archivo
    <emphasis>src/main/webapp/WEB-INF/classes/jasperreports_extension.properties</emphasis>
    se indica a Jasper Reports que utilice estas fuentes a la hora de generar el informe.</para>
    
    <para xml:lang="es">Si se desean utilizar fuentes de letra adicionales a parte de
    las incluidas por defecto por el add-on, deberán ser instaladas de forma manual en el
    proyecto. Para ello se puede consultar la sección <link linkend="recetas-reports-fuentes">
    Instalar fuentes de letra para los informes</link> de la sección de recetas.</para>

  </section>
  <section xml:id="addon-web-report_generacion">
    <title xml:lang="es">Generación de un informe</title>

    <para xml:lang="es">El add-on realiza la generación automática de informes
    sobre cualquier entidad de la applicación en la que se está utilizando.
    Posteriormente, los informes podrán ser personalizados por parte
    del desarrollador de la aplicación para adecuarlos a los requerimientos
    modificando o bien lo lógica de negocio o bien el estilo visual como se desee.</para>

    <para xml:lang="es">La petición de un informe, al tratarse de una vista más de la
    aplicación, ha de ser atendida por un controlador. No obstante, los informes
    muestran información referente a una entidad del modelo de datos de la
    aplicación, por tanto el controlador debe atender peticiones
    referentes a una determinada entidad. Esto, como se comentó en <link
    linkend="guia-desarrollo_web_definir-controller_a-mano_automatico">CRUDS
    automático</link>, se configura mediante la anotación
    <emphasis>@RooWebScaffold</emphasis> y su atributo
    <emphasis>formBackingObject.</emphasis> Así pues, no se puede definir un
    informe sobre un controlador que no disponga de la anotación
    <emphasis>@RooWebScaffold</emphasis>.</para>

    <para xml:lang="es">La generación de un informe se realiza mediante el comando <link
    linkend="apendice-comandos_addon-web-report_add">web report add</link> o
    incluyendo la anotación @GvNIXReports en la clase del controlador.
    Los formatos de fichero en los que se puede generar el informe son:</para>
        
    <itemizedlist>

      <listitem>
		<emphasis>PDF</emphasis>: Portable Document Format.
      </listitem>

      <listitem>
		<emphasis>XLS</emphasis>: Excel.
      </listitem>
      
      <listitem>
		<emphasis>CSV</emphasis>: Comma Separated Values.
      </listitem>
      
      <listitem>
		<emphasis>HTML</emphasis>: Hyper Text Markup Language.
      </listitem>
    </itemizedlist>
    
	<programlisting>roo-gvNIX> <command>web report add --controller ~.web.EntityController --reportName informe</command>
	Updated SRC_MAIN_JAVA/org/gvnix/test/web/EntityController.java
	Created SRC_MAIN_WEBAPP/WEB-INF/reports
	Created SRC_MAIN_WEBAPP/WEB-INF/reports/entity_informe.jrxml
	Created SRC_MAIN_JAVA/org/gvnix/test/web/servlet/view/jasperreports
	Created SRC_MAIN_JAVA/org/gvnix/test/web/servlet/view/jasperreports/
			CustomJasperReportsMultiFormatView.java
	Updated SRC_MAIN_WEBAPP/WEB-INF/spring/jasper-views.xml
	Updated SRC_MAIN_WEBAPP/WEB-INF/i18n/application.properties
	Created SRC_MAIN_WEBAPP/WEB-INF/views/pets/informe.jspx
	Updated SRC_MAIN_WEBAPP/WEB-INF/views/pets/views.xml
	Updated SRC_MAIN_WEBAPP/WEB-INF/i18n/application.properties
	Created SRC_MAIN_JAVA/org/gvnix/test/web/EntityController_Roo_GvNIXReport.aj
	Updated SRC_MAIN_WEBAPP/WEB-INF/views/menu.jspx</programlisting>

    <para xml:lang="es">El comando incluirá la anotación <emphasis>@GvNIXReports</emphasis>
    en la clase controladora e incluira como atributo un array de cadenas en la que cada
    elemento define un informe y los formatos en los que se podrá generar dicho informe.
    Así pues, la anotación:</para>

    <programlisting>@GvNIXReports({ "informe|pdf,xls,csv" })</programlisting>

    <para xml:lang="es">Define un informe cuyo nombre es <emphasis>informe</emphasis>
    y estará disponible en los formatos pdf, xls y csv.</para>

    <para xml:lang="es">Al lanzar el comando <emphasis>web report add</emphasis> o anotar
    la clase del controlador con <emphasis>@GvNIXReports</emphasis> se
    realizan una serie de modificaciones en el proyecto que darán como resultado la 
    posibilidad de generar un informe desde un formulario de la aplicación.
    Las modificaciones que realiza el comando sobre el proyecto son:</para>

    <itemizedlist>
      <listitem>
        <para xml:lang="es">Crea la clase Java <emphasis
        role="bold">CustomJasperReportsMultiFormatView</emphasis>. La nueva clase se
        creará en el subpaquete <emphasis>servlet.view.jasperreports</emphasis>
        dentro del paquete donde se encuentre el controlador.
        Esta clase se instala solo una vez y en sucesivas ejecuciones se
        comprueba si existe. Esta clase tiene como principal cometido
        establecer, de manera dinámica, el nombre del archivo del informe que
        se genera para su descarga.</para>
      </listitem>

      <listitem>
        <para xml:lang="es">En el archivo <filename>jasper-views.xml</filename>
        añade la definición de una nueva vista que será el nuevo informe
        añadido a la aplicación. Se define para ello un bean cuyo id es
        <emphasis>&lt;fromBackingObject&gt;_&lt;reportname&gt;</emphasis> y
        <emphasis>CustomJasperReportsMultiFormatView</emphasis> como clase del
        bean. Si <emphasis>formBackingObject</emphasis> de
        <emphasis>@RooWebScaffold</emphasis> tiene como valor
        <emphasis>Entity</emphasis> y el nombre definido para el informe es
        <emphasis>informe</emphasis>:</para>

        <programlisting>&lt;bean id="entity_informe" 
class="org.gvnix.test.web.servlet.view.jasperreports.CustomJasperReportsMultiFormatView"
p:url="/WEB-INF/reports/entity_informe.jrxml"
p:subReportUrls-ref="subReportUrls"
p:subReportDataKeys-ref="subReportDataKeys" /&gt;</programlisting>
      </listitem>

      <listitem>
        <para xml:lang="es">Crea un archivo de diseño de informe (jrxml) con 
        carios campos de la clase Entity (siguiendo el ejemplo anterior).
        El archivo se creará en
        <filename>src/main/webapp/WEB-INF/reports</filename> con
        el nombre <filename>entity_informe.jrxml</filename>. Este
        archivo se referenciará en el <emphasis>bean</emphasis> del fichero
        <filename>jasper-views.xml</filename> desde el atributo
        <emphasis>p:url</emphasis>.</para>
      </listitem>

      <listitem>
        <para xml:lang="es">Crea un formulario web bajo <filename>
        src/main/webapp/WEB-INF/views/&lt;entity&gt;
        </filename>con nombre <emphasis>informe.jspx</emphasis>
        siguiendo con el ejemplo anterior. Y define esta nueva
        vista en el fichero <filename>views.xml</filename>
        situado en el mismo directorio. Esta página permitirá solicitar
        la generación del informe y por defecto lo hará incluyendo los 10
        primeros registros de la entidad.</para>
      </listitem>
      
      <listitem>
        <para xml:lang="es">Incluye las etiquetas multidioma que necesita
        visualizar la generación de informes en
        <emphasis>src/main/webapp/WEB-INF/i18n/application.properties</emphasis>
        y un nuevo enlace del menú en <emphasis>src/main/webapp/WEB-INF/views/menu.jspx
        </emphasis> para poder acceder a la página de generación del informe.</para>
      </listitem>

      <listitem>
        <para xml:lang="es">Crea el aspecto Java
        <emphasis>&lt;controller&gt;_Roo_GvNIXReport.aj</emphasis> con
        los métodos que atenderán las peticiones relacionadas con el
        informe añadido. Se añaden dos métodos por informe:</para>

        <itemizedlist>
          <listitem>
            <para xml:lang="es"><emphasis>generate&lt;Reportname&gt;Form(..)</emphasis>:
            devuelve la vista del formulario web que permite al
            usuario seleccionar el formato de salida del informe y solicitar
            su generación mediante un botón.</para>
          </listitem>

          <listitem>
            <para xml:lang="es"><emphasis>generate&lt;Reportname&gt;(..)</emphasis>: atiende
            la petición de generación del informe recopilando los datos
            necesarios que se deben incluir en él. Para ello, por defecto invoca el método
            <emphasis>&lt;formBackingObject&gt;.find&lt;formBackingObject&gt;Entries(0,
            10)</emphasis> por lo que se tomarán los 10 primeros registros de la entidad para
            rellenar el informe.</para>

            <programlisting>@RequestMapping(value = "/reports/informe", params = "form",
		method = RequestMethod.GET)
public String EntityController.generateInformeForm(Model uiModel) {
    String[] reportFormats =  {"pdf"};
    Collection&lt;String&gt; reportFormatsList = Arrays.asList(reportFormats);
    uiModel.addAttribute("report_formats", reportFormatsList);
    return "users/informe";
}

@RequestMapping(value = "/reports/informe", method = RequestMethod.GET)
public String EntityController.generateInforme(
		@RequestParam(value = "format", required = true) String format, Model uiModel) {
    if ( null == format || format.length() &lt;= 0 ) {
            uiModel.addAttribute("error", "message_format_required");
            return "users/informe";
    }
    final String REGEX = "(pdf)";
    Pattern pattern = Pattern.compile(REGEX, Pattern.CASE_INSENSITIVE);
    Matcher matcher = pattern.matcher(format);
    if ( !matcher.matches() ) {
            uiModel.addAttribute("error", "message_format_invalid");
            return "users/informe";
    }
    Collection&lt;Entity&gt; dataSource = Entity.findEntityEntries(0, 10);
    if (dataSource.isEmpty()) {
            uiModel.addAttribute("error", "message_emptyresults_noreportgeneration");
            return "users/informe";
    }
    uiModel.addAttribute("format", format);
    uiModel.addAttribute("title", "INFORME");
    uiModel.addAttribute("informeList", dataSource);
    return "entity_informe";
}</programlisting>
          </listitem>
        </itemizedlist>
      </listitem>
    </itemizedlist>

    <note>
      <para xml:lang="es">El comando web report add puede ejecutarse tantas veces como se
      desee sobre el mismo controlador. Si el nombre del informe a añadir ya
      existe previamente, se añadirán los formatos especificados
      a los ya definidos. Si el nombre dado al nuevo informe
      definido no existía, se añadirá su definición en la anotación
      <emphasis>@GvNIXReports</emphasis>.</para>

      <programlisting>@GvNIXReports({ "informe|pdf,xls,csv", "otroinforme|pdf" })</programlisting>
	</note>
	
    <note>
      <para xml:lang="es">Los valores de la anotación <emphasis>@GvNIXReports</emphasis>
      <emphasis role="bold">no son sensibles</emphasis> a mayúsculas por tanto si
      manualmente se establecen los valores de la anotación como:</para>

      <programlisting>@GvNIXReports({ "informe|pdf", "INFORME|xls,csv" })</programlisting>

      <para xml:lang="es">es equivalente a:</para>

      <programlisting>@GvNIXReports({ "informe|pdf,xls,csv" })</programlisting>
    </note>
  </section>

  <section xml:id="addon-web-report_futuras-versiones">>
    <title xml:lang="es">Futuras versiones</title>

	<itemizedlist>
	      <listitem>
		    <para xml:lang="es">Incrementar la funcionalidad del informe generado, 
		    incluyendo la visualización de las relaciones que pueda tener la entidad sobre
		    la que se declara el informe. En la sección de recetas se muestra una forma de
		    mostrar las relaciones de una entidad en el informe mediante el 
		    <link linkend="recetas-reports-subinforme">uso de subinformes</link>.</para>
		 </listitem>
	</itemizedlist>
  </section>
</chapter>
