<?xml version="1.0" encoding="UTF-8"?>
<chapter version="5.0" xml:id="recetas" xml:lang="es"
         xmlns="http://docbook.org/ns/docbook"
         xmlns:xlink="http://www.w3.org/1999/xlink"
         xmlns:ns5="http://www.w3.org/1998/Math/MathML"
         xmlns:ns4="http://www.w3.org/2000/svg"
         xmlns:ns3="http://www.w3.org/1999/xhtml"
         xmlns:ns="http://docbook.org/ns/docbook">
  <title xml:lang="es">Recetas</title>

  <para xml:lang="es">En este capítulo se verá como realizar algunas modificaciones 
  sobre el código generado para adaptar la aplicación a distintos
  requerimientos habituales dada la experiencia de uso del framework.</para>

  <section xml:id="recetas-repositorio_maven">
    <title xml:lang="es">Repositorios Maven</title>

    <para xml:lang="es">Cuando una funcionalidad generada por el framework
    requiere de librerías externas, el add-on correspondiente registrará
    el repositorio de artefactos Maven necesario en el fichero
    <emphasis>pom.xml</emphasis>, si todavía no lo estaba.</para>
    
    <para xml:lang="es">No es habitual, pero en el caso de ser necesario añadir algún
    repositorio adicional al proyecto puede realizarse mediante el comando de la consola <link
    xlink:href="http://static.springsource.org/spring-roo/reference/html-single/index.html#command-index-maven-repository-add">
    maven repository add </link>. El siguiente ejemplo define el repositorio Maven
    interno de la Consejería de Infraestructuras, Transporte y Medio
    Ambiente. Este repositorio es accesible únicamente desde la red interna
    de la Consejería.</para>

<programlisting>roo-gvNIX> maven repository add --id citma-maven --name "CITMA Maven Repository" 
		--url http://benigno.coput.gva.es:8081/nexus/content/groups/public
Updated ROOT/pom.xml [
		added repository http://benigno.coput.gva.es:8081/nexus/content/groups/public]</programlisting>

    <para xml:lang="es">El comando modificará el fichero pom.xml y en la sección
    <emphasis>&lt;repositories&gt;</emphasis> añadirá la definición del repositorio
    indicado.</para>

    <programlisting>&lt;repositories&gt;
    ...
    &lt;repository&gt;
        &lt;id&gt;citma-maven&lt;/id&gt;
        &lt;url&gt;http://benigno.coput.gva.es:8081/nexus/content/groups/public&lt;/url&gt;
        &lt;name&gt;CITMA Maven Repository&lt;/name&gt;
    &lt;/repository&gt;
    ...
&lt;/repositories&gt;</programlisting>

    <para xml:lang="es">En el lado opuesto, también es posible eliminar repositorios
    Maven del proyecto mediante el comando <link
    xlink:href="http://static.springsource.org/spring-roo/reference/html-single/index.html#command-index-maven-repository-remove">
    maven repository remove </link>. </para>

  </section>

  <section xml:id="recetas-finders-multitud-campos">
    <title xml:lang="es">Desarrollo de buscadores con gran cantidad de campos</title>

    <para xml:lang="es">El add-on de los buscadores (finder) tiene una limitación
    impuesta por el sistema operativo Windows en el tamaño máximo del nombre de
    archivos. La limitación del tamaño máximo del nombre de
    archivo limita al comando <emphasis>finder add</emphasis> a generar
    nombres de buscadores que generen paths a archivos jspx de tamaño
    menor de 244 caracteres.</para>

    <para xml:lang="es">Existe una forma para generar buscadores con un tamaño
    superior al de la limitación impuesta. Consiste en
    dividir el buscador necesario en varios más pequeños, parciales de unos
    pocos campos cada uno, y al final unir el código que se genera para cada
    uno de ellos en un unico método. Esto implica tener que modificar el
    código que se ha generado para el buscador en la entidad, el controlador y
    la jspx de la siguiente forma:</para>

    <itemizedlist>
      <listitem>
        <para xml:lang="es">En el archivo Java de la entidad para la que se está
        generando el buscador crear un método con el nombre, por ejemplo, 
        <emphasis>findByTodo</emphasis> y cuyos parámetros de entrada serán
        todos los parámetros que reciben los métodos de los buscadores
        parciales que se hayan generado. Del mismo modo, el cuerpo de este nuevo
        método es la unión de la implementación de todos los buscadores
        parciales. Es posible modificar el código, según se explica
        en el siguiente apartado, de forma que los parámetros sean
        opcionales.</para>
      </listitem>

      <listitem>
        <para xml:lang="es">De manera similar, en el fichero Java del controlador de la
        entidad crear dos métodos: uno <emphasis>findByTodoForm</emphasis> que
        devolverá la vista del formulario del buscador y otro
        <emphasis>findByTodo</emphasis> que responderá a las peticiones que lleguen
        desde el formulario del buscador. Este segundo método, al igual que
        en el método creado en la entidad, deberá tener como parámetros la unión de
        todos parámetros de los métodos de los buscadores parciales en el controlador.
        El cuerpo de este método deberá invocar al método <emphasis>findByTodo</emphasis>
        creado en la entidad. Para definir la anotación @RequestMapping de estos dos
        métodos se recomienda utilizar como guía los buscadores parciales ya existentes.</para>
      </listitem>

      <listitem>
        <para xml:lang="es">Finalmente, crear una página jspx (por ejemplo, con nombre
        findByTodo.jspx) en el directorio WEB-INF/views/&lt;entidad&gt; que
        contendrá el formulario del buscador. Esta página debe incluir todos
        los campos que hayan en el resto de páginas jspx de los buscadores parciales.
        Recordar, que esta vista se ha de definir también en el fichero views.xml
        que hay en la misma carpeta y que esta vista es la que devuelve
        el método findByTodoForm creada anteriormente en el controlador.</para>
      </listitem>
    </itemizedlist>

    <para xml:lang="es">Con todo lo anterior se ha descrito un proceso manual
    que permite montar buscadores con cualquier cantidad de campos.</para>
	
  </section>
	
  <section xml:id="recetas-finders-modificar">
    <title xml:lang="es">Campos opcionales en los buscadores</title>

    <para xml:lang="es">El comportamiento que implementa automáticamente la generación
    de buscadores es hacer todos los campos de busqueda obligatorios.
    Por lo tanto, si no se proporciona alguno de los parámetros
    se generará una excepción indicando la falta de un parámetro
    obligatorio. En ocasiones no es lo deseado, es decir,
    puede necesario que los parámetros no informados simplemente
    no se incluyan en la consulta si no se especifican. Para ello se debe
    modificar el código del método <emphasis>finderByXxxx</emphasis>
    declarado en el aspecto Java <emphasis>*_Roo_Finder.aj</emphasis>.
    A continuación se ejemplifica como hacer este cambio.</para>

    <para xml:lang="es">Hacer <emphasis>push-in</emphasis> del método tal y como
    se comenta en la sección sobre <link
    linkend="guia-desarrollo_generacion-codigo">modificación del código
    generado</link> y llevarlo al fichero Java de la entidad. Una vez allí
    modificarlo para que no requiera los campos y así construir la consulta
    considerando tan solo los parámetros que lleguen informados:</para>

    <programlisting>public static TypedQuery&lt;Owner&gt; findOwnersByLastNameLikeAndCityLike(
    		String lastName, String city) {
  <command>StringBuilder query = new StringBuilder("SELECT o FROM Owner AS o");</command>
  <command>StringBuilder whereClause = new StringBuilder();</command>

  <command>// if (lastName == null || lastName.length() == 0)
  // throw new IllegalArgumentException(&quot;The lastName argument is required&quot;);
  if (lastName != null &amp;&amp; lastName.length() &gt; 0) {</command>
    lastName = lastName.replace('*', '%');
    if (lastName.charAt(0) != '%') {
        lastName = "%" + lastName;
    }
    if (lastName.charAt(lastName.length() - 1) != '%') {
        lastName = lastName + "%";
    }
    <command>whereClause.append(" WHERE LOWER(o.lastName) LIKE LOWER(:lastName)");</command>
  }

  <command>// if (city == null || city.length() == 0)
  // throw new IllegalArgumentException(&quot;The city argument is required&quot;);
  if (city != null &amp;&amp; city.length() &gt; 0) {</command>
    city = city.replace('*', '%');
    if (city.charAt(0) != '%') {
        city = "%" + city;
    }
    if (city.charAt(city.length() - 1) != '%') {
        city = city + "%";
    }
    <command>if (whereClause.length() &gt; 0) {
      whereClause.append(" AND LOWER(o.city) LIKE LOWER(:city)");
    } else {
      whereClause.append(" WHERE LOWER(o.city) LIKE LOWER(:city)");
    }</command>
  }
  <command>query.append(whereClause);</command>

  EntityManager em = Owner.entityManager();
  TypedQuery&lt;Owner&gt; q = em.createQuery(<command>query.toString()</command>, Owner.class);
  <command>if (lastName != null &amp;&amp; lastName.length() &gt; 0) {</command>
    q.setParameter("lastName", lastName);
  }
  <command>if (city != null &amp;&amp; city.length() &gt; 0) {</command>
    q.setParameter("city", city);
  }
  return q;
}</programlisting>

    <para xml:lang="es">Se han marcado en negrita las líneas de código modificadas.
    Como puede observarse, se construye la consulta de forma dinámica de forma
    que se añaden los distintos filtros al <emphasis>where</emphasis> de la consulta
    solo si el campo asociado al filtro tiene algún valor y se elimina la generación
    de excepciones al detectar alguno de dichos campos como vacío.</para>

    <para xml:lang="es">En este ejemplo se ha construido la consulta usando un
    StringBuilder en el que se genera la consulta deseada, pero se podría
    utilizar cualquier otra tecnología como por ejemplo Hibernate
    Criteria Builder.</para>

    <para xml:lang="es">Como ya se ha comentado, el código generado fuerza que todos los
    parámetros de búsqueda sean obligatorios, esto implica también al
    formulario situadao en la página jspx. Tal como se genera, si alguno de los campos no se
    rellena, no dejará enviar la petición. Se debe editar la jspx y
    modificar el atributo <emphasis>required</emphasis> de los campos
    <emphasis>field</emphasis> y establecer su valor a
    <emphasis>false</emphasis>, no olvidar cambiar el valor
    del atributo <emphasis>z</emphasis> a
    "<emphasis>user-managed</emphasis>" para indicar que este campo ha sido
    personalizado.</para>

    <programlisting>&lt;field:input disableFormBinding="true" field="city"
    		id="f_com_springsource_petclinic_domain_Owner_city" max="30" <emphasis
        role="bold">
        		required="false" z="user-managed"</emphasis>/&gt;</programlisting>

    <para xml:lang="es">En los buscadores en los que uno de los parámetros sea
    una entidad del modelo, es decir una relación con otra entidad del modelo,
    será necesario realizar un cambio adicional.
    En estos casos se visualiza un selector desplegable, mediante el
    componente <emphasis>select.tagx</emphasis>. Sin embargo, este selector
    tiene el inconveniente de que no incluye una opción vacía
    entre las disponibles, con lo que obliga a elegir siempre algún valor.
    Un ejemplo de este caso se encuentra en el buscador findPetsByOwner generado
    para la entidad Pet en el ejemplo de <emphasis>clinic.roo</emphasis>
    .</para>

    <para xml:lang="es">La forma de tratar estas peticiones en Spring MVC es intentar
    cargar el registro asociado con el valor del selector que llega como parámetro.
    Por tanto si llega como parámetro un dato que no concuerda con ningún registro de
    la entidad parámetro, usará null como valor. Como se ha comentado,
    el componente <emphasis>select.tagx</emphasis> no ofrece una opción
    vacía. gvNIX en su <link linkend="addon-web-screen-patterns">Add-on Web
    MVC Pattern</link> incluye un componente
    <emphasis>select-withempty.tagx</emphasis> que sí lo ofrece. Mediante el
    comando <emphasis>web mvc pattern setup</emphasis> se instalan los
    componentes de MVC Pattern entre los que se incluye el selector con
    opción vacía. Entonces es posible modificar la jspx del buscador findPetsByOwner
    para que utilice <emphasis>select-withempty</emphasis> en lugar del original
    de la siguiente forma:</para>

    <programlisting>&lt;div xmlns:field="urn:jsptagdir:/WEB-INF/tags/form/fields" ... 
    		<emphasis role="bold">xmlns:pattern-field="urn:jsptagdir:/WEB-INF/tags/pattern/form/fields"</emphasis>
    		version="2.0"&gt;
  &lt;jsp:directive.page contentType="text/html;charset=UTF-8"/&gt;
  &lt;jsp:output omit-xml-declaration="yes"/&gt;
  &lt;form:find finderName="ByOwner" id="ff_com_springsource_petclinic_domain_Pet"
  		path="/pets" z="ThIGSmua6R7WM6q2P1BpNC3zMi4="&gt;
      <emphasis role="bold">&lt;pattern-field:select-withempty disableFormBinding="true" field="owner"
      		emptyValueEnable="true" emptyValue="0"
      		id="f_com_springsource_petclinic_domain_Pet_owner" itemValue="id"
      		items="${owners}" path="/owners" required="false" z="user-managed"/&gt;</emphasis>
  &lt;/form:find&gt;
&lt;/div&gt;</programlisting>

    <para xml:lang="es">El componente select-withempty.tagx tiene los mismos atributos que el
    select.tagx y otros tres adicionales:</para>

    <itemizedlist>
      <listitem>
        <para xml:lang="es"><emphasis>emptyValueEnable</emphasis>: Valor booleano que habilita la
        opción vacía en el selector.</para>
      </listitem>

      <listitem>
        <para xml:lang="es"><emphasis>emtpyValue</emphasis>: Valor a dar
        para la opción vacía del selector. Si se corresponde con una entidad,
        este valor no debería corresponder con ningún identificador existente
        para esa entidad, de esta forma el valor que llega al buscador es
        nulo.</para>
      </listitem>

      <listitem>
        <para xml:lang="es"><emphasis>emptyLabel</emphasis>: Descripción a mostrar para la
        opción vacía del selector.</para>
      </listitem>
    </itemizedlist>

    <para xml:lang="es">Con este cambio y con el método findPetsByOwner modificado
    para que no sea requerido el parámetro Owner, de la misma forma
    que se explicado antes, se consigue realizar búsquedas por parámetros opcionales
    sea cual sea el tipo del parámetro.</para>
  </section>
  
  <section xml:id="recetas-reports-fuentes">
    <title xml:lang="es">Instalar fuentes de letra para los informes</title>

    <para xml:lang="es">Las fuentes instaladas automáticamente proporcionan soporte para
    la inclusión de texto en negrita y cursiva. El desarrollador debe instalar cualquier
    otro tipo de fuente que se utilice en los informes que diseñe. Para ello, basta con
    ampliar las definiciones <emphasis>fontFamily</emphasis> realizadas en el archivo
    <emphasis>gvnix_reportfonts.xml</emphasis> y copiar los archivos de
    fuente en la carpeta <emphasis>jasperfonts</emphasis>. La inclusión de nuevas
    fuentes se puede realizar utilizando una utilidad que ofrece iReport.
    Desde el menú <emphasis>Herramientas &gt; Opciones > Pestaña
    Fonts</emphasis> se accederá a la siguiente pantalla:</para>

    <figure>
      <title xml:lang="es">Herramienta de gestión de fuentes de IReport</title>

      <mediaobject>
        <imageobject>
          <imagedata align="center" fileref="images/iReportFonts.png"></imagedata>
        </imageobject>
      </mediaobject>
    </figure>

    <para>Desde esta pantalla, seleccionando una fuente de la lista de
    fuentes instaladas en iReports y con el botón <emphasis>"Export as
    extension"</emphasis> se creará un archivo JAR que al descomprimirlo
    contiene:</para>

    <itemizedlist>
      <listitem>
        <para xml:lang="es">Directorio fonts</para>

        <itemizedlist>
          <listitem>
            <para xml:lang="es">Archivos de fuentes en formato TTF.</para>
          </listitem>

          <listitem>
            <para xml:lang="es">Archivo
            <emphasis>fontsfamily&lt;IdentificadorAleatorio&gt;.xml</emphasis></para>
          </listitem>
        </itemizedlist>
      </listitem>

      <listitem>
        <para xml:lang="es">Archivo
        <emphasis>jasperreports_extension.properties</emphasis></para>
      </listitem>
    </itemizedlist>

    <para xml:lang="es">Para instalar esta fuente en la aplicación se deben
    copiar los ficheros con extensión TTF a 
    <emphasis>/WEB-INF/classes/jasperfonts</emphasis> y del archivo
    <emphasis>fontsfamily&lt;IdentificadorAleatorio&gt;.xml</emphasis>
    adaptar el elemento &lt;fontFamily/&gt; para copiarlo en el archivo del proyecto
    <emphasis>gvnix_reportfonts.xml</emphasis> (modificando las rutas para
    que apunten a <emphasis>jasperfonts</emphasis>). El archivo <emphasis>
    jasperreports_extension.properties</emphasis> se puede ignorar porque
    ya se encuentra definido en el proyecto en
    <emphasis>/WEB-INF/classes.</emphasis></para>
  </section>

  <section xml:id="recetas-reports-subinforme">
    <title xml:lang="es">Diseño de informes con sub informes</title>

    <para xml:lang="es">gvNIX mediante el <link linkend="addon-web-report">Add-on Web
    Report</link> facilita la creación de informes sobre una entidad.
    El add-on genera el diseño de un informe Jasper Reports básico el cual
    se puede modificar utilizando un diseñador gráfico como iReport.</para>

    <para xml:lang="es">Puede ser necesario mostrar en un informe una lista de
    entidades relacionadas con la entidad sobre la que se ha generado el
    informe. Por ejemplo, en la aplicación del script de ejemplo clinic.roo, se podría
    definir un informe sobre la entidad Owner y desear mostrar para cada Owner
    la lista de mascotas que le pertenecen, es decir, listar la relación definida por el campo
    <emphasis>Set&lt;Pet&gt; pets</emphasis> de la entidad Owner.</para>

    <note>
      <para xml:lang="es">Para este ejemplo se utilizará la versión 4.0.1 de iReport.</para>
    </note>

    <para xml:lang="es">Partiendo del informe definido por el siguiente comando de gvNIX:</para>

    <programlisting>roo-gvNIX&gt; web report add --controller ~.web.OwnerController --reportName ownerpets</programlisting>

    <para xml:lang="es">En src/main/webapp/WEB-INF/reports se creará el archivo con el diseño
    del informe <emphasis>owner_ownerpets.jrxml</emphasis>. Abriendo este
    archivo usando iReport (<emphasis>Archivo &gt; Open</emphasis>) aparecerá
    una pantalla como la que se muestra a continuación.</para>

    <figure>
      <title xml:lang="es">iReport - Diseñador</title>

      <mediaobject>
        <imageobject>
          <imagedata align="center" fileref="images/recetas-subreport-ireport-1.png"></imagedata>
        </imageobject>
      </mediaobject>
    </figure>

    <para xml:lang="es">En la parte izquierda, en la pestaña con título
    <emphasis>Report Inspector</emphasis> se pueden observar
    los elementos principales del diseño de informes. </para>

    <figure>
      <title xml:lang="es">iReport - Report Inspector</title>

      <mediaobject>
        <imageobject>
          <imagedata align="center" fileref="images/recetas-subreport-ireport-2.png"></imagedata>
        </imageobject>
      </mediaobject>
    </figure>

    <para xml:lang="es">Lo primero que se debe hacer es declarar un nuevo parámetro con,
    por ejemplo, el nombre <emphasis>SubReportPetsLocation</emphasis>. Para ello hacer
    click con el botón derecho sobre el elemento
    <emphasis>Parameters</emphasis> y seleccionar la opción
    <emphasis>Agregar Parameter</emphasis>. Justo debajo del último parámetro
    aparecerá uno nuevo con nombre <emphasis>parameter1</emphasis>. Al seleccionarlo,
    en la parte derecha de la ventana de iReport se podrán ver
    sus propiedades. Modificar sus propiedades estableciendo en la
    propiedad<emphasis>Name</emphasis> el valor
    <emphasis>SubReportPetsLocation</emphasis> y en la propiedad
    <emphasis>Parameter Class</emphasis> el valor
    <emphasis>net.sf.jasperreports.engine.JasperReport</emphasis>.</para>

    <para xml:lang="es">A continuación, añadir un elemento <emphasis>Subreport</emphasis>
    al diseño. Para que aparezca el <emphasis>Subreport</emphasis>
    para cada elemento de la lista de Owners,
    se debe añadir en la banda de detalle <emphasis>Detail1</emphasis> del informe.
    Será necesario aumentar la altura de la banda <emphasis>Detail1</emphasis>.
    Para ello, seleccionarla y en sus propiedad <emphasis>Band
    height</emphasis> especificar el valor <emphasis>55</emphasis>.
    De la paleta de elementos
    seleccionar el <emphasis>Subreport</emphasis> y arrastrarlo
    a la banda de detalle. Se abrirá un asistente, seleccionar la opción
    <emphasis>Just create the subreport element</emphasis> y cerrar con
    <emphasis>Terminar</emphasis>. Es posible modificar las dimensiones del elemento
    <emphasis>Subreport</emphasis> arrastrando las esquinas de la caja del elemento.</para>

    <figure>
      <title xml:lang="es">iReport - Subreport</title>

      <mediaobject>
        <imageobject>
          <imagedata align="center" fileref="images/recetas-subreport-ireport-3.png"></imagedata>
        </imageobject>
      </mediaobject>
    </figure>

    <para xml:lang="es">Antes de seguir con el establecimiento de las propiedades del
    Subreport, es necesario declarar un campo del informe que permitirá
    acceder al campo <emphasis>pets</emphasis> de la Entidad
    <emphasis>Owner</emphasis>. En <emphasis>Report Inspector</emphasis>,
    seleccionar <emphasis>Fields</emphasis> y con el botón derecho
    <emphasis>Agregar Field</emphasis>. Modificar también este elemento
    estableciendo en la propiedad <emphasis>Name</emphasis> el valor
    <emphasis>pets</emphasis> y en la propiedad <emphasis>Field Class</emphasis>
    el valor <emphasis>java.util.Collection</emphasis>.</para>

    <para xml:lang="es">Se debe indicar cuales son las propiedades del 
    <emphasis>Subreport</emphasis>. Para ello, en la
    ventana de propiedades de la derecha buscar las siguientes propiedades y
    establecer los valores que se especifican a continuación:</para>

    <orderedlist>
      <listitem>
        <para xml:lang="es">Subreport Expression = $P{SubReportPetsLocation}</para>
      </listitem>

      <listitem>
        <para xml:lang="es">Expression Class = net.sf.jasperreports.engine.JasperReport</para>
      </listitem>

      <listitem>
        <para xml:lang="es">Connection type = Use a datasource expression</para>
      </listitem>

      <listitem>
        <para xml:lang="es">Data Source Expression = 
        new net.sf.jasperreports.engine.data.JRBeanCollectionDataSource($F{pets})</para>
      </listitem>
    </orderedlist>

    <para xml:lang="es">En el flujo de ejecución de un informe en Jasper Reports,
    los parámetros del mismo han de ser informados antes de su
    visualización o, de lo contrario, se tomarán los valores por defecto
    que se hubiesen definido o <emphasis>null</emphasis> en su defecto.
    Observar que se ha definido el parámetro
    <emphasis>SubReportPetsLocation</emphasis> y el valor que toma este
    parámetro en tiempo de ejecución ha de ser una ruta absoluta al sistema
    de archivos o al classpath de la aplicación. En la sección del <link
    linkend="addon-web-report">Add-on Web Report</link> se explicó que al
    añadir un informe a la aplicación, utilizando el comando <emphasis>web report
    add</emphasis>, en el archivo
    <emphasis>src/main/webapp/WEB-INF/spring/jasper-views.xml</emphasis> se
    declara un bean que establece la ruta hasta el fichero jrxml del informe
    añadido. Este bean tiene un atributo que indica el lugar donde se declaran
    los subreports que se usan en los distintos informes mediante el atributo
    <emphasis>p:subReportsUrls-ref</emphasis>.</para>

    <programlisting>&lt;bean id="owner_ownerpets"
class=
 "com.springsource.petclinic.web.servlet.view.jasperreports.CustomJasperReportsMultiFormatView" 
p:reportDataKey="ownerpetsList" p:url="/WEB-INF/reports/owner_ownerpets.jrxml"
p:subReportDataKeys-ref="subReportDataKeys" <emphasis role="bold">p:subReportUrls-ref="subReportUrls"</emphasis> /&gt;</programlisting>

    <para xml:lang="es">El elemento anterior marcado en negrita apunta 
    al elemento <emphasis>&lt;util:map/&gt;</emphasis>, declarado también
    en el fichero jasper-views.xml. Aquí se ha de especificar el valor que
    debe tomar el parámetro <emphasis>SubReportPetsLocation.</emphasis>
    Modificar este elemento añadiendo una entrada, quedando como se muestra
    a continuación.</para>

    <programlisting>&lt;util:map id="<emphasis role="bold">subReportUrls</emphasis>"&gt;
  &lt;!-- This entry key must be declared exactly as declared in the master JRXML file --&gt;
  &lt;!-- Add one &lt;entry /&gt; node for each sub-report you need to define --&gt;
  <emphasis role="bold">&lt;entry key="SubReportPetsLocation"
  		value="/WEB-INF/reports/owner_ownerpets_sub_pets.jrxml"/&gt;</emphasis>
&lt;/util:map&gt;</programlisting>

    <para xml:lang="es">En el elemento <emphasis>&lt;util:map/&gt;</emphasis>
    se pueden definir tantos elementos <emphasis>&lt;entry/&gt;</emphasis> como 
    sea necesario para definir los parámetros que indican el lugar donde se
    localizan los archivos jrxml de los distintos
    subreports.</para>

    <para xml:lang="es">Ahora se debe diseñar el informe que mostrará el
    listado de mascotas (pets) que conformará el subreport.</para>

    <para xml:lang="es">Crear un nuevo diseño de informe (<emphasis>Archivo &gt;
    Nuevo</emphasis>), y en el asistente seleccionar
    <emphasis>Blank A4</emphasis> y <emphasis>Open This Template</emphasis>.
    Se solicitará un nombre para el diseño y el lugar donde guardarlo.
    Indicar, por ejemplo <emphasis>owner_ownerpets_sub_pets.jrxml</emphasis> y
    guardarlo en el mismo directorio donde se encuentre el report padre
    (<emphasis>owner_ownerpets.jrxml</emphasis>).</para>

    <figure>
      <title xml:lang="es">iReport - Nuevo diseño</title>

      <mediaobject>
        <imageobject>
          <imagedata align="center" fileref="images/recetas-subreport-ireport-4.png"></imagedata>
        </imageobject>
      </mediaobject>
    </figure>

    <important>
      <para xml:lang="es">Se debe validar que el nuevo informe se crea con
      el lenguage Java configurado para las expresiones. En <emphasis>Report
      Inspector</emphasis>, al seleccionar el primer elemento (el nombre del
      informe) y mirar en sus propiedades (parte derecha de la pantalla de
      iReport) se debe buscar la propiedad <emphasis>Language</emphasis>, si
      no tiene el valor Java, cambiarla usando el desplegable.</para>
    </important>

    <para xml:lang="es">Este nuevo informe, que constituirá el subreport, es un informe
    a todos los efectos, por tanto se debe definir los campos (elemento
    Fields del diseño), parámetros (elemento Parameters), etc.</para>

    <para xml:lang="es">Al igual que se ha hecho anteriormente con el
    campo pets del informe padre,
    definir los campos que permiten acceder a los valores de la entidad
    Pet que se visualizarán en el subreport. Click con el botón derecho sobre
    Fields y Agregar Field:</para>

    <orderedlist>
      <listitem>
        <para xml:lang="es">Crear field con nombre
        <emphasis>name</emphasis> y clase 
        <emphasis>java.lang.String</emphasis> </para>
      </listitem>

      <listitem>
        <para xml:lang="es">Crear field con nombre
        <emphasis>weight</emphasis> y clase
        <emphasis>java.lang.Float</emphasis></para>
      </listitem>

      <listitem>
        <para xml:lang="es">Crear field con nombre
        <emphasis>type</emphasis> y clase
        <emphasis>com.springsource.petclinic.reference.PetType</emphasis>
        (enumerado declarado en el proyecto clinic.roo)</para>
      </listitem>
    </orderedlist>

    <para xml:lang="es">El diseño del informe se compone de distitnas bandas, donde se
    colocan los elementos a mostrar (<emphasis>Title, Page Header,
    Column Header, Detail1, Column Footer, ...</emphasis>). Para un
    subreport como el de este ejemplo, algunas bandas son
    innecesarias y pueden ser eliminadas. Esto permitirá ajustar mejor el
    diseño completo del informe (informe padre ownerpets + subreport
    pets). Si se hace click con el botón derecho sobre
    <emphasis>Title</emphasis> y se selecciona <emphasis>Delete
    Band</emphasis>, es eliminada. Hacerlo con todas las bandas excepto con
    <emphasis>Column Header, Detail1 y Summary</emphasis>.</para>

    <figure>
      <title xml:lang="es">iReport - Bandas subreport</title>

      <mediaobject>
        <imageobject>
          <imagedata align="center" fileref="images/recetas-subreport-ireport-6.png"></imagedata>
        </imageobject>
      </mediaobject>
    </figure>

    <para xml:lang="es"><emphasis>Column Header</emphasis> es una banda que se dibujará
    solo al inicio de la columna del informe (en este caso solo existirá
    una). Añadir textos estáticos que harán las veces de cabecera de
    tabla. Para ello, de la paleta de componentes, seleccionar
    <emphasis>Static Text</emphasis> y arrastrarlo hasta la banda
    <emphasis>Column Header</emphasis>.</para>

    <figure>
      <title xml:lang="es">iReport - Paleta</title>

      <mediaobject>
        <imageobject>
          <imagedata align="center" fileref="images/recetas-subreport-ireport-5.png"></imagedata>
        </imageobject>
      </mediaobject>
    </figure>

    <para xml:lang="es">En el primer <emphasis>Static Text</emphasis> establecer el
    valor <emphasis>Nombre</emphasis> y repetir la misma operación para definir un
    texto para el campo <emphasis>Peso</emphasis> y para el campo
    <emphasis>Tipo</emphasis>. Es posible distribuir las etiquetas para que quede
    tal y como se muestra en la captura anterior.</para>

    <para xml:lang="es">A continuación, hacer lo mismo pero usando el elemento
    <emphasis>Text Field</emphasis>. Este elemento sirve para mostrar el valor
    de un campo de la entidad <emphasis>Pet</emphasis> y se ha de corresponder
    con los field definidos anteriormente (<emphasis>name, weight,
    type</emphasis>). Estos elementos <emphasis>Text Field</emphasis> se
    definirán en la banda <emphasis>Detail1</emphasis>, puesto que se
    repetirán para cada uno de los elementos de la fuente de datos del
    subreport. Recordar que la fuente de datos de este subreport se había
    definido anteriormente como <emphasis>JRBeanCollectionDataSource</emphasis> 
    usando la colección de <emphasis>Pets</emphasis> que pertenecen a un
    <emphasis>Owner</emphasis>.</para>

    <para xml:lang="es">En los Text Field, es importante establecer correctamente la
    propiedad Expression Class, esta se ha de corresponder con el tipo Java
    del field definido y que se va a usar para mostrarlo. Por ejemplo, el Text
    Field que mostará el peso de la mascota tendría las propiedades como
    sigue:</para>

    <itemizedlist>
      <listitem>
        <para xml:lang="es">Text Field Expression = $F{weight}</para>
      </listitem>

      <listitem>
        <para xml:lang="es">Expression Class = java.lang.Float</para>
      </listitem>
    </itemizedlist>

    <para>Para establecer el Text Field Expression se puede utilizar el diálogo
    que se muestra a continuación Este diálogo permite seleccionar elementos de 
    los campos definidos en el informe, de los parámetros e incluso acceder a
    alguna de las operaciones que proporcionan estos objetos.</para>

    <figure>
      <title xml:lang="es">iReport - Diálogo Text Field Expression</title>

      <mediaobject>
        <imageobject>
          <imagedata align="center" fileref="images/recetas-subreport-ireport-7.png"></imagedata>
        </imageobject>
      </mediaobject>
    </figure>

    <para xml:lang="es">Obviamente, en un <emphasis>Text Field</emphasis> es posible
    establecer expresiones más elaboradas, como añadir a la cadena las unidades de
    peso. Se debe tener en cuenta que la propiedad <emphasis>Expression
    Class</emphasis> deberá establecerse al tipo Java resultante de la
    expresión (por ejemplo, $F{weight} + "kg" da como resultado un
    java.lang.String). Establecer en el <emphasis>Text
    Field</emphasis> asociado con el tipo de mascota la expresión
    <emphasis>$F{type}.toString()</emphasis> y la clase
    <emphasis>java.lang.String</emphasis>.</para>

    <para xml:lang="es">Ya está diseñada la banda de detalle y para terminar el
    subreport, opcionalmente, se puede definir un <emphasis>Text
    Field</emphasis> que indique cuantos registros de
    <emphasis>Pet</emphasis> se han impreso cada vez que se ejecuta el
    subreport. Esto ya se encuentra incluido en el informe padre (owners)
    y se consigue utilizando la variable del report
    <emphasis>REPORT_COUNT</emphasis>, ya difinida por defecto.
    Incluirla en la banda <emphasis>Summary</emphasis> con un
    <emphasis>Text Field</emphasis> en la que el <emphasis>Expression</emphasis>
    tome el valor <emphasis>$V{REPORT_COUNT}</emphasis> y el <emphasis>Class</emphasis>
    sea <emphasis>java.lang.Integer</emphasis>.</para>

    <para xml:lang="es">Solo queda arrancar de nuevo la aplicación, desde el
    Tomcat de Eclipse o desde la línea de comandos y probar la generación
    del informe de Owners.</para>

    <figure>
      <title xml:lang="es">Informe Owners con subreport Pets</title>

      <mediaobject>
        <imageobject>
          <imagedata align="center" fileref="images/recetas-subreport-ireport-8.png"></imagedata>
        </imageobject>
      </mediaobject>
    </figure>

    <para xml:lang="es">JasperReports permite gran cantidad de opciones al trabajar con subreports
    (paso de parámetros desde el informe padre a los subinformes, devolución
    de parámetros desde los subinformes al informe padre, actualización de
    variables, ...). Para conocerlas con profundidad consultar la
    documentación de referencia de Jasper Reports e iReport.</para>
  </section>
  

  <section xml:id="recetas-inicializacion-aplicacion">
    <title xml:lang="es">Operaciones durante el inicio de la aplicación</title>

    <para xml:lang="es">Se pueden crear clases que se invoquen durante
    la inicialización de una aplicación.</para>
    
    <para xml:lang="es">En alguna aplicación puede ser necesario realizar
    alguna acción durante el inicio de una aplicación, como por ejemplo.
    Existen diversas formas para hacer esto en Spring.</para>
    
    <para xml:lang="es">Sino se va a interaccionar con datos, se puede usar
    la anotación @PostConstruct en un método de una clase anotada con 
    <emphasis>@Component</emphasis>.
    Hay que tener en cuenta que la inicialización del soporte de datos y
    transacciones puede no estar todavía listo en este punto.</para>

    <para xml:lang="es">Crear un listener del contexto de Spring de la
    siguiente forma:</para>

    <programlisting>@Component
  public class DataSeeder implements ApplicationListener&lt;ContextRefreshedEvent&gt; {

    @Override
        @Transactional
    public void onApplicationEvent(ContextRefreshedEvent event) {
        if (Model.countModels() == 0) {
            // Create initial Model values
        }
    }</programlisting>

  </section>


  <section xml:id="recetas-obtener-bind-status-atributo">
    <title xml:lang="es">Obtener el BindStatus de un atributo dentro de un formulario</title>

    <para xml:lang="es">Obtener el BindStatus de un atributo dentro de un formulario:</para>
    
    <programlisting>&lt;spring:bind path=&quot;${field}&quot;&gt;
        &lt;c:set var=&quot;fieldValue&quot; value=&quot;${status.value}&quot; /&gt;
    &lt;/spring:bind&gt;</programlisting>
  </section>

</chapter>
