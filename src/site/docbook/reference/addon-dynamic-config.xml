<?xml version="1.0" encoding="UTF-8"?>
<chapter version="5.0" xml:id="addon-dynamic_config"
         xmlns="http://docbook.org/ns/docbook"
         xmlns:xlink="http://www.w3.org/1999/xlink"
         xmlns:xi="http://www.w3.org/2001/XInclude"
         xmlns:svg="http://www.w3.org/2000/svg"
         xmlns:m="http://www.w3.org/1998/Math/MathML"
         xmlns:html="http://www.w3.org/1999/xhtml"
         xmlns:db="http://docbook.org/ns/docbook">
  <title>Add-on Dynamic Configuration</title>

  <section>
    <title xml:lang="es">Descripción</title>

    <para xml:lang="es">Este add-on pretende simplificar la gestión de distintos valores de
    configuración por entorno. Cuando se utiliza Maven como gestor del ciclo de
    desarrollo del proyecto existe la posibilidad de utilizar <link
    xlink:href="http://maven.apache.org/guides/introduction/introduction-to-profiles.html">
    perfiles</link> para definir los distintos entornos de
    ejecución que tendrá la aplicación (desarrollo, pruebas, integración,
    preproducción, producción, ...).</para>
    
    <para xml:lang="es">A continuación se muestra un ejemplo de parte
    de la configuración necesaria para la definición de perfiles en el
    fichero <emphasis>pom.xml</emphasis>.</para>

    <programlisting>   &lt;profiles&gt;
     &lt;profile&gt;
       &lt;id&gt;nombre-entorno&lt;/id&gt;
       &lt;properties&gt;
         &lt;nombre.propiedad&gt;valor&lt;/nombre.propiedad&gt;
         ...
       &lt;/properties&gt;
     &lt;/profile&gt;
   &lt;/profiles&gt;</programlisting>

    <para xml:lang="es">Esta funcionalidad permite configurar el comportamiento de la aplicación 
    de manera distinta según donde vaya a ser ejecutada. Por ejemplo,
    la configuracíón de la conexión con la base de datos de la aplicación
    posiblemente será una URL distinta según se esté trabajando en un entorno de
    desarrollo o un entorno de producción. </para>

    <para xml:lang="es">Para esto, en la sección <emphasis>&lt;properties&gt;</emphasis> de
    cada sección <emphasis>&lt;profile&gt;</emphasis> se pueden declarar tantas
    propiedades como se desee de
    forma que al empaquetar la aplicación (habitualmente en formato WAR), se
    reemplace el valor de estas propiedades en los ficheros adecuados. Esto
    implica que en distintos archivos del proyecto, como puede ser
    <emphasis>persistence.xml</emphasis>, empiecen a aparecer definidas
    variables con el formato <emphasis>${nombre.propiedad}</emphasis>. Esta
    circunstancia, a la larga, puede complicar la comprensión de la
    configuración del proyecto o dificultar su gestión. Por ejemplo, podría
    aparecer la siguiente modificación en el fichero 
    <emphasis>src/main/resources/META-INF/persistence.xml</emphasis>:</para>
    
	<programlisting>&lt;property name=&quot;hibernate.hbm2ddl.auto&quot; value=&quot;${hibernate.hbm2ddl.auto}&quot;/&gt;</programlisting>
	
	<para xml:lang="es">Esta circunstancia, a la larga, puede complicar la comprensión
	de la configuración del proyecto o dificultar su gestión.</para>
    
  </section>

  <section>
    <title xml:lang="es">Funcionalidad</title>

    <para xml:lang="es">Vista la problemática descrita en el punto anterior, el add-on
    dynamic configuration pretende simplificar esta gestión.
    Permite definir distintas configuraciones de manera rápida y simple.
    Además, es independiente del sistema de gestión del ciclo de vida
    del proyecto, ya que aunque actualmente las configuraciones solo se pueden exportar
    a perfiles Maven, el add-on es lo suficientemente general como para poder
    exportar a formatos Ant, etc.</para>

    <para xml:lang="es">A medida que se van ejecutando comandos del add-on se
    irá modificando el archivo
    <emphasis>src/main/resources/dynamic-configuration.xml</emphasis>
    que almacena la información sobre las distintas configuraciones definidas
    hasta el momento.</para>

    <para xml:lang="es">La creación de una nueva configuración se realiza con el comando <link
    linkend="apendice-comandos_addon-dynamic_config-config_save">configuration
    create</link> que tiene un único parámetro obligatorio (<emphasis>name</emphasis>)
    que define el nombre para la nueva configuración.</para>
    
    <programlisting>roo-gvNIX&gt; <emphasis role="bold">script --file clinic.roo</emphasis>
...
roo-gvNIX&gt; <emphasis role="bold">configuration create --name dev</emphasis>
Updated SRC_MAIN_RESOURCES/dynamic-configuration.xml
Configuration created with currently available properties
First created configuration set as default
(use 'configuration property add' to make a property available for all configurations)
roo-gvNIX&gt; <emphasis role="bold">configuration create --name pro</emphasis>
Updated SRC_MAIN_RESOURCES/dynamic-configuration.xml
Configuration created with currently available properties
(use 'configuration property add' to make a property available for all configurations)</programlisting>

	<para xml:lang="es">Resaltar que la creación de las configuraciones no es
	obligatorio realizarlas al inicio y podrán realizarse en cualquier momento.</para>

    <para xml:lang="es">A partir de este momento es posible añadir nuevas propiedades para que estén
    disponibles para su gestión desde todas las configuraciones con <link
    linkend="apendice-comandos_addon-dynamic_config-config_prop_add">configuration
    property add</link>. Las propiedades inicialmente tomarán el valor que tengan
    definido en el proyecto.</para>
    
    <programlisting>roo-gvNIX&gt; <emphasis role="bold">configuration property add --name database.url</emphasis>
Updated SRC_MAIN_RESOURCES/dynamic-configuration.xml
Property available for all configurations
(use 'configuration property value' to set property new values)
(use 'configuration property undefined' to set property with no values)
roo-gvNIX&gt; <emphasis role="bold">configuration property add --name hibernate.hbm2ddl.auto</emphasis>
Updated SRC_MAIN_RESOURCES/dynamic-configuration.xml
Property available for all configurations
(use 'configuration property value' to set property new values)
(use 'configuration property undefined' to set property with no values)
roo-gvNIX&gt; <emphasis role="bold">configuration property add --name log4j.rootLogger</emphasis>
Updated SRC_MAIN_RESOURCES/dynamic-configuration.xml
Property available for all configurations
(use 'configuration property value' to set property new values)
(use 'configuration property undefined' to set property with no values)
roo-gvNIX&gt; <emphasis role="bold">configuration property add --name database.password</emphasis>
Updated SRC_MAIN_RESOURCES/dynamic-configuration.xml
Updated SRC_MAIN_RESOURCES/dynamic-configuration.xml
Property available for all configurations
(use 'configuration property value' to set property new values)
(use 'configuration property undefined' to set property with no values)</programlisting>
    
    <para xml:lang="es">A continuación, se podrán modificar los valores de cada propiedad con <link
    linkend="apendice-comandos_addon-dynamic_config-config_prop_update">configuration
    property value</link>.</para>
    
    <programlisting>roo-gvNIX&gt; <emphasis role="bold">configuration property value --configuration dev --property database.url
		--value jdbc:hsqldb:mem:mydevdb</emphasis>
Updated SRC_MAIN_RESOURCES/dynamic-configuration.xml
Property value seted
(use 'configuration list' to show configurations and their properties)
roo-gvNIX&gt; <emphasis role="bold">configuration property value --configuration pro
		--property database.url --value jdbc:hsqldb:file:myprodb</emphasis>
Updated SRC_MAIN_RESOURCES/dynamic-configuration.xml
Property value seted
(use 'configuration list' to show configurations and their properties)
roo-gvNIX&gt; <emphasis role="bold">configuration property value --configuration pro
		--property hibernate.hbm2ddl.auto --value update</emphasis>
Updated SRC_MAIN_RESOURCES/dynamic-configuration.xml
Property value seted
(use 'configuration list' to show configurations and their properties)
roo-gvNIX&gt; <emphasis role="bold">configuration property value --configuration pro
		--property log4j.rootLogger --value "ERROR, stdout"</emphasis>
Updated SRC_MAIN_RESOURCES/dynamic-configuration.xml
Property value seted
(use 'configuration list' to show configurations and their properties)</programlisting>
    
    <para xml:lang="es">En algunos casos, por seguridad, puede ser necesario que el valor de
    una propiedad no esté almacenado en el proyecto, para ello puede utilizarse el
    comando <link linkend="apendice-comandos_addon-dynamic_config-config_prop_undefined">
    configuration property undefined</link> de forma que el valor se tendrá que proporcionar
    al empaquetar la aplicación con Maven como un parámetro mediante el modificador
    <emphasis>-D nombre=valor</emphasis>.</para>
    
	<programlisting>roo-gvNIX&gt; <emphasis role="bold">configuration property undefined --configuration pro
		--property database.password</emphasis>
Updated SRC_MAIN_RESOURCES/dynamic-configuration.xml
Property value undefined
(use '-D propname=propvalue' on maven commands to set the property value)
(use 'configuration list' to show configurations and their properties)</programlisting>
    
    <para xml:lang="es">Si se desea ver las distintas configuraciones que creadas, sus
    propiedades y los valores definidos para cada una de ellas utilizar el comando <link
    linkend="apendice-comandos_addon-dynamic_config-config_list">configuration
    list</link>.</para>

    <programlisting>roo-gvNIX&gt; <emphasis role="bold">configuration list</emphasis>
      (Active)      dev
----------------------------------------
 * Database Connection Properties
   - database.url = "jdbc:hsqldb:mem:mydevdb"
   - database.password = ""
 * Persistence Property Attributes XML
   - hibernate.hbm2ddl.auto = "create"
 * Logging Service Properties
   - log4j.rootLogger = "INFO, stdout"
                    pro
----------------------------------------
 * Database Connection Properties
   - database.url = "jdbc:hsqldb:file:myprodb"
   - database.password = (UNDEFINED)
 * Persistence Property Attributes XML
   - hibernate.hbm2ddl.auto = "update"
 * Logging Service Properties
   - log4j.rootLogger = "ERROR, stdout"
(use 'configuration export' to write configurations into the project)</programlisting>
    
    <para xml:lang="es">Para escribir las configuraciones actuales en el proyecto
    se debe utilizar el comando <link
    linkend="apendice-comandos_addon-dynamic_config-config_export">configuration
    export</link>. Es muy importante destacar que hasta que no se haya ejecutado
    este comando, las configuraciones no serán escritas en los ficheros destino
    y por lo tanto hasta ese momento no se podrán utilizar las configuraciones.</para>
    
    <programlisting>roo-gvNIX&gt; <emphasis role="bold">configuration export</emphasis>
Updated ROOT/pom.xml
Updated ROOT/pom.xml
Updated SRC_MAIN_RESOURCES/META-INF/spring/database.properties
Updated SRC_MAIN_RESOURCES/log4j.properties
Updated SRC_MAIN_RESOURCES/META-INF/persistence.xml
Updated SRC_MAIN_RESOURCES/META-INF/spring/database.properties
Updated SRC_MAIN_RESOURCES/log4j.properties
Updated SRC_MAIN_RESOURCES/META-INF/persistence.xml
Configurations exported into project
(use '-P name' on maven commands to use a configuration)
(use 'configuration create' to define a new configuration)
</programlisting>
    
    <para xml:lang="es">Una vez exportadas las configuraciones, pueden utilizarse
    como perfiles desde Maven mediante el modificador <emphasis>-P nombre</emphasis>
    utilizando como nombre el valor que se definió para la configuración con el comando
    <link linkend="apendice-comandos_addon-dynamic_config-config_save">configuration
    create</link>. Por ejemplo, al empaquetar la aplicación para
	desplegarla en uno u otro entorno, debe especificarse el nombre de la configuración
	y opcionalmente el valor de los parámetros que se crearon como indefinidos
	en la configuración.</para>
	
<programlisting>shell&gt; <emphasis role="bold">mvn clean package -P dev</emphasis>
... (Empaquetando la aplicación con la configuración llamada dev) ...
shell&gt; <emphasis role="bold">mvn clean package -P pro -D database.password=mypassword</emphasis>
... (Empaquetando la aplicación con la configuración llamada pro) ...
... (Se utilizará como clave de acceso a la base de datos "mypassword") ...</programlisting>

	<para xml:lang="es">También es posible
	elegir la configuración (perfil) a utilizar desde Eclipse/STS
	desde las propiedades del proyecto accediendo a la opción
	<emphasis>Maven</emphasis> del menú.</para>

	<figure>
	  <title xml:lang="es">Selección del perfil Maven desde Eclipse</title>
	
	  <mediaobject>
	    <imageobject>
	      <imagedata align="center" fileref="images/eclipse_maven_profiles.png"></imagedata>
	    </imageobject>
	  </mediaobject>
	</figure>
	
  </section>

  <section>
  	<title>Mejoras de renimiento</title>
  
  	<para xml:lang="es">Se pueden definir algunos valores óptimos 
  	de rendimiento definidos en la sección
  	<link linkend="guia-desarrollo_mejoras-rendimiento-patrones-log">
  	Patrones de conversión óptimos en el log</link>.
  	</para>
  </section>
  
  <section xml:id="addon-dynamic_config_futuras-versiones">
    <title xml:lang="es">Futuras versiones</title>

	<itemizedlist xml:lang="es">
	      <listitem>
		    <para xml:lang="es">Incluir nuevas propiedades a la lista de propiedades
		    disponibles para las configuraciones. O por contra, permitir cierta libertad
		    para añadir cualquier propiedad del proyecto como configurable.</para>
		 </listitem>
	     <listitem>
		    <para xml:lang="es">Posibilidad de incluir otro tipo de elementos
		    en las configuraciones como, por ejemplo, distintas dependencias.</para>
		 </listitem>
	     <listitem>
		    <para xml:lang="es">Definir plantillas de configuración de modo
		    que establezcan unos valores estándar que se consideren adecuados
		    para una determinada configuración. Por ejemplo, establecer el
		    formato de los logs en producción para reducir el consumo de recursos.</para>
		 </listitem>
	</itemizedlist>
  </section>
</chapter>
