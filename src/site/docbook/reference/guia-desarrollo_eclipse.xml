<?xml version="1.0" encoding="UTF-8"?>
<chapter version="5.0" xml:id="guia-desarrollo-eclipse" xml:lang="es"
         xmlns="http://docbook.org/ns/docbook"
         xmlns:xlink="http://www.w3.org/1999/xlink"
         xmlns:ns5="http://www.w3.org/1998/Math/MathML"
         xmlns:ns4="http://www.w3.org/2000/svg"
         xmlns:ns3="http://www.w3.org/1999/xhtml"
         xmlns:ns="http://docbook.org/ns/docbook">
  <title xml:lang="es">Desarrollo con Eclipse</title>

  <section xml:id="guia-desarrollo_eclipse-instalar">

    <title xml:lang="es">Instalación</title>

    <para>Spring ha desarrollado una extensión para Eclipse llamada
    SpringSource Tool Suite o STS, que ofrece soporte para trabajar en
    Eclipse con aplicaciones de Spring, entre ellas Spring Roo y por tanto
    gvNIX. Entre otras funcionalidades incorpora un intérprete de comandos
    de Roo que permite ejecutar órdenes sin necesidad de salir de
    Eclipse.</para>

    <para>Hay dos formas de instalar STS, la primera es como una distribución
    propia y la segunda es como un plugin de un Eclipse ya existente.
    Se recomienda encarecidamente utilizar la primera de ellas por su
    facilidad de instalación y mejor rendimiento.</para>

    <section xml:id="guia-desarrollo_eclipse-instalar1">
      <title xml:id="es">STS como distribución</title>

      <para>
        <emphasis>
          <emphasis>Para instalar el IDE como una distribución propia realizar
          los siguientes pasos:</emphasis>
        </emphasis>
      </para>

      <itemizedlist>
        <listitem>
          <para>Descargar la última versión de Springsource Tool Suite desde
          <link xlink:href="http://spring.io/tools">
          http://spring.io/tools</link></para>
        </listitem>

        <listitem>Descomprimir el archivo descargado y moverlo a una carpeta,
        por ejemplo $HOME/software.</listitem>

        <listitem>Ejecutar STS
        ($HOME/software/springsource-X.X.X/sts-X.X.X.RELEASE/STS). Tener en
        cuenta que STS es una aplicación Java por lo que requiere tener una
        máquina virtual Java instalada en el sistema.</listitem>
      </itemizedlist>
    </section>

    <section xml:id="guia-desarrollo_eclipse-instalar2">
      <title xml:id="es">STS como plugin</title>
    </section>

    <para>
      <emphasis>
        <emphasis>Para instalar el IDE en un Eclipse existente seguir los
        siguientes pasos:</emphasis>
      </emphasis>
    </para>

    <itemizedlist>
      <listitem>
        <para>Si no se dispone todavía de él, descargar Eclipse IDE for Java
        EE Developers de <link xlink:href="http://www.eclipse.org/downloads/">
        http://www.eclipse.org/downloads/</link></para>
      </listitem>

      <listitem>
        <para>Crear la variable de classpath de Eclipse M2_REPO, para
        ello:</para>

        <orderedlist>
          <listitem>
            <para><emphasis role="bold">
                <emphasis>
                  <literal>Window &gt; Preferences &gt; Java &gt; Build Path
                  &gt; Classpath Variables</literal>
                </emphasis>
              </emphasis>, botón <emphasis>
                <emphasis>
                  <literal>New...</literal>
                </emphasis>
              </emphasis>.</para>
          </listitem>

          <listitem>
            <para>Definir los siguientes valores:</para>

            <itemizedlist>
              <listitem>
                <para><emphasis>
                    <emphasis>
                      <literal>Name</literal>
                    </emphasis>
                  </emphasis> = <emphasis>
                    <emphasis>
                      <literal>M2_REPO</literal>
                    </emphasis>
                  </emphasis>.</para>
              </listitem>

              <listitem>
                <para><emphasis>
                    <emphasis>
                      <literal>Path</literal>
                    </emphasis>
                  </emphasis> = directorio correspondiente al repositorio de
                Maven (normalmente en Unix: $HOME/.m2/repository)</para>
              </listitem>
            </itemizedlist>
          </listitem>

          <listitem>
            <para><emphasis>Ok</emphasis> para crear la variable, y
            <emphasis>Ok</emphasis> de nuevo para cerrar la ventana de
            preferencias y guardar cambios.</para>
          </listitem>
        </orderedlist>
      </listitem>

      <listitem>
        <para>Instalar plugin M2Eclipse para Eclipse
        (http://m2eclipse.sonatype.org/installing-m2eclipse.html)</para>

        <para>En el menú Help &gt; Install New Software, en el campo de texto
        "Work with:" indicar que se usará el site:
        <link xlink:href="http://m2eclipse.sonatype.org/sites/m2e">
        http://m2eclipse.sonatype.org/sites/m2e</link>.
        A continución eleccionar "Maven Integration for Eclipse".
        Pulsar en siguiente y tras aceptar la licencia del plugin instalar.</para>
      </listitem>

      <listitem>
        <para>Activa la opción <emphasis>
            <emphasis>
              <literal>Enable Window &gt; Preferences &gt; General &gt;
              Workspace &gt; Refresh Automatically</literal>
            </emphasis>
          </emphasis>.</para>
      </listitem>

      <listitem>
        <para>Opcionalmente, instalar el plugin Subeclipse para trabajar sobre
        el sistema de control de versiones Subversion (SVN).</para>

        <para>Para ello en Eclipse, en el menú <emphasis>Help &gt; Install New
        Software</emphasis>. En la ventana que se abre hacer click sobre el
        botón <emphasis>Add</emphasis> que hay a la derecha de <emphasis>Work
        with</emphasis>. Se abre un diálogo en el que se indicará como
        nombre Subeclipse por ejemplo y en la URL indicar
        <emphasis>http://subclipse.tigris.org/update_1.6.x</emphasis>
        guardar con <emphasis>OK</emphasis> y la ventana anterior empezará
        la carga de los plugins que hay disponibles. Seleccionarlos y
        seguir haciendo click en <emphasis>Next</emphasis>. La URL
        indicada es de la versión actual, revisar el sitio oficial de <link
        xlink:href="http://subclipse.tigris.org/servlets/ProjectProcess?pageID=p4wYuA">Subeclipse</link>
        para más información y futuras versiones.</para>
      </listitem>

      <listitem>Para instalar el plugin STS seguir las instrucciones del punto
      "UPDATE SITE INSTALLATION" del documento <link
      xlink:href="http://dist.springsource.com/release/STS/doc/STS-installation_instructions.pdf">Spring
      Source Tool Suite Installation Instructions</link>.</listitem>
    </itemizedlist>

    <section xml:id="guia-desarrollo_eclipse-instalar3">
      <title xml:id="es">Integrar soporte ROO en STS</title>
    </section>

    <para>
      Spring Roo ya no está incluido en la distribución de STS a partir de su versión <emphasis>3.6.0</emphasis>, por ello necesitaremos instalar este soporte para poder trabajar con gvNIX.
    </para>

    <para>
      Para incluir este soporte, sigue los siguientes pasos:
    </para>
    
    <orderedlist>
      <listitem>
        <para>Abre tu STS</para>
      </listitem>

      <listitem>
        <para>Abre el dashboard del STS y busca Spring ROO</para>
      </listitem>

      <listitem>
        <para>Instala <emphasis>Spring Roo (current production release)</emphasis> y <emphasis>Spring IDE - Roo Extension</emphasis></para>
      </listitem>   

      <listitem>
        <para>Reinicia tu STS</para>
      </listitem>   

    </orderedlist>

    <figure>
     <title>Integrando soporte ROO en STS</title>
     <mediaobject>
       <imageobject>
         <imagedata align="center" width="400" fileref="images/sts_install.jpeg"/>
       </imageobject>
     </mediaobject>
     <mediaobject>
       <imageobject>
         <imagedata align="center" width="400" fileref="images/sts_install.png"/>
       </imageobject>
     </mediaobject>
    </figure>


  </section>

  <section>
    <title>Consola gvNIX / Roo integrada en Eclipse</title>

    <para>El plugin o distribución de STS instalado ofrece la posibilidad de
    incluir la consola de gvNIX en el propio entorno de desarrollo. Para ello
    antes hay que indicarle a Eclipse donde está instalada la nueva versión de
    gvNIX.</para>

    <para>En el menú <emphasis>Window &gt; Preferences &gt; Spring &gt;
    Roo Support</emphasis>.
    Pulsar sobre el botón Add y buscar en el navegador de archivos el lugar
    donde está instalado gvNIX. Aparecerá una pantalla similar a la
    siguiente:</para>

    <figure>
      <title>Configuración del soporte gvNIX en Eclipse</title>

      <mediaobject>
        <imageobject>
          <imagedata align="center" fileref="images/preferences_roo.png"/>
        </imageobject>
      </mediaobject>
    </figure>

    <para>Presionando en OK sobre las dos pantallas que abiertas ya estará
    configurado el soporte para la linea de comandos de gvNIX. Para poder
    usarlo abrir la perspectiva de Spring con <emphasis>Window &gt; Open
    Perspective &gt; Other &gt; Spring</emphasis>.
    En la parte inferior de la pantalla aparecerá una
    pestaña llamada Roo Shell. Si no apareciese la pestaña, puede abrirse
    seleccionando <emphasis>Window &gt; Show View &gt; Roo Shell.
    </emphasis></para>

    <para>Para abrir la consola pulsar en el botón que aparece en la parte
    superior derecha de la pestaña con el título <emphasis>Open Roo
    Shell.</emphasis> Entonces seleccionar el proyecto en el que se va a
    trabajar y ya se puede empezar a ejecutar comandos. Si no se dispone
    todavía de ningún proyecto, en el punto siguiente se verá como crear un
    nuevo proyecto.</para>

    <para>La ejecución de comandos también se puede hacer de forma gráfica
    pulsando en el botón que aparece en la parte superior derecha de la
    pestaña con el título Open Roo Command Wizard.</para>

    <figure>
      <title>Consola gvNIX en Eclipse</title>

      <mediaobject>
        <imageobject>
          <imagedata align="center" fileref="images/eclipse_gvNIX_shell.png"/>
        </imageobject>
      </mediaobject>
    </figure>

    <note>
      <para>Hay que tener en cuenta una pequeña diferencia a la hora de usar
      la línea de comandos desde Eclipse con respecto a la linea de comandos
      de gvNIX en la consola del sistema. Mientras en una consola del sistema
      se utiliza la tecla TAB para completar los comandos, en el IDE se
      utilizará Ctrl+Space que es el atajo por defecto usado en
      Eclipse.</para>
    </note>
  </section>

  <section xml:id="guia-desarrollo_eclipse-usasr">
    <title>Utilizar Eclipse como IDE</title>

    <section xml:id="guia-desarrollo_eclipse-usar">
      <title xml:id="es">Crear proyecto gvNIX en Eclipse IDE</title>

      <para xml:lang="es">Crear un proyecto gvNIX desde Eclipse a través del
      menú: <emphasis>File &gt; New &gt; Spring Roo Project</emphasis>:</para>

      <figure>
        <title>Nuevo proyecto Spring Roo con soporte gvNIX</title>

        <mediaobject>
          <imageobject>
            <imagedata align="center" fileref="images/eclipse_new_roo_project.png"/>
          </imageobject>
        </mediaobject>
      </figure>

      <para xml:lang="es">Esta primera pantalla habrá ejecutado de forma
      automática el comando de creación de un nuevo proyecto:</para>

      <para xml:lang="es"><programlisting><emphasis role="bold">project --topLevelPackage com.gvnix.tenminutes</emphasis></programlisting></para>

      <para xml:lang="es">En este punto ya se dispone de un proyecto Maven
      preparado.</para>

      <para xml:lang="es">A continuación, añadir el soporte para el manejo de
      la persistencia de datos a través de JPA. El siguiente ejemplo muestra
      los comandos que se deben usar para configurar el soporte JPA. Recordar
      que se puede usar Ctrl+Space como ayuda a la escritura en los
      comandos:</para>

      <programlisting>roo-gvNIX&gt; <emphasis role="bold">jpa setup --provider HIBERNATE --database HYPERSONIC_IN_MEMORY</emphasis>
Created ...
roo-gvNIX&gt;<emphasis role="bold"> entity jpa --class ~.domain.Timer --testAutomatically</emphasis>
Created ...
~.domain.Timer roo-gvNIX&gt;<emphasis role="bold"> field string --fieldName message --notNull</emphasis>
Managed ...</programlisting>

      <para xml:lang="es">El comando <emphasis role="bold">jpa setup</emphasis>
      permite configurar la capa de acceso a datos de manera
      sencilla. El comando <emphasis role="bold">entitiy jpa</emphasis> sirve para
      crear una nueva entidad y <emphasis role="bold">field</emphasis> crea
      atributos en la entidad. Estos comandos se verán con más
      detalle en la sección <link
      linkend="guia-desarrollo-acceso-datos_persistencia-objetos">Persistencia
      de objetos</link> y <link
      linkend="guia-desarrollo_gestion-entidades_definicion_crear-con-comando">Crear
      una entidad con el intérprete de comandos</link>, también se verá como
      generar todas las entidades de una aplicación mediante el proceso de
      ingeniería inversa contra un esquema de BBDD existente.</para>

      <programlisting>~.domain.Timer roo-gvNIX&gt; <emphasis role="bold">web mvc setup</emphasis>
~.domain.Timer roo-gvNIX&gt; <emphasis role="bold">web mvc all --package ~.web</emphasis>
Created ...</programlisting>

      <para>Los comandos <emphasis role="bold">web mvc</emphasis> crean la
      capa capa web que gestionaran la interacción del usuario con la
      aplicación. Se verán con más detalle en <link
      linkend="guia-desarrollo_web_definir-controller">Crear la capa web con
      el intérprete de comandos</link>.</para>

      <programlisting>~.web roo-gvNIX&gt; <emphasis role="bold">selenium test --controller ~.web.TimerController</emphasis>
Created ...</programlisting>

      <para>Si se desea incluir en el proyecto los tests funcionales existe el
      comando <emphasis role="bold">selenium test</emphasis> que generará los
      scripts necesarios para probar la interfaz web de la aplicación.
      Más adelante se verá como poner en marcha la aplicación y como ejecutar
      estos tests.</para>

      <programlisting>~.web roo-gvNIX&gt; <emphasis role="bold">theme install --id cit</emphasis>
~.web roo-gvNIX&gt; <emphasis role="bold">theme set --id cit</emphasis></programlisting>

      <para>Mediante el comando <emphasis role="bold">theme</emphasis>, del
      <emphasis>Add-on Theme Manager</emphasis> propio de gvNIX, se puede
      configurar el tema visual que presentará la aplicación.</para>
    </section>

    <section>
      <title>Importar proyecto gvNIX en Eclipse</title>

      <para>gvNIX/Roo permite crear proyectos desde la linea de comandos, aunque
      puede suceder que se necesite importar un proyecto ya existente en el
      IDE. Si se está ejecutando gvNIX en la línea de comandos, bastaría con
      ejecutar el comando <command>perform eclipse</command> para crear una
      estructura de proyecto Eclipse:</para>

      <programlisting>~.domain.PizzaOrder roo-gvNIX&gt; <command>perform eclipse</command>
<computeroutput>[Thread-6] Warning: JAVA_HOME environment variable is not set.
[Thread-6] [INFO] Scanning for projects...
[Thread-6] [INFO] ------------------------------------------------------------------------
[Thread-6] [INFO] Building pizzashop
[Thread-6] [INFO]    task-segment: [eclipse:clean, eclipse:eclipse]
[Thread-6] [INFO] ------------------------------------------------------------------------
[Thread-6] [INFO] [eclipse:clean {execution: default-cli}]
[Thread-6] [INFO] Deleting file: .project
[Thread-6] [INFO] Deleting file: .classpath
...
...
[Thread-6] [INFO] ------------------------------------------------------------------------
[Thread-6] [INFO] BUILD SUCCESSFUL
[Thread-6] [INFO] ------------------------------------------------------------------------
[Thread-6] [INFO] Total time: 4 seconds
[Thread-6] [INFO] Finished at: Wed Jun 16 21:21:49 CEST 2010
[Thread-6] [INFO] Final Memory: 36M/330M
[Thread-6] [INFO] ------------------------------------------------------------------------</computeroutput>
~.domain.PizzaOrder roo-gvNIX&gt;</programlisting>

      <para xml:lang="es">Este comando termina ejecutando el comando del
      sistema<command>mvn eclipse:eclipse</command> en el proyecto, por
      lo que es indiferente el uso de cualquiera de los dos métodos.
      Tener en cuenta que este último comando necesita tener configurado
      Maven.</para>

      <para xml:lang="es">Ahora se puede importar en el entorno de trabajo
      mediante <command>File &gt; Import &gt; General &gt; Existing Projects
      into workSpace</command>. Si aparece el mensaje <emphasis>Turn Weaving
      Service on?</emphasis>, marcar la casilla <emphasis>Don't ask again until
      next upgrade</emphasis> y clic en <emphasis>Yes</emphasis> (será
      necesario reiniciar Eclipse).</para>

      <para xml:lang="es">También es posible borrar la configuración de
      eclipse ejecutando el comando <command>mvn eclipse:clean</command>
	  en una consola del sistema que tenga configurada Maven.
      Para regenerar la configuración de eclipse en un solo comando usar
      <command>mvn eclipse:clean eclipse:eclipse</command>.</para>

      <para xml:lang="es">Al importar un proyecto en Eclipse es importante
      comprobar que dicho proyecto tiene configuradas las características de
      proyecto Maven y proyecto de aspectos java. Esto aparece de forma visual en el
      proyecto mediante unas pequeñas letras M y AJ. Si no apareciesen se
      pueden añadir estas características seleccionando el proyecto y con el
      segundo botón del ratón eligiendo la opción <emphasis>Configure
      </emphasis>. Esto es muy importante ya que en el caso de no estar
      correctamente configurado nos aparecerán falsos errores en el proyecto.
      </para>
    </section>
  </section>

  <section xml:id="guia-desarrollo_eclipse-pruebas-unitarias">
    <title xml:lang="es">Generación de pruebas de integración</title>

    <para>El comando <emphasis>entity jpa</emphasis> dispone de la opción testAutomatically
    que al ser especificada generará los test de integración para dicha entidad
    usando JUnit.</para>

    <para>Si los tests no fueron creados en el momento de la ejecución
    del comando <emphasis>entity</emphasis>, pueden ser generados con
    posterioridad mediante otro comando:</para>

    <programlisting>
    test integration --entity ~.domain.Timer
    </programlisting>
  </section>

  <section xml:id="guia-desarrollo_aplicacion-base_arrancar-aplicacion-eclipse">
    <title xml:lang="es">Arrancar la aplicación con Eclipse</title>

    <para xml:lang="es">Es posible arrancar la aplicación desde el propio
    Eclipse y, además de permitir depurarla, permite hacer cambios en
    caliente sobre la aplicación.</para>

    <para xml:lang="es">Para ello, debemos tener la aplicación importada en un
    <emphasis>workspace</emphasis> de Eclipse y configurar el servidor dónde
    ejecutarlo. Eclipse es capaz de gestionar distinto tipos de
    servidores, generando sus propios directorio y ficheros de
    configuración.</para>

    <para xml:lang="es">Para prepara un servidor seguir los siguiente
    pasos:</para>

    <section xml:id="guia-desarrollo_aplicacion-base_arrancar-aplicacion-eclipse_mostrar-vista-servidores">
      <title>Mostrar la Vista de Servidores en Eclipse</title>

      <para>Eclipse tiene una vista que permite ver los distintos servidores
      configurados y gestionarlos desde ahí. Estos son los pasos para mostrar
      la vista</para>

      <orderedlist>
        <listitem>
          <para>Abra la opción del menú <literal>Window &gt; Show view &gt;
          Other..</literal>..</para>
        </listitem>

        <listitem>
          <para>Busque la vista llamada <literal>Servers</literal> y pulse el
          botón <literal>Ok</literal>.</para>
        </listitem>
      </orderedlist>
    </section>

    <section xml:id="guia-desarrollo_aplicacion-base_arrancar-aplicacion-eclipse_crear-entorno-ejecucion">
      <title xml:lang="es">Crear un nuevo Servidor</title>

      <para xml:lang="es">Se pueden definir múltiples entornos de ejecución
      para los servidores. Esta configuración incluye el tipo de servidor
      (Tomcat, Jetty, JBoss, etc..), Máquina Virtual Java (JRE 1.5, JRE 1.6,
      etc...) y la ruta a los binarios del servidor.</para>

      <para xml:lang="es">Cabe destacar que eclipse <emphasis role="bold">no
      usa la configuración que exista en la instalación del
      servidor</emphasis> en la mayoría de los casos. Solo usa los ejecutables
      para arrancarlo con ficheros de configuración que almacena en el propio
      workspace.</para>

      <para xml:lang="es">En este caso, vamos a preparar el entorno para
      Tomcat 6 siguiendo los pasos indicados a continuación:</para>

      <orderedlist>
        <listitem>
          <para xml:lang="es">Dentro de la pestaña Servers, pinchar con el
          segundo botón del ratón y seleccionar New &gt; Server.</para>
        </listitem>

        <listitem>
          <para xml:lang="es">Seleccionar <literal>Apache Tomcat
          v6.0 Server</literal> de la lista de tipos y pulsar el botón
          <literal>Next</literal>.</para>

          <para xml:lang="es">En el caso en que no aparezca ningún tipo de
          servidor o no aparezcan los de Apache Tomcat se ha de realizar lo
          siguiente:</para>

          <itemizedlist>
            <listitem>
              <para>Ir a <literal>Help &gt; Install New
              Software...</literal>.</para>
            </listitem>

            <listitem>
              <para>Desmarcar la casilla "<emphasis>Hide items that are
              already installed.</emphasis>"</para>
            </listitem>

            <listitem>
              <para>En "<emphasis>Work With</emphasis>" seleccionar el sitio
              "<emphasis>Eclipse Web Tools Platform Repository</emphasis> -
              <emphasis>http://download.eclipse.org/webtools/updates/</emphasis>"
              (si no aparece, añadirlo usando el botón
              <literal>Add...</literal>.)</para>
            </listitem>

            <listitem>
              <para>En el listado de software desplegar <literal>Web Tools
              Platform Tests (WST Tests)</literal> (si hay más de un
              <emphasis>WST Tests</emphasis> seleccionar el de la última
              versión).</para>
            </listitem>

            <listitem>
              <para>Instalar (seleccionándolos) <literal>WST Server
              tests</literal> y <literal>JST Server Tests</literal> (si ya
              están instalado aparecerá su icono en gris)</para>
            </listitem>
          </itemizedlist>
        </listitem>

        <listitem>
          <para xml:lang="es">Introducir un nombre para la
          configuración.</para>
        </listitem>

        <listitem>
          <para xml:lang="es">Seleccionar el directorio donde se encuentra una
          instalación de Tomcat 6. Si no se dispone de ninguna instalación de
          Tomcat 6 crear un nuevo directorio, seleccionarlo y pulsar
          sobre el botón Download and Install ... que pasados unos segundos
          terminará la descarga y permitirá continuar.</para>
        </listitem>

        <listitem>
          <para xml:lang="es">Seleccionar la máquina virtual Java con la que
          ejecutar el servidor.</para>
        </listitem>

        <listitem>
          <para xml:lang="es">Pulsar el botón Next.</para>
        </listitem>

        <listitem>
          <para>Añadir las aplicaciones a ejecutar en este servidor de entre
          las disponibles.</para>
        </listitem>
      </orderedlist>
    </section>

    <section xml:id="guia-desarrollo_aplicacion-base_arrancar-aplicacion-eclipse_ajustar-configuracion-server">
      <title xml:lang="es">Ajustar la configuración del Servidor</title>

      <para xml:lang="es">Puede ser necesario ajustar algunas opciones de la
      configuración del servidor. Para poder acceder a dichas opciones hay que
      seleccionar el servidor desde la pestaña de servidores y, con el botón
      derecho del ratón sobre él pulsar <literal>Open</literal>.</para>

      <para xml:lang="es">Desde el panel abierto podremos gestionar:</para>

      <itemizedlist>
        <listitem>
          <para>Datos generales del servidor.</para>
        </listitem>

        <listitem>
          <para>Opciones de publicación y seguridad.</para>
        </listitem>

        <listitem>
          <para>TimeOuts (muy útil si se está depurando algún proceso de
          arranque).</para>
        </listitem>

        <listitem>
          <para>Puertos</para>
        </listitem>

        <listitem>
          <para>Configuración de tipos MIME.</para>
        </listitem>

        <listitem>
          <para>Las aplicaciones/modulos a lanzar (admite módulos
          externos).</para>
        </listitem>

        <listitem>
          <para>Configuración de arranque del servidor.</para>

          <para>El servidor Tomcat arranca con cierta cantidad de memoria que
          no soportar mas de 4 cambios en el proyecto antes de llenarse y
          dejar de funcionar. Para evitar esto, se puede incrementar la
          cantidad de memoria con la que arranca Tomcat.</para>

        </listitem>
      </itemizedlist>

      <important>
        <para>Es muy interesante modificar los parámetros de memoría
        con los que trabaja el servidor. Para ello:</para>

        <itemizedlist>
          <listitem>
            <para>En la pantalla de opciones de la configuración del
            servidor acceder a <emphasis>Open launch configuration
            </emphasis></para>
          </listitem>

          <listitem>
            <para>En la nueva ventana, en la pestaña
            <emphasis>Arguments</emphasis> añadir al final del texo que
            aparece en el apartado <emphasis>VM Arguments</emphasis> lo
            siguiente: <filename>-Xms64m -Xmx256m -XX:MaxPermSize=128m
            -XX:PermSize=128m</filename></para>
          </listitem>
        </itemizedlist>
      </important>

    </section>

    <section>
      <title>Ejecución de la aplicación en el Servidor</title>

      <para xml:lang="es">Una vez configurado el servidor, se podrá añadir a
      este la aplicación que se desea ejecutar en él. Se puede ejecutar más de
      una a la vez. En la vista Servers, pulsar con el botón derecho sobre el
      servidor deseado y seleccionar la opción <emphasis>Add and Remove ...
      </emphasis>. En el diálogo que se abre seleccionar de la lista de la
      izquierda la aplicación y pulsar el botón <emphasis>Add</emphasis>.
      Por último, cerrar el diálogo con <emphasis>Finish</emphasis>.</para>

      <figure>
        <title>Añadir / Eliminar aplicaciones al Servidor</title>

        <mediaobject>
          <imageobject>
            <imagedata align="center" fileref="images/eclipse_servers-addremoveapp.png"/>
          </imageobject>
        </mediaobject>
      </figure>

      <para>Ya es posible arrancar el servidor y probar la aplicación.</para>

      <figure>
        <title>Vista de servidores disponibles en el workspace de
        Eclipse</title>

        <mediaobject>
          <imageobject>
            <imagedata align="center" fileref="images/eclipse_servers.png"/>
          </imageobject>
        </mediaobject>
      </figure>

      <para>En la imagen anterior se observa un servidor Tomcat 6 con la
      aplicación <emphasis>tenminutes</emphasis> disponible para ejecutar. Con
      los botones disponibles se puede arrancar la aplicación en modo debug,
      arrancar la aplicación de manera normal (botón verde con triángulo
      blanco en el centro), arrancar en modo profile, pararlo o re-publicar
      los cambios del proyecto en el servidor.</para>

      <figure>
        <title>Botones de la vista servidores de Eclipse</title>

        <mediaobject>
          <imageobject>
            <imagedata align="center" fileref="images/eclipse_servers-buttons.png"/>
          </imageobject>
        </mediaobject>
      </figure>

      <para>Una vez arrancado el servidor se podrá navegar por la aplicación
      bien desde un navegador externo (Firefox) o bien desde un navegador
      propio que incorpora Eclipse accediendo a la dirección
      <link xlink:href="http://localhost:8080/tenminutes">
      http://localhost:8080/tenminutes</link>. Observar que el final de la
      dirección se corresponde con el nombre de la aplicación proporcionado
      al crear el proyecto. Para abrir el navegador interno
      de Eclipse utilizar <emphasis>Window &gt; Show view &gt; Internal Web
      Browser</emphasis>.</para>

      <figure>
        <title>Navegador interno de Eclipse</title>

        <mediaobject>
          <imageobject>
            <imagedata align="center" fileref="images/eclipse_browser.png"/>
          </imageobject>
        </mediaobject>
      </figure>

      <para>Ejecutar la apliación desde Eclipse puede ser muy útil a la hora
      de hacer cambios en el proyecto, modificaciones en las vistas, en los
      objetos de aplicación, bien desde el propio IDE o desde la línea de
      comandos de gvNIX, ya que automáticamente se verán reflejados los
      cambios en el navegador.</para>
    </section>
  </section>

  <section>
    <title>Trabajando con el código de la aplicación en Eclipse</title>

    <para>Al generar un proyecto con gvNIX/Roo habrá que trabajar sobre el
    código de la aplicación para añadir más funcionalidades y/o modificar
    alguna de las que se han generado. A continuación se explicarán un par de
    detalles que simplificaran esta tarea usando Eclipse y el plugin STS
    instalado.</para>

    <figure>
      <title>Vista de editor y Cross References en Eclipse</title>

      <mediaobject>
        <imageobject>
          <imagedata align="center" fileref="images/eclipse_crossreference.png"/>
        </imageobject>
      </mediaobject>
    </figure>

    <para>En la imagen anterior se observa el editor de Eclipse con el archivo
    Timer.java que se ha generado al ejecutar los comandos
    <emphasis>entity</emphasis> y <emphasis>field</emphasis> anteriores. En la
    parte derecha de la captura se ve una ventana que muestra información de
    la clase Timer. Se trata de la vista <emphasis>Cross Reference</emphasis>.
    Si no está disponible en la perspectiva de trabajo, se puede incorporar
    desde el menú <emphasis>Window &gt; Show view &gt; Cross
    References</emphasis>. Esta vista es similar a la vista
    <emphasis>Outline</emphasis> que muestra los campos y métodos declarados
    en una clase.</para>

    <para>La particularidad de la vista Cross References es que muestra los
    campos y métodos asociados a la clase Java mediante aspectos java que se verán
    en el Cápitulo sobre el <link
    linkend="guia-desarrollo_generacion-codigo">código que genera
    gvNIX/Roo</link>.</para>

    <para>Esta información también está disponible desde un menú contextual
    accesible haciendo click con el botón derecho sobre la flecha que hay a la
    izquierda de la declaración de la clase. El menú contextual es el
    siguiente.</para>

    <figure>
      <title>Contextual Cross References</title>

      <mediaobject>
        <imageobject>
          <imagedata align="center" fileref="images/eclipse_cross-contextual.png"/>
        </imageobject>
      </mediaobject>
    </figure>

    <para>Haciendo click sobre una de las entradas que aparecen en la ventana
    <emphasis>Cross References</emphasis> o en el menú contextual, se abrirá
    el fichero .aj que tiene declarado ese campo o método. Por ejemplo, si se
    accede al método <emphasis>Timer.toString()</emphasis> se abrirá el
    editor con el archivo <emphasis>Timer_Roo_ToString.aj</emphasis>.</para>

    <important>
      <para>Cabe destacar que para que aparezca esta información sobre el
      código asociado a una clase Java mediante aspectos java, la clase debe estar
      libre de errores de compilación.</para>
    </important>

    <section xml:id="guia-desarrollo_eclipse-modificar-codigo">
      <title>Modificación del código generado</title>

      <para>Como se ha comentado, seguramente será necesario añadir nuevas
      funcionalidades o modificar algunas de las que se han generado
      automáticamente para adaptar el código a los requisitos de la
      aplicación. En estos casos hay que tener en cuenta que <emphasis
      role="bold">no se debe hacer ningún cambio sobre los aspectos java (ficheros
      aj) asociados a una clase Java</emphasis>. gvNIX/Roo ya nos lo avisa en
      la primera línea del archivo .aj. El motivo de esto es, que teniendo la
      consola gvNIX funcionando, o al arrancar, gvNIX/Roo volvería a generar
      el código automáticamente perdiendo las modificaciones que hubiésemos
      realizado.</para>

      <figure>
        <title>Edición archivo Timer_Roo_ToString.aj</title>

        <mediaobject>
          <imageobject>
            <imagedata align="center" fileref="images/eclipse_edicion-aj.png"/>
          </imageobject>
        </mediaobject>
      </figure>

      <para>Para modificar el código de un método o la declaración de un campo
      que se encuentre en un aspecto java, se puede mover el método o el campo a
      la clase Java, del que depende el aspecto java. En el ejemplo, se movería a
      la clase <emphasis>Timer.java</emphasis>. Puede realizarse cortando y
      pegando, pero Eclipse con el plugin STS ofrece una opción mucho más
      adecuada para esto.</para>

      <para>Seleccionando el nombre del método a mover y a través del menú
      contextual <emphasis>AspectJ Refactoring &gt; Push In ...</emphasis>
      Eclipse se ocupará de eliminar el código del .aj y moverlo al
      .java.</para>

      <figure>
        <title>Menú contextual AspecJ Refactoring</title>

        <mediaobject>
          <imageobject>
            <imagedata align="center" fileref="images/eclipse_pushincontextual.png"/>
          </imageobject>
        </mediaobject>
      </figure>

      <para>Una vez en el .java, se podrá hacer cuantas modificaciones se
      necesiten sin peligro de que se pierdan por la acción de
      gvNIX/Roo.</para>

      <para>Del mismo modo, si se necesita añadir nuevos métodos o campos a la
      clase Java, se debe hacer directamente en el .java.</para>

      <important>
        <para>Es interesante tener abierta la consola gvNIX para que los
        cambios realizados sobre los ficheros del proyecto disparen los
        cambios automáticos que realiza gvNIX/Roo.</para>
      </important>

    </section>
  </section>
</chapter>
