<?xml version="1.0" encoding="UTF-8"?>
<chapter version="5.0" xml:id="convenciones" xml:lang="es"
         xmlns="http://docbook.org/ns/docbook"
         xmlns:xlink="http://www.w3.org/1999/xlink"
         xmlns:ns5="http://www.w3.org/1998/Math/MathML"
         xmlns:ns4="http://www.w3.org/2000/svg"
         xmlns:ns3="http://www.w3.org/1999/xhtml"
         xmlns:ns="http://docbook.org/ns/docbook">
  <title xml:lang="es">Convenciones</title>

  <section xml:id="convenciones_nombres-comandos" xml:lang="es">
    <title xml:lang="es">Nombres de los comandos</title>

    <para xml:lang="es"><emphasis>TBC</emphasis></para>

    <para xml:lang="es">(de roo-addon-desarrollo.rst)</para>

    <itemizedlist>
      <listitem>
        <para>Para los comandos genéricos que aportará gvNIX usaremos una
        nomenclatura basada en su funcionalidad. Por ejemplo:</para>

        <programlisting>cxf setup</programlisting>

        <para>Cuando la funcionalidad sea una extensión a la funcionalidad de
        Roo utilizaremos una nomenclatura similar a la de Roo, de forma que al
        pulsar el tabulador para autocompletar obtengamos tanto los comandos
        de Roo como los propios de gvNIX. Ejemplos:</para>

        <programlisting>web flow          // Comando de Roo

web binding setup // Comando de gvNIX</programlisting>

        <para>Notar que en ambos casos al escribir la primera parte del
        comando <literal>web</literal> y al pulsar el tabulador nos aconsejará
        <literal>flow</literal> y <literal>binding</literal>.</para>
      </listitem>

      <listitem>
        <para>Para los comandos propios de la CIT parece más adecuado y cómodo
        que los comandos estén agrupados por un prefijo común. Ejemplo:</para>

        <programlisting>cit security setup</programlisting>
      </listitem>
    </itemizedlist>
  </section>

  <section xml:id="convenciones_paquetes" xml:lang="es">
    <title>Nombres de paquetes</title>

    <para>Paquete raíz de gvNIX: <package>org.gvnix</package></para>

    <para xml:lang="es">Paquete raíz para probar funcionalidades genéricas:
    <package>org.gvnix.test.funcionalidad</package></para>

    <para xml:lang="es">Paquete raíz para probar funcionalidades específicas
    CIT: <package>org.gvnix.test.cit.funcionalidad</package></para>

    <section xml:id="convenciones_paquetes_addons" xml:lang="es">
      <title>Add-ons</title>

      <itemizedlist>
        <listitem>
          <para>Para add-ons genéricos que aportará gvNIX añadir al paquete
          raíz la funcionalidad y finalizar con <literal>roo.addon</literal>
          (esto último es requerimiento de Roo). El patrón a seguir sería
          <package>org.gvnix.FUNCIONALIDAD.roo.addon</package>.
          Ejemplo:</para>

          <programlisting> org.gvnix.cxf.roo.addon</programlisting>
        </listitem>

        <listitem>
          <para>Para add-ons específicos para un entorno, por ejemplo la CIT,
          seguir el siguiente patrón
          <package>org.gvnix.ID_ENTORNO.FUNCIONALIDAD.roo.addon</package>.
          Ejemplo:</para>

          <programlisting>org.gvnix.cit.security.roo.addon</programlisting>
        </listitem>
      </itemizedlist>
    </section>

    <section xml:id="convenciones_paquetes_codigo-generado" xml:lang="es">
      <title>Código generado</title>

      <para xml:lang="es">El código generado <emphasis
      role="bold">DEBE</emphasis> ubicarse dentro del paquete raíz del
      proyecto. Los add-ons deberán utilizar las utilidades de Roo para que
      las clases generadas se creen dentro de la estructura de paquetes del
      proyecto.</para>

      <para xml:lang="es">Por ejemplo, si el proyecto se creó con el comando
      Roo <command>project --topLevelPackage es.gv.cit.pizzashop</command>,
      las clases generadas se encontrarán dentro de ese paquete raíz.</para>

      <para>Se recomienda que a partir del paquete raíz del proyecto se siga
      una estructura similar a la de la funcionalidad implementada.</para>

      <para>Por ejemplo, si implementamos un sistema de autenticación para un
      entorno específico con Spring Security, entonces seguir una estructura
      similar a la planteada por Spring Security. Ejemplo:</para>

      <programlisting>es.gv.cit.pizzashop.security.authentication.wscit</programlisting>

      <para>Del mismo modo que se debe seguir un convenio para el código Java
      generado, debemos también tenerolo para los distintos <emphasis
      role="bold">artefactos que se generan</emphasis>.</para>

      <para>El motivo para adoptar este convenio es principalmente la
      mantenibilidad del proyecto generado. No sabemos quién mantendrá el
      proyecto en un futuro y posiblemente no conozca gvNIX, o es más, podría
      ser que se hubiese dejado de usar gvNIX en ese proyecto. Lo que si
      podemos saber es que el desarrollador encargado del mantenimiento
      conocerá los estándares de las distintas tecnologías usadas y sabrá que
      cuando se usa Spring, sus ficheros de configuración suelen estar en
      <emphasis>src/main/resources/spring</emphasis> (que al empaquetarlo
      acaban en <emphasis>/WEB-INF/classes/META-INF/spring</emphasis>).</para>

      <para>La principal regla a seguir es seguir los estándars de facto de la
      librería que del artefacto generado. Un ejemplo muy claro de esto lo
      tenemos con las distintas JSP que generamos cuando usamos Spring MVC
      para la capa web del proyecto. Como aquí se usa Tiles como librería del
      motor de plantillas, las JSP se generan en el directorio
      <emphasis>/WEB-INF/views</emphasis> puesto que es el estándar seguido en
      todos los proyectos que usan Tiles.</para>

      <para>Algunos ejemplos más para intentar ilustrar este convenio:</para>

      <itemizedlist>
        <listitem>
          <para>Artefactos estáticos relacionados con la capa web: dentro de
          <emphasis>src/main/webapp/</emphasis>
          (<emphasis>src/main/webapp/images, src/main/webapp/styles,
          src/main/webapp/scripts</emphasis>).</para>
        </listitem>

        <listitem>
          <para>Artefactos de las vistas en la capa web: dentro de
          <emphasis>WEB-INF</emphasis> (<emphasis>WEB-INF/layouts,
          WEB-INF/views, WEB-INF/reports</emphasis>).</para>
        </listitem>
      </itemizedlist>
    </section>
  </section>

  <section xml:id="convenciones_comentarios-codigo" xml:lang="es">
    <title>Comentarios en el Código fuente</title>

    <para xml:lang="es">El idioma de desarrollo será el inglés, tanto para el
    código fuente generado como para el código fuente de los add-ons: métodos,
    propiedades, variables y javadoc.</para>
  </section>

  <section xml:id="convenciones_javadoc" xml:lang="es">
    <title>Cabecera Javadoc para la clase java</title>

    <programlisting> /**
   * Provides strategies management shell commands.
   *
   * @author DEVELOPER_NAME (DEVELOPER_USERNAME at CIT_PROVIDER dot com) at &lt;a href="http://www.CIT_PROVIDER.com"&gt;CIT_PROVIDER&lt;/a&gt; made for &lt;a href="http://www.cit.gva.es"&gt;Conselleria d'Infraestructures i Transport&lt;/a&gt;
   */</programlisting>

	<para xml:lang="es">O simplemente:</para>
    <programlisting> /**
   * Provides strategies management shell commands.
   *
   * @author gvNIX Team
   */</programlisting>
  </section>
  
  <section xml:id="escritura_javadoc" xml:lang="es">
    <title>Documentación del proyecto</title>
    
	<para xml:lang="es">Ya está accesible y actualizado a media noche
	el javadoc de todos los módulos de gvNIX:</para>
	
	http://projects.disid.com/projects/fwjava/wiki/Javadoc
	
	<para xml:lang="es">En el proyecto gvNIX ha llegado un momento
	que la documentación de cada módulo en su directorio "doc" se queda
	anticuada rápidamente debido a que es fácil olvidarse de actualizarla
	al hacer algún cambio en el código, a parte de ser un "coñazo" cambiar
	código en un sitio y documentación en otro.</para>
	
	<para xml:lang="es">Es por ello, que hemos llegado a la conclusión de
	mantener toda la documentación en javadoc.</para>
	
	<para xml:lang="es">Para cada módulo, a parte de la documentación
	javadoc que se incluye en cada clase java, existen ficheros especiales
	del proyecto que se incluyen en el javadoc:</para>
	
	<para xml:lang="es">package.html: se puede añadir en cada paquete
	java y se incluirá como documentación adicional en la página javadoc 
	de cada paquete</para>
	<para xml:lang="es">overview.html: se puede añadir en src/main/javadoc 
	y se incluirá como documentación adicional en la página principal del
	javadoc</para>
	
	<para xml:lang="es">Con esto, creo que podemos dejar de mantener la 
	documentación por separado (javadoc y rst en docs). Además, tenemos
	la posibilidad de consultar la última versión de la documentación de
	todos los módulos vía web.</para>
	
	<para xml:lang="es">Poco a poco, iremos migrando la documentación de
	docs a javadoc y mejorando el javadoc que existe actualmente.</para>

    <para xml:lang="es">La doc estará en inglés.
    Hay que definir una guía para el documentador que evite que
    cada uno documente como mejor le parezca,
    es decir, qué doc se pone en la clase, qué doc en el package, qué
    doc se pone en cada tipo de clase (por ejemplo la lista de comandos
    debe estar en la doc de la clase Command), etc.
    Lo que comentas aplica a documentación muy dinámica, 
    habrá documentación que no cambia a lo largo del tiempo y que
    quizás no vale la pena llevar a Javadoc. Habrá que ver cada caso.</para>

	<para xml:lang="es">El javadoc de Springframework está lleno de ejemplos de buena doc:</para>

    <para xml:lang="es">http://static.springsource.org/spring/docs/current/javadoc-api/org/springframework/web/servlet/mvc/AbstractController.html (workflow y propiedades en cabecera de clase)</para>
	<para xml:lang="es">http://static.springsource.org/spring/docs/current/javadoc-api/org/springframework/orm/hibernate3/HibernateInterceptor.html (ejemplo de código)</para>
	
  </section>
  
  <section xml:id="convenciones_nombre-addon" xml:lang="es">
    <title>Nombre de add-ons</title>

    <para xml:lang="es">Dentro del fichero pom.xml habría que añadir la
    etiqueta <literal>description</literal> dentro de
    <literal>project</literal> con una breve descripción del add-on.</para>

    <para xml:lang="es">Ejemplo:</para>

    <programlisting>  &lt;?xml version="1.0" encoding="UTF-8" standalone="no"?&gt;
  &lt;project ...&gt;
        ....
        ....
        &lt;name&gt;gvNIX - Spring Roo - Addon - Web MVC Menu&lt;/name&gt;
        &lt;description&gt;Site structure management for Spring MVC based web layer&lt;/description&gt;
        ....
        ....</programlisting>

    <para>El nombre debe contener:<variablelist>
        <varlistentry>
          <term>gvNIX</term>

          <listitem>
            <para>Identificador del conjunto de add-ons</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>Spring Roo - Addon</term>

          <listitem>
            <para>Identificador de add-on de Roo</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><emphasis>Nombre del add-on</emphasis></term>

          <listitem>
            <para>Nombre descriptivo del add-on</para>
          </listitem>
        </varlistentry>
      </variablelist></para>

    <para>Esta información sirve para localizar rápidamente los add-ons de
    gvNIX en el entorno OSGi, por ejemplo al ejecutar el comando
    <emphasis>osgi ps</emphasis>.</para>

    <para>Es importante que la descripción sea descriptiva del objetivo del
    add-on (por ejemplo, <emphasis>Site structure management</emphasis>) y
    debe incluir información sobre la tecnología en la que debe aplicarse (por
    ejemplo, <emphasis>for Spring MVC based web layer</emphasis>). Este último
    punto ayudará a los desarrolladores a saber si pueden utilizarlo en
    determinados add-ons, siguiendo el ejemplo, el add-on de menu no podría
    utilizarse con una capa web basada en GWT.</para>
  </section>

  <section xml:id="convenciones_licencia-addon" xml:lang="es">
    <title>Licencia de add-ons</title>

    <para xml:lang="es">Se utilizará GPLv3.</para>

    <para xml:lang="es">Copiar al directorio <filename>legal</filename> del
    addon el archivo <filename>gvnix/trunk/code/LICENSE.TXT.</filename></para>

    <para>El texto original de la licencia se encuentra en <link
    xlink:href="http://www.gnu.org/licenses/gpl-3.0.txt">http://www.gnu.org/licenses/gpl-3.0.txt</link>.
    Guía de referencia: <link
    xlink:href="http://www.gnu.org/licenses/quick-guide-gplv3.html">http://www.gnu.org/licenses/quick-guide-gplv3.html</link>.</para>

    <para>Licencia a integrar en las cabeceras de las clases java:</para>

    <programlisting>/*
 * gvNIX is sponsored by the General Directorate for Information 
 * Technologies (DGTI) of the Regional Ministry of Finance and Public 
 * Administration of the Generalitat Valenciana (Valencian Community, 
 * Spain), managed by gvSIG Association and led by DISID.
 * Copyright (C) 2010 DGTI - Generalitat Valenciana
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see &lt;http://www.gnu.org/licenses/gpl-3.0.html&gt;.
 */</programlisting>

    <para>Este es un ejemplo de como debería quedar el fichero
    <filename>pom.xml</filename> del proyecto:</para>

    <programlisting>&lt;?xml version="1.0" encoding="UTF-8" standalone="no"?&gt;
&lt;project ...&gt;
...
  &lt;licenses&gt;
    &lt;license&gt;
      &lt;name&gt;&amp;gt;GNU General Public License (GPL), Version 3.0&lt;/name&gt;
      &lt;url&gt;http://www.gnu.org/licenses/gpl-3.0.html&lt;/url&gt;
      &lt;comments&gt;
      &lt;![CDATA[
      gvNIX is sponsored by the General Directorate for Information
      Technologies (DGTI) of the Regional Ministry of Finance and Public
      Administration of the Generalitat Valenciana (Valencian Community,
      Spain), managed by gvSIG Association and led by DISID.

      Copyright (C) 2010 DGTI - Generalitat Valenciana

      This program is free software: you can redistribute it and/or modify
      it under the terms of the GNU General Public License as published by
      the Free Software Foundation, either version 3 of the License, or
      (at your option) any later version.

      This program is distributed in the hope that it will be useful,
      but WITHOUT ANY WARRANTY; without even the implied warranty of
      MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
      GNU General Public License for more details.

      You should have received a copy of the GNU General Public License
      along with this program.  If not, see &lt;http://www.gnu.org/licenses /&gt;.
      ]]&gt;
      &lt;/comments&gt;
    &lt;/license&gt;
  &lt;/licenses&gt;
...
&lt;/project&gt;
</programlisting>
  </section>
</chapter>
