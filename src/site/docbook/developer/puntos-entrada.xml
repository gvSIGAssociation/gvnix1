<?xml version="1.0" encoding="UTF-8"?>
<chapter version="5.0" xml:id="puntos-entrada" xml:lang="es"
         xmlns="http://docbook.org/ns/docbook"
         xmlns:xlink="http://www.w3.org/1999/xlink"
         xmlns:ns5="http://www.w3.org/1998/Math/MathML"
         xmlns:ns4="http://www.w3.org/2000/svg"
         xmlns:ns3="http://www.w3.org/1999/xhtml"
         xmlns:ns="http://docbook.org/ns/docbook">
  <title xml:lang="es">Puntos de entrada al framework</title>

  <para>En el Framework los add-ons pueden tener acciones de dos tipos:</para>

  <variablelist>
    <varlistentry>
      <term>Pasivas</term>

      <listitem>
        <para>Acción se inicia en base a una petición del usuario en el Shell
        o por otro add-on. Principalmente se identifican por los
        Commands.</para>
      </listitem>
    </varlistentry>

    <varlistentry>
      <term>Activas</term>

      <listitem>
        <para>Son aquellas que se basan en los cambios que se produzcan en el
        proyecto.</para>
      </listitem>
    </varlistentry>
  </variablelist>

  <para>Normalmente, si el add-on va a manejar/generar algún producto que
  depende o se genera a partir de un artefacto de la aplicación, necesitará
  registrar algún comando para la primera generación y un elemento de escucha
  para mantener su producto actualizado según los cambios que pueda sufrir
  dicho artefacto.</para>

  <section xml:id="puntos-entrada_commands" xml:lang="es">
    <title xml:lang="es">Commands</title>

    <para xml:lang="es">Son clases que, mediante el uso de anotaciones,
    identifican operaciones accesibles al usuario desde la consola de Roo.
    Estas anotaciones contienen información suficiente para que la consola sea
    capaz de mostrar ayuda en línea, el autocompletado, parámetros disponibles
    y de su disponibilidad.</para>

    <para xml:lang="es">Estas clases suelen ser declarativas o con poca lógica
    (adaptar parámetros y opciones por defecto, etc...), delegando la
    ejecución de los comando a servicios OSGi definidos por un interface
    (normalmente con nombre terminado en el sufijo
    <literal>Operations</literal>). Normalmente, la clase
    <literal>Commands</literal>, el Interface <literal>Operations</literal> y
    la implementación de esta última (<literal>OperationsImpl</literal>) se
    encuentran en el mismo paquete.</para>
  </section>

  <section xml:id="puntos-entrada_listeners" xml:lang="es">
    <title xml:lang="es">Listeners</title>

    <para xml:lang="es">Como ya hemos comentado, los comandos permiten
    realizar operaciones pero los productos de las acciones normalmente están
    vinculados a un artefacto de la aplicación (entidad, controlador,
    servicio). La filosofía de Roo es que los cambios en los artefactos deben
    propagarse a todos los productos relacionados de forma automática
    (siempre, claro está, que esté en marcha la consola).</para>

    <para xml:lang="es">Para poder conseguir esto, además de un control de las
    acciones de los usuarios, los add-ons deben implementar Listeners que
    monitoricen los artefacto sobre los que actúan para que sean notificados
    con los cambios. Algunos de los tipos de listeners disponibles son:</para>

    <variablelist>
      <varlistentry>
        <term>MetadataNotificationListener</term>

        <listitem>
          <para xml:lang="es">Recibe notificaciones de los *metadatos* de los
          artefactos.</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>DependencyListener</term>

        <listitem>
          <para>Recibe los cambios en las dependencias del proyecto.</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>FileEventListener</term>

        <listitem>
          <para>Recibe los cambios en fichero y directorios.</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>ProcessManagerStatusListener</term>

        <listitem>
          <para>Recibe los cambios en el estado de <link
          linkend="arquitectura-interna_process-manager">Process
          Manager</link>.</para>
        </listitem>
      </varlistentry>
    </variablelist>

    <para xml:lang="es">En muchas ocasiones, nuestros add-ons necesitarán
    notificaciones del listeners de metadatos.</para>
  </section>
</chapter>
