<?xml version="1.0" encoding="UTF-8"?>
<chapter version="5.0" xml:id="calidad-codigo" xml:lang="es"
         xmlns="http://docbook.org/ns/docbook"
         xmlns:xlink="http://www.w3.org/1999/xlink"
         xmlns:ns5="http://www.w3.org/1998/Math/MathML"
         xmlns:ns4="http://www.w3.org/2000/svg"
         xmlns:ns3="http://www.w3.org/1999/xhtml"
         xmlns:ns="http://docbook.org/ns/docbook">
  <title xml:lang="es">Calidad del código</title>

  <section xml:id="calidad-codigo_recomendaciones" xml:lang="es">
    <title xml:lang="es">Recomendaciones a seguir en el código</title>

    <para xml:lang="es">En esta sección se incluyen una serie de recomendaciones
    para mantener la calidad del código del framework. Estas recomendaciones
    están basadas en reglas de buenas prácticas medidas por ciertas herramientas
    pensadas para este fin.</para>

    <itemizedlist>
      <listitem>
        <para><emphasis>No dejar bloque de código vacíos</emphasis></para>
        
        <para>Ya sean excepciones ignoradas o condiciones no utilizadas, es 
        recomendable no dejar estos bloques sin realizar ninguna operación (los comentarios
        no cuentan como operación). Ejemplos:</para>
        
	    <itemizedlist>
	      <listitem>
	        <para>En el caso de ignorar una excepción podemos lanzar una traza de depuración:</para>
	        
	        <programlisting> } catch (Exception toIgnore) {
    LOGGER.finest("Problem do something");
  }
	        </programlisting>
	      </listitem>
	      <listitem>
	        <para>Para condiciones de if que no se utilizan es recomendable eliminarlas</para>
	      </listitem>
	    </itemizedlist>		

      </listitem>
      <listitem>
      	<para><emphasis>Lanzar las excepciones</emphasis></para>
      	
      	<para>Suele pasar a veces que en bloques <literal>catch</literal> 
      	ser crean las excepciones <emphasis>pero se lanzan</emphasis> con
      	la sentencia <literal>throw</literal></para>
      
      </listitem>
      <listitem>
      	<para><emphasis>Implementar el método</emphasis> <literal>hashCode</literal>  
      		<emphasis>a la vez que el</emphasis> <literal>equals</literal></para>
      	
      	<para>Para el correcto funcionamiento del método <literal>equals</literal>
      	en una clase con dicho método personalizado, en fundamental personalizar
      	también el método <literal>hashCode</literal> utilizando los mismos
      	campos en ambos.</para>
      	
      	<para>Eclipse, en la opción <literal>source</literal> ofrece una
      	herramienta que permite generar ambos métodos de manera automática a
      	partir de los campos de la clase que estimemos oportunos.</para>
      
      </listitem>
      <listitem>
      	<para><emphasis>Añadir JavaDoc en todos los métodos públicos.</emphasis></para>
      </listitem>
      <listitem>
      	<para><emphasis>Añadir comentarios en los métodos para explicar
      	bloques de código</emphasis></para>
      </listitem>            
      <listitem>
      	<para><emphasis>Uso de </emphasis> <literal>try/finally</literal>  
      		<emphasis>para el cierre de recursos</emphasis></para>
      	
      	<para>Siempre que se utilicen recursos, como <emphasis>Streams</emphasis>,
      	<emphasis>objetos de BBDD (Conexiones, cursores, Statement)</emphasis>
      	utilizaremos un bloque <literal>try/finally</literal> para asegurarnos
      	que los recursos son liberados. Ejemplo:</para>
      	
      	<programlisting>			InputStream ins = null;
			OutputStream outs = null;
			try {
				if (fileManager.exists(path)){
					mutableFile = fileManager.updateFile(path);
				} else {
					mutableFile = fileManager.createFile(path);
				}

				ins = FileUtils.getInputStream(getClass(), file);
				outs = mutableFile.getOutputStream();
				TokenReplacementFileCopyUtils.replaceAndCopy(
						ins, outs, properties);
				
				insertI18nMessages();
			} catch (IOException ioe) {
				throw new IllegalStateException(ioe);
			} finally {
				IOUtils.closeQuietly(ins);
				IOUtils.closeQuietly(outs);
			}
</programlisting>

      	<para>Para cerrar los objetos de tipo<literal>*Stream</literal>
      	es recomendable usar el método <literal>IOUtils.closeQuietly</literal></para>
      
      </listitem>
      <listitem>
      	<para><emphasis>Evitar el uso de operador </emphasis> <literal>+</literal></para>
      	
      	<para>Es recomendable usar otras opciones como:</para>
        <itemizedlist>
      		<listitem>
      			<para><literal>String.concat</literal></para>
      		</listitem>
      		<listitem>
      			<para><literal>StringBuilder</literal>. Preferentemente antes que 
      			<literal>StringBuffer</literal>, a no ser que se requiera que
      			las instancia se <emphasis>Thread-safe</emphasis></para>
      		</listitem>
      		<listitem>
      			<para><literal>String.format</literal>. Para cadenas complejas
      			o con varios argumentos. Ejemplo: </para>
      			<programlisting> String.format("Esta concatenación de '%s' es mas compleja ya que %s.%s usar varias cadenas.", 
      			var1, var2, var3)</programlisting>
      		</listitem>      		
    	</itemizedlist>  	
      </listitem>
      <listitem>
      	<para><emphasis>Evitar identificadores de variables o campos de menos de 3 caracteres.</emphasis></para>
      </listitem>
      <listitem>
      	<para><emphasis>Nombres de constantes en mayúsculas.</emphasis></para>
	<para>Incluye el <literal>LOGGER</literal>.</para>
      </listitem>
      <listitem>
      	<para><emphasis>No modificar un campo estático desde un método no-estático</emphasis></para>
      </listitem>
      <listitem>
      	<para><emphasis>Añadir el modificador </emphasis><literal>final</literal> en las
        propiedades que se establecen en el constructor y no se van a ser modificadas</para>
      </listitem>
      <listitem>
      	<para><emphasis>Eliminar código muerto.</emphasis></para>
      	<para>El código muerto son métodos privados que nunca se invocan, campos de clase no usados,
      	variables asignadas que nunca se utilizan en el método, etc...</para>
      </listitem>	  
      <listitem>
      	<para><emphasis>Iterar sobre</emphasis> <literal>Map.entrySet</literal> 
      		<emphasis>en vez de</emphasis> <literal>Map.keySet</literal></para>
      	<para>El coste de iteración es el mismo y se obtiene la clave y el valor a la vez.</para>
      </listitem>
      
      <listitem>
      	<para>Precauciones a tener en cuenta en el código fuente del framework para mejorar la puntuación de SONAR:</para>
        <itemizedlist>
      		<listitem>
      			<para>Ver si es posible evitar el uso de Set de URL en addon de temas (puede ser un grave problema de rendimiento)</para>
      		</listitem>
      		<listitem>
      			<para>Evitar catch vacios: Ver la posibilidad de log o usar apache commons para cerrar conexiones.</para>
      		</listitem>
      		<listitem>
      			<para>Arreglar algunos new XXXException(... sin el throw</para>
      		</listitem>
      		<listitem>
      			<para>Algunas comprobaciones de is null.</para>
      		</listitem>
      		<listitem>
      			<para>Limpiar algunas variable no usadas.</para>
      		</listitem>
    	</itemizedlist>  	
      </listitem>
      
      <listitem>
      	<para>Precauciones a tener en cuenta en el código fuente de los proyectos generados para mejorar la puntuación de SONAR:</para>
        <itemizedlist>
      		<listitem>
      			<para>Algunos if que no usan llaves</para>
      		</listitem>
      		<listitem>
      			<para>Añadir la generación de los test para las entidades</para>
      		</listitem>
      		<listitem>
      			<para>Parece que en algún sitio del los aj (creo que en el equals) hay alguna comprobación de null que se podría mejorar.</para>
      		</listitem>
    	</itemizedlist>  	
      </listitem>
      
    </itemizedlist>
  </section>
  
  <section xml:id="calidad-codigo_lanzar-proceso-comprobacion" xml:lang="es">
    <title xml:lang="es">Lanzar proceso de comprobación</title>

    <para xml:lang="es">Para el proyecto gvNIX se ha utilizado la herramienta
    <link xlink:href="http://www.sonarsource.org/">Sonar</link> (
    <link xlink:href="http://www.sonarsource.org/">http://www.sonarsource.org/</link>). Esta
    herramienta se compone de un lanzador de proceso (en gvNIX se utiliza el plugin de maven)
    que analiza el código y una aplicación servidor que permite visualizar y gestionar los resultados.
    </para>
    
    <para>En este apartado se describe como preparar el entrono para lanzar el proceso de análisis
    y como ejecutarlo sobre un proyecto generado por gvNIX o sobre el propio framework. No se
    describen la instalación del servido y su gestión.</para>
    
    <section xml:id="calidad-codigo_lanzar-proceso-comprobacion-settings"  xml:lang="es">
       <title xml:lang="es">Configuración del entorno para lanzar el análisis de Sonar</title>

       <para>Para que el plugin de maven sea capaz de conectarse al servidor de Sonar es necesario
       configura especificar los parámetros de conexión a la base de datos de Sonar. Para ello
       hay que añadir un <emphasis>profile</emphasis> en el fichero <emphasis>${HOME}/.m2/settings.xml</emphasis>
       . Este es un ejemplo de la declaración</para>

       <programlisting><![CDATA[....
<settings>
  ....
  ....
  ....
  <profiles>
    ....
    ....
    ....
    <profile>
        <id>sonar</id>
        <activation>
            <activeByDefault>true</activeByDefault>
        </activation>
        <properties>
         <sonar.jdbc.url>
            jdbc:postgresql://localhost/sonar
          </sonar.jdbc.url>
          <sonar.jdbc.driverClassName>org.postgresql.Driver</sonar.jdbc.driverClassName>
          <sonar.jdbc.username>sonar</sonar.jdbc.username>
          <sonar.jdbc.password>sonar</sonar.jdbc.password>
            <!-- optional URL to server. -->
            <sonar.host.url>
              http://localhost:9000
            </sonar.host.url>
        </properties>
    </profile>
  </profiles>
</settings>
]]></programlisting>

        <para>En el ejemplo se pueden ver los siguientes parámetros:</para>

        <itemizedlist>
      	    <listitem>
                <para><literal>sonar.jdbc.url</literal>:Url JDBC para conexión con el servidor de BBDD.</para>
            </listitem>
      	    <listitem>
                <para><literal>sonar.jdbc.driverClassName</literal>:Nombre de la clase 
                <emphasis>Driver</emphasis> JDBC a usar.</para>
            </listitem>
      	    <listitem>
                <para><literal>sonar.jdbc.username</literal> y <literal>sonar.jdbc.username</literal>: 
                Datos de usuario para conectar al servidor de BBDD</para>
            </listitem>
      	    <listitem>
                <para><literal>sonar.host.url</literal>:Url de conexión al servido (aplicación) Sonar.</para>
            </listitem>
        </itemizedlist>

        <para>También es posible especificar estos parámetros desde la línea de comandos en la ejecución
        usando el formato <literal>-Dsonar.jdbc.username=sonar</literal></para>

        <para>Para más información sobre la configuración del plugin de maven ver la
          <link xlink:href="http://docs.codehaus.org/display/SONAR/Installing+and+Configuring+Maven">
          documentación de sonar</link> al respecto</para>
    </section>
    
    <section xml:lang="es">
       <title xml:lang="es">Lanzar el análisis de Sonar</title>

       <para>Para lanzar el análisis de sonar sobre un proyecto maven hay que usar el comando:</para>
       <programlisting>mvn clean install sonar:sonar -Dmaven.test.failure.ignore=true</programlisting>
       <para>Si ya se ha lanzado el install puede usarse el siguiente comando para no volver
       a lanzarlo:</para>
       <programlisting>mvn dependency:resolve sonar:sonar</programlisting>

       <para>Una vez terminado el proceso de análisis es posible consultar el resultado desde
       la aplicación servidor sonar.</para>

       <para>Para más información sobre la configuración del plugin de maven ver la
          <link xlink:href="http://docs.codehaus.org/display/SONAR/Analyzing+with+Maven">
          documentación de sonar</link> al respecto</para>
    </section>

    <section xml:lang="es">
      <title xml:lang="es">Visualizar evidencias de Sonar en proyectos de eclipse</title>
      
      <para>Existe un plugin para eclipse que permite visualizar las evidencias detectadas
      por un análisis de sonar desde el proyecto de un workspace de eclipse. La información
      para instalar, configurar y usar este plugin se encuentra en 
      <link xlink:href="http://docs.codehaus.org/display/SONAR/Using+Sonar+in+Eclipse">
          documentación de sonar</link> al respecto</para>
    </section>
    
    <section xml:lang="es">
      <title xml:lang="es">Establecer el perfil para la aplicación</title>
      
      <para>Una vez analizado un proyecto por primera vez es posible
      establecer el perfil de reglas que se deben aplicar al proyecto.
      Para ello es necesario seguir los siguiente pasos:
        <itemizedlist>
      		<listitem>
      			<para>Entrar en http://hq02.disid.com:9000</para>
				<para>Logarse como Administrador</para>
				<para>Seleccionar el proyecto desde el menú Proyectos</para>
				<para>Seleccionar en el menú Configuración del proyecto
				(debajo del input buscar, en la parte derecha)
				y seleccionar Perfiles de calidad</para>
				<para>Seleccionar el perfil a usar para Java</para>
			</listitem>
		</itemizedlist>
	  </para>
    </section>

    <section xml:lang="es">
      <title xml:lang="es">Exportar/importar perfiles de calidad</title>
      
      <para>Es posible exportar e importar los perfiles de calidad.</para>
      
      <para>Exportar:
        <itemizedlist>
      		<listitem>
      			<para>Entrar en http://hq02.disid.com:9000</para>
				<para>Entrar en el menú Configuración de sonar (en la parte derecha de la barra superior, a la izquierda del input buscar).</para>
				<para>Seleccionar Perfiles de calidad</para>
				<para>Seleccionar el perfil a exportar</para>
				<para>Pulsar sobre pestaña Enlaces permanentes</para>
				<para>Descargar el fichero del link Todas las reglas</para>
			</listitem>
		</itemizedlist>
	  </para>

      <para>Importar:
        <itemizedlist>
      		<listitem>
      			<para>Entrar en http://hq02.disid.com:9000</para>
				<para>Logarse como Administrador</para>
				<para>Entrar en el menú Configuración de sonar (en la parte derecha de la barra superior, a la izquierda del input buscar).</para>
				<para>Seleccionar Perfiles de calidad</para>
				<para>Pulsar sobre Restaurar perfil (en la parte derecha arriba)</para>
				<para>Seleccionar el archivo de la exportación.</para>
				<para>Pulsar Restaurar</para>
			</listitem>
		</itemizedlist>
	  </para>
	  
	  <para>El fichero de reglas utilizado en eXcentia se puede encontrar en
	  http://scmcit.gva.es/svn/gvnix/trunk/doc/general/sonar/export-excentia-sonar.xml</para>
    </section>

  </section>
</chapter>
